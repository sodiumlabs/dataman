{
  "address": "0xfa9e424214137a299f08e840F46D78d320D5870A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositRewardToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECENT_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getInvites",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfig",
          "name": "config_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inviteEarnPointPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invitePoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "basicPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invite2Point",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invite5Point",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "invites",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestCheckPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "latestClaimedAts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityStakeInflation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxInvites",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeLP",
          "type": "uint256"
        }
      ],
      "name": "onLiquidityStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeLP",
          "type": "uint256"
        }
      ],
      "name": "onLiquidityUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onUtilityStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "onUtilityUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrerAirdropBegin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "referrerAirdropCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeInflation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakePointCheckpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pointRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestCheckPoint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapLUAAirdropBegin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapLUAAirdropCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPointRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "viewClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "viewUserPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1c3bdfe155d8ac191bdf86199a9b461e3af2922510e6ef019ae1fd8259c53fb",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2189936",
    "logsBloom": "0x
    "blockHash": "0x86edf411c7007ed8b53039c8a7a4658ffc8be83c143859ff1b4067e839fa2a0b",
    "transactionHash": "0xb1c3bdfe155d8ac191bdf86199a9b461e3af2922510e6ef019ae1fd8259c53fb",
    "logs": [],
    "blockNumber": 120227520,
    "cumulativeGasUsed": "2189936",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4f1f45ca5fe8f6515b42ba0264732978",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECENT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInvites\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"config_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteEarnPointPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invitePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"basicPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invite2Point\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invite5Point\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invites\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestCheckPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestClaimedAts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityStakeInflation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInvites\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeLP\",\"type\":\"uint256\"}],\"name\":\"onLiquidityStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeLP\",\"type\":\"uint256\"}],\"name\":\"onLiquidityUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onUtilityStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onUtilityUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerAirdropBegin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"referrerAirdropCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeInflation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakePointCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pointRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestCheckPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLUAAirdropBegin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLUAAirdropCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPointRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewUserPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"maxInvites()\":{\"notice\":\"params\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Airdrop.sol\":\"Airdrop\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Airdrop.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./IVAMM.sol\\\";\\nimport \\\"./IUtilityToken.sol\\\";\\nimport \\\"./config/IConfig.sol\\\";\\nimport \\\"./PriceField.sol\\\";\\nimport \\\"./LiquidityStakeHook.sol\\\";\\nimport \\\"./UtilityStakeHook.sol\\\";\\n\\ncontract Airdrop is\\n    Initializable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable,\\n    LiquidityStakeHook,\\n    UtilityStakeHook\\n{\\n    uint128 public constant PRICE_PRECISION = 1e18;\\n\\n    uint128 public constant PRECENT_DENOMINATOR = 10000000000;\\n\\n    // storage\\n    mapping(address => uint256) public userPoints;\\n    mapping(address => address) public referrers;\\n    mapping(address => address[]) public invites;\\n    struct StakePointCheckpoint {\\n        // How many points the user gets per second\\n        uint256 pointRate;\\n        uint256 latestCheckPoint;\\n    }\\n    mapping(address => StakePointCheckpoint) public stakePointCheckpoints;\\n    mapping(address => uint256) public latestClaimedAts;\\n\\n    /// params\\n    uint256 public maxInvites;\\n    IConfig public config;\\n\\n    // invite params\\n    struct InvitePoint {\\n        uint256 basicPoint;\\n        uint256 invite2Point;\\n        uint256 invite5Point;\\n    }\\n    InvitePoint public invitePoint;\\n    uint256 public inviteEarnPointPercent;\\n\\n    // stake params\\n    uint256 public stakeInflation;\\n    uint256 public liquidityStakeInflation;\\n\\n    uint256 public totalPoint;\\n    uint256 public totalPointRate;\\n    uint256 public latestCheckPoint;\\n\\n    uint256 public rewardRate;\\n    uint256 public periodFinish;\\n\\n    event DepositRewardToken(uint256 amount);\\n    event Claim(address indexed user, uint256 amount);\\n\\n    function initialize(IConfig config_) public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        _transferOwnership(tx.origin);\\n\\n        config = config_;\\n        maxInvites = 5;\\n\\n        invitePoint = InvitePoint(10, 50, 200);\\n        // 20%\\n        inviteEarnPointPercent = 2000000000;\\n\\n        // 150%\\n        stakeInflation = 15000000000;\\n\\n        // 200%\\n        liquidityStakeInflation = 20000000000;\\n\\n        rewardRate = 0;\\n\\n        periodFinish = block.timestamp + 30 days;\\n    }\\n\\n    function getInvites(address user) external view returns (address[] memory) {\\n        return invites[user];\\n    }\\n\\n    function _addPoint(address user, uint256 point) internal {\\n        uint256 inviteEranPoint = 0;\\n\\n        if (referrers[user] != address(0)) {\\n            inviteEranPoint = Math.mulDiv(\\n                point,\\n                inviteEarnPointPercent,\\n                PRECENT_DENOMINATOR\\n            );\\n\\n            userPoints[referrers[user]] += inviteEranPoint;\\n        }\\n\\n        userPoints[user] += point;\\n        totalPoint = totalPoint + point + inviteEranPoint;\\n    }\\n\\n    /// Invites\\n    uint256 private _lastExerciseAmount;\\n\\n    function referrerAirdropBegin() external {\\n        _lastExerciseAmount = IVAMM(config.getVAMMAddress())\\n            .getPriceField()\\n            .exerciseAmount();\\n    }\\n\\n    function referrerAirdropCommit(address referrer) external {\\n        address sender = msg.sender;\\n        if (sender == referrer) {\\n            return;\\n        }\\n        uint256 nowEA = IVAMM(config.getVAMMAddress())\\n            .getPriceField()\\n            .exerciseAmount();\\n        if (_lastExerciseAmount > 0 && _lastExerciseAmount > nowEA) {\\n            return;\\n        }\\n        _lastExerciseAmount = 0;\\n        address[] storage inviteStorage = invites[referrer];\\n        if (\\n            referrers[sender] == address(0) && inviteStorage.length < maxInvites\\n        ) {\\n            inviteStorage.push(sender);\\n            referrers[sender] = referrer;\\n\\n            uint256 pointReward = invitePoint.basicPoint;\\n\\n            if (inviteStorage.length == 2) {\\n                pointReward += invitePoint.invite2Point;\\n            } else if (inviteStorage.length == 5) {\\n                pointReward += invitePoint.invite5Point;\\n            }\\n\\n            _addPoint(referrer, pointReward);\\n        }\\n    }\\n\\n    /// Swap LUA\\n    uint256 private _marketSupport;\\n    uint256 private _utilityTokenSupply;\\n    bool private _startSwap;\\n\\n    function swapLUAAirdropBegin() external {\\n        (, , _marketSupport, ) = IVAMM(config.getVAMMAddress()).getLiquidity();\\n        _utilityTokenSupply = config.getUtilityToken().totalSupply();\\n        _startSwap = true;\\n    }\\n\\n    function swapLUAAirdropCommit() external {\\n        require(_startSwap, \\\"sc00\\\");\\n        address user = msg.sender;\\n        uint256 _newMarketSupport = 0;\\n        uint256 _newUtilityTokenSupply = config.getUtilityToken().totalSupply();\\n        require(_newUtilityTokenSupply > _utilityTokenSupply, \\\"sc01\\\");\\n        (, , _newMarketSupport, ) = IVAMM(config.getVAMMAddress())\\n            .getLiquidity();\\n        if (_newMarketSupport > _marketSupport && _marketSupport > 0) {\\n            uint256 pointReward = Math.mulDiv(\\n                _newMarketSupport - _marketSupport,\\n                1,\\n                PRICE_PRECISION\\n            );\\n            _addPoint(user, pointReward);\\n        }\\n\\n        _marketSupport = 0;\\n        _utilityTokenSupply = 0;\\n        _startSwap = false;\\n    }\\n\\n    function viewUserPoint(address user) public returns (uint256) {\\n        _checkpoint(user);\\n        for (uint256 i = 0; i < invites[user].length; i++) {\\n            address invite = invites[user][i];\\n            if (invite != address(0)) {\\n                _checkpoint(invite);\\n            }\\n        }\\n\\n        return userPoints[user];\\n    }\\n\\n    function viewClaimable(address user) public returns (uint256) {\\n        viewUserPoint(user);\\n        uint256 point = userPoints[user];\\n        if (point > 0) {\\n            uint256 d = block.timestamp - latestClaimedAts[user];\\n            return Math.mulDiv(point * d, rewardRate, totalPoint);\\n        }\\n        return 0;\\n    }\\n\\n    function claim() external {\\n        address user = msg.sender;\\n        _checkpoint(user);\\n        uint256 claimable = viewClaimable(user);\\n        if (claimable > 0) {\\n            config.getPRToken().transfer(user, claimable);\\n        }\\n        latestClaimedAts[user] = block.timestamp;\\n        emit Claim(user, claimable);\\n    }\\n\\n    function _checkpoint(address user) internal {\\n        StakePointCheckpoint storage checkpoint = stakePointCheckpoints[user];\\n        if (\\n            checkpoint.pointRate > 0 &&\\n            checkpoint.latestCheckPoint > 0 &&\\n            checkpoint.latestCheckPoint < block.timestamp\\n        ) {\\n            uint256 time = block.timestamp - checkpoint.latestCheckPoint;\\n            uint256 point = Math.mulDiv(\\n                checkpoint.pointRate,\\n                time,\\n                PRICE_PRECISION * PRECENT_DENOMINATOR\\n            );\\n            _addPoint(user, point);\\n        }\\n\\n        if (\\n            latestCheckPoint > 0 &&\\n            latestCheckPoint < block.timestamp &&\\n            totalPointRate > 0\\n        ) {\\n            uint256 time = block.timestamp - latestCheckPoint;\\n            uint256 point = Math.mulDiv(\\n                totalPointRate,\\n                time,\\n                PRICE_PRECISION * PRECENT_DENOMINATOR\\n            );\\n            totalPoint += point;\\n        }\\n\\n        if (latestClaimedAts[user] == 0) {\\n            latestClaimedAts[user] = block.timestamp;\\n        }\\n\\n        checkpoint.latestCheckPoint = block.timestamp;\\n        latestCheckPoint = block.timestamp;\\n    }\\n\\n    function onLiquidityStake(\\n        address staker,\\n        uint256,\\n        uint256 stakeLP\\n    ) external {\\n        _checkpoint(staker);\\n        uint256 rate = Math.mulDiv(\\n            stakeLP, \\n            liquidityStakeInflation, \\n            1 days\\n        );\\n        StakePointCheckpoint storage checkpoint = stakePointCheckpoints[staker];\\n        checkpoint.pointRate += rate;\\n        totalPointRate += rate;\\n    }\\n\\n    function onLiquidityUnstake(\\n        address staker,\\n        uint256,\\n        uint256 unstakeLP\\n    ) external {\\n        _checkpoint(staker);\\n        uint256 rate = Math.mulDiv(unstakeLP, liquidityStakeInflation, 1 days);\\n        StakePointCheckpoint storage checkpoint = stakePointCheckpoints[staker];\\n        checkpoint.pointRate -= rate;\\n        totalPointRate -= rate;\\n    }\\n\\n    function onUtilityStake(address staker, uint256 amount) external {\\n        _checkpoint(staker);\\n        uint256 rate = Math.mulDiv(amount, stakeInflation, 1 days);\\n        StakePointCheckpoint storage checkpoint = stakePointCheckpoints[staker];\\n        checkpoint.pointRate += rate;\\n        totalPointRate += rate;\\n    }\\n\\n    function onUtilityUnstake(address staker, uint256 amount) external {\\n        _checkpoint(staker);\\n        uint256 rate = Math.mulDiv(amount, stakeInflation, 1 days);\\n        StakePointCheckpoint storage checkpoint = stakePointCheckpoints[staker];\\n        checkpoint.pointRate -= rate;\\n        totalPointRate -= rate;\\n    }\\n\\n    function depositRewardToken(uint256 amount) external {\\n        IUtilityToken rewardToken = config.getPRToken();\\n        rewardToken.transferFrom(msg.sender, address(this), amount);\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = amount / 30 days;\\n            periodFinish = block.timestamp + 30 days;\\n        } else {\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            rewardRate = (amount + leftover) / remaining;\\n        }\\n        emit DepositRewardToken(amount);\\n    }\\n\\n    /// upgrade --- ///\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x702f9a86c53d822de935f7bd29017f6bb9c63aebbf7d1c1132bcfc38d3f092e2\",\"license\":\"GPL-3.0\"},\"contracts/IUtilityToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IUtilityToken is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x30d63bfb77e99692f375570437cd5d3111ef40ce03542a3b0a4fa4019f9a1b43\",\"license\":\"GPL-3.0\"},\"contracts/IVAMM.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IUtilityToken.sol\\\";\\nimport \\\"./PriceField.sol\\\";\\n\\ninterface IVAMM {\\n    event Mint(\\n        address indexed buyer,\\n        uint256 tokenAmount,\\n        uint256 payAmount,\\n        uint256 fees\\n    );\\n    event Burn(\\n        address indexed seller,\\n        uint256 tokenAmount,\\n        uint256 payAmount,\\n        uint256 fees\\n    );\\n    event UpdateMarketPrice(uint256 newMarketPrice);\\n    event UpdateMFR(uint256 t, uint256 x);\\n\\n    function borrow(uint256 _borrowAmount) external;\\n\\n    function repay(uint256 _repayAmount) external;\\n\\n    function canBorrowAmount() external view returns (uint256);\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function getPriceField() external view returns (PriceField);\\n\\n    function mintByPRToken(\\n        address payTokenAddress,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount\\n    ) external;\\n\\n    function getLiquidity()\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 floorPriceSupport,\\n            uint256 marketSupport,\\n            uint256 mfr\\n        );\\n\\n    function mintByPRToken(\\n        address payTokenAddress,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount,\\n        address recipient\\n    ) external;\\n\\n    function mint(\\n        address payToken,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount\\n    ) external;\\n\\n    function mint(\\n        address payToken,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount,\\n        address recipient\\n    ) external;\\n\\n    function burn(\\n        uint256 brunAmount,\\n        address receivedToken,\\n        uint256 minReceivedAmount\\n    ) external;\\n\\n    function burn(\\n        uint256 brunAmount,\\n        address receivedToken,\\n        uint256 minReceivedAmount,\\n        address recipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0x76931896e5b07bca285864ed379feeb8ce961f33694da07b8e700f05d7ae989b\",\"license\":\"GPL-3.0\"},\"contracts/LiquidityStakeHook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface LiquidityStakeHook {\\n    function onLiquidityStake(\\n        address staker,\\n        uint256 amount,\\n        uint256 stakerLP\\n    ) external;\\n\\n    function onLiquidityUnstake(\\n        address staker,\\n        uint256 amount,\\n        uint256 stakerLP\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb7347b35a4aeb1384d6dc6455476c1b37798a12b166dd9ada293204832ea1341\",\"license\":\"GPL-3.0\"},\"contracts/PriceField.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./config/IConfig.sol\\\";\\n\\ncontract PriceField {\\n    uint128 public constant PRICE_PRECISION = 1e18;\\n\\n    uint128 public constant PRECENT_DENOMINATOR = 10000000000;\\n\\n    IConfig private _config;\\n\\n    // main slope\\n    // 10 decimals\\n    uint256 private _slope;\\n\\n    //\\n    uint256 private _exerciseAmount;\\n\\n    // current floor price\\n    uint256 private _floorPrice;\\n\\n    event UpdateFloorPrice(uint256 newFloorPrice);\\n\\n    constructor(IConfig config_, uint256 slope_, uint256 floorPrice_) {\\n        _config = config_;\\n        _slope = slope_;\\n        _exerciseAmount = 0;\\n\\n        _setFloorPrice(floorPrice_);\\n    }\\n\\n    modifier onlyVamm() {\\n        require(\\n            msg.sender == address(_config.getVAMMAddress()),\\n            \\\"PriceField: caller is not the vamm\\\"\\n        );\\n        _;\\n    }\\n\\n    function _setFloorPrice(uint256 floorPrice_) internal {\\n        require(floorPrice_ >= PRICE_PRECISION / 2, \\\"floor price too low\\\");\\n        uint256 x3 = _config.getUtilityToken().totalSupply();\\n        if (x3 > c()) {\\n            uint256 maxFloorPrice = (Math.mulDiv(\\n                x3 - c(),\\n                _slope,\\n                PRECENT_DENOMINATOR,\\n                Math.Rounding.Zero\\n            ) + PRICE_PRECISION) / 2;\\n            _floorPrice = Math.min(floorPrice_, maxFloorPrice);\\n        }\\n        _floorPrice = floorPrice_;\\n        emit UpdateFloorPrice(floorPrice_);\\n    }\\n\\n    function setFloorPrice(uint256 floorPrice_) external onlyVamm {\\n        _setFloorPrice(floorPrice_);\\n    }\\n\\n    function increaseSupplyWithNoPriceImpact(uint256 amount) external onlyVamm {\\n        _exerciseAmount += amount;\\n    }\\n\\n    function exerciseAmount() external view returns (uint256) {\\n        return _exerciseAmount;\\n    }\\n\\n    function slope() external view returns (uint256) {\\n        return _slope;\\n    }\\n\\n    function slope0() external view returns (uint256) {\\n        uint256 a = _floorPrice;\\n        uint256 b = _finalPrice1(x2() + _exerciseAmount, false);\\n        uint256 h = x2() - x1();\\n        return Math.mulDiv(b - a, PRECENT_DENOMINATOR, h);\\n    }\\n\\n    function floorPrice() external view returns (uint256) {\\n        return _floorPrice;\\n    }\\n\\n    function x1() public view returns (uint256) {\\n        // (2fp - 1)/m\\n        return\\n            Math.mulDiv(\\n                (_floorPrice * 2 - PRICE_PRECISION),\\n                PRECENT_DENOMINATOR,\\n                _slope,\\n                Math.Rounding.Zero\\n            );\\n    }\\n\\n    function x2() public view returns (uint256) {\\n        // x2 = x1+2/m\\n        return x1() + c();\\n    }\\n\\n    function c() public view returns (uint256) {\\n        // 2/m\\n        return\\n            Math.mulDiv(\\n                2 * PRICE_PRECISION,\\n                PRECENT_DENOMINATOR,\\n                _slope,\\n                Math.Rounding.Zero\\n            );\\n    }\\n\\n    function c1() public view returns (uint256) {\\n        // x1 + 1/m\\n        return\\n            x1() +\\n            Math.mulDiv(\\n                PRICE_PRECISION,\\n                PRECENT_DENOMINATOR,\\n                _slope,\\n                Math.Rounding.Zero\\n            );\\n    }\\n\\n    function b2() public view returns (uint256) {\\n        // m*x2\\n        return Math.mulDiv(x2(), _slope, PRECENT_DENOMINATOR, Math.Rounding.Up);\\n    }\\n\\n    function k() public view returns (uint256) {\\n        // b2-fp\\n        return b2() - _floorPrice;\\n    }\\n\\n    function finalPrice1(\\n        uint256 x,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _finalPrice1(x, round);\\n    }\\n\\n    function finalPrice2(\\n        uint256 x,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _finalPrice2(x, round);\\n    }\\n\\n    function _finalPrice1(\\n        uint256 x,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(x >= x1() + _exerciseAmount, \\\"x too low\\\");\\n        require(x <= x2() + _exerciseAmount, \\\"x too high\\\");\\n        if (x < c1() + _exerciseAmount) {\\n            return\\n                Math.mulDiv(\\n                    PRICE_PRECISION -\\n                        Math.mulDiv(\\n                            c1() + _exerciseAmount - x,\\n                            _slope,\\n                            PRECENT_DENOMINATOR,\\n                            round ? Math.Rounding.Up : Math.Rounding.Zero\\n                        ),\\n                    k(),\\n                    2 * PRICE_PRECISION\\n                ) + _floorPrice;\\n        }\\n        // ((x-c1-s) * m + 1) * k / 2 + fp\\n        return\\n            Math.mulDiv(\\n                Math.mulDiv(\\n                    x - c1() - _exerciseAmount,\\n                    _slope,\\n                    PRECENT_DENOMINATOR,\\n                    round ? Math.Rounding.Up : Math.Rounding.Zero\\n                ) + PRICE_PRECISION,\\n                k(),\\n                2 * PRICE_PRECISION\\n            ) + _floorPrice;\\n    }\\n\\n    function _finalPrice2(\\n        uint256 x,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(x >= x2() + _exerciseAmount, \\\"x too low\\\");\\n        // (x-s) * m\\n        return\\n            Math.mulDiv(\\n                x - _exerciseAmount,\\n                _slope,\\n                PRECENT_DENOMINATOR,\\n                round ? Math.Rounding.Up : Math.Rounding.Zero\\n            );\\n    }\\n\\n    function getPrice1(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _getPrice1(xs, xe, round);\\n    }\\n\\n    function getPrice2(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _getPrice2(xs, xe, round);\\n    }\\n\\n    // Calculate the total price of the price1 based on two points\\n    function _getPrice1(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(xs <= xe, \\\"xs > xe\\\");\\n        uint256 p1xs = xs;\\n        uint256 p1xe = xe;\\n\\n        if (xs > x2() + _exerciseAmount) {\\n            return 0;\\n        }\\n\\n        if (xe < x1() + _exerciseAmount) {\\n            return 0;\\n        }\\n\\n        if (xs < x1() + _exerciseAmount) {\\n            p1xs = x1() + _exerciseAmount;\\n        }\\n\\n        if (xe > x2() + _exerciseAmount) {\\n            p1xe = x2() + _exerciseAmount - 1;\\n        }\\n\\n        uint256 a = _finalPrice1(p1xs, round);\\n        uint256 b = _finalPrice1(p1xe, round);\\n\\n        return ((a + b) * (p1xe - p1xs)) / 2 / PRICE_PRECISION;\\n    }\\n\\n    // Calculate the total price of the price2 based on two points\\n    function _getPrice2(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(xs <= xe, \\\"xs > xe\\\");\\n\\n        if (xe < x2() + _exerciseAmount) {\\n            return 0;\\n        }\\n        uint256 p2xs = xs;\\n        uint256 p2xe = xe;\\n\\n        if (xs < x2() + _exerciseAmount) {\\n            p2xs = x2() + _exerciseAmount;\\n        }\\n\\n        uint256 a = _finalPrice2(p2xs, round);\\n        uint256 b = _finalPrice2(p2xe, round);\\n\\n        return\\n            Math.mulDiv(\\n                a + b,\\n                p2xe - p2xs,\\n                2 * PRICE_PRECISION,\\n                round ? Math.Rounding.Up : Math.Rounding.Zero\\n            );\\n    }\\n\\n    // Calculate the total price of the floor price based on two points\\n    function _getPrice0(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(xs <= xe, \\\"xs > xe\\\");\\n        uint256 fpAmount = 0;\\n        if (xs < x1() + _exerciseAmount) {\\n            fpAmount = x1() + _exerciseAmount - xs;\\n        }\\n        if (xe < x1() + _exerciseAmount) {\\n            fpAmount = xe - xs;\\n        }\\n\\n        return\\n            Math.mulDiv(\\n                fpAmount,\\n                _floorPrice,\\n                PRICE_PRECISION,\\n                round ? Math.Rounding.Up : Math.Rounding.Zero\\n            );\\n    }\\n\\n    function getUseFPBuyPrice(\\n        uint256 amount\\n    ) public view returns (uint256 toLiquidityPrice, uint256 fees) {\\n        toLiquidityPrice = Math.mulDiv(\\n            _floorPrice,\\n            amount,\\n            PRICE_PRECISION,\\n            Math.Rounding.Up\\n        );\\n        fees = _config.vammBuyFees(toLiquidityPrice);\\n    }\\n\\n    function getBuyPrice(\\n        uint256 amount\\n    ) external view returns (uint256 toLiquidityPrice, uint256 fees) {\\n        uint256 xs = _config.getUtilityToken().totalSupply() + 1;\\n        uint256 xe = xs + amount;\\n        uint256 price1 = _getPrice1(xs, xe, true);\\n        uint256 price2 = _getPrice2(xs, xe, true);\\n        uint256 price0 = _getPrice0(xs, xe, true);\\n        toLiquidityPrice = price1 + price2 + price0;\\n        fees = _config.vammBuyFees(toLiquidityPrice);\\n    }\\n\\n    function getSellPrice(\\n        uint256 xe,\\n        uint256 amount\\n    ) external view returns (uint256 toUserPrice, uint256 fees) {\\n        uint256 xs = xe - amount;\\n        uint256 price1 = _getPrice1(xs, xe, false);\\n        uint256 price2 = _getPrice2(xs, xe, false);\\n        uint256 price0 = _getPrice0(xs, xe, false);\\n        uint256 totalPrice = price1 + price2 + price0;\\n        fees = _config.vammSellFees(totalPrice);\\n        toUserPrice = totalPrice - fees;\\n    }\\n\\n    function getSellPrice(\\n        uint256 amount\\n    ) external view returns (uint256 toUserPrice, uint256 fees) {\\n        uint256 xe = _config.getUtilityToken().totalSupply();\\n        if (xe == 0) {\\n            return (0, 0);\\n        }\\n        uint256 xs = xe - amount;\\n        uint256 price1 = _getPrice1(xs, xe, false);\\n        uint256 price2 = _getPrice2(xs, xe, false);\\n        uint256 price0 = _getPrice0(xs, xe, false);\\n        uint256 totalPrice = price1 + price2 + price0;\\n        fees = _config.vammSellFees(totalPrice);\\n        toUserPrice = totalPrice - fees;\\n    }\\n}\\n\",\"keccak256\":\"0x5775afb9758145ad4cbe3e9fd45b16b8bd6a363bfdedbe66ad5cdf9c93a3a4f4\",\"license\":\"GPL-3.0\"},\"contracts/UtilityStakeHook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface UtilityStakeHook {\\n    function onUtilityStake(\\n        address staker,\\n        uint256 amount\\n    ) external;\\n\\n    function onUtilityUnstake(\\n        address staker,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcc273271e5607bf26b53d198265d8af02f123db45f228373e3417244e776f654\",\"license\":\"GPL-3.0\"},\"contracts/config/IConfig.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../IUtilityToken.sol\\\";\\nimport \\\"../feerouter/IFeeRouter.sol\\\";\\n\\ninterface IConfig {\\n    struct StableCoinEnabled {\\n        bool buyEnabled;\\n        bool sellEnabled;\\n        bool exists;\\n        address gauge;\\n        bool isMetaGauge;\\n    }\\n\\n    function vammBuyFees(uint256 totalPrice) external view returns (uint256);\\n\\n    function vammSellFees(uint256 totalPrice) external view returns (uint256);\\n\\n    function getVAMMStableCoin(\\n        address stableCoin\\n    ) external view returns (StableCoinEnabled memory);\\n\\n    function getStableCoins() external view returns (address[] memory);\\n\\n    function getMaxOnceExchangeAmount() external view returns (uint256);\\n\\n    function getFeeRouter() external view returns (IFeeRouter);\\n\\n    function getUtilityToken() external view returns (IUtilityToken);\\n\\n    function getPRToken() external view returns (IUtilityToken);\\n\\n    function getGovToken() external view returns (IUtilityToken);\\n\\n    function getStableCoinToken() external view returns (IUtilityToken);\\n\\n    function getUtilityStakeAddress() external view returns (address);\\n\\n    function getLiquidityStakeAddress() external view returns (address);\\n\\n    function getVAMMAddress() external view returns (address);\\n\\n    function getMinterAddress() external view returns (address);\\n\\n    function getCurveStableCoin2CRVPoolAddress()\\n        external\\n        view\\n        returns (address);\\n\\n    function checkIsOperator(address _operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x850d941ca2c41850407a30ecc191f5d73efda270e18d4a73345ea7ce05185f37\",\"license\":\"UNLICENSED\"},\"contracts/feerouter/IFeeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IFeeRouter {\\n    function colletFees() external;\\n\\n    function getDAOVault() external view returns (address);\\n\\n    function getGewardVault() external view returns (address);\\n\\n    function getPercentForGeward() external view returns (uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x6b52bdeb8b97c72a36e6abab4897168393c9a3feb6125bade339fc9741e4cc34\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161269661004c600039600081816108210152818161086a01528181610d4401528181610d840152610e1701526126966000f3fe6080604052600436106102255760003560e01c806379502c5511610123578063aba62291116100ab578063ddc83fd11161006f578063ddc83fd114610661578063ebe2b12b14610681578063f1a8892214610697578063f2fde38b146106ac578063f50ddbc7146106cc57600080fd5b8063aba62291146105c8578063b87bf76e146105de578063c089bd741461060b578063c4d66de81461062b578063dbc4feb61461064b57600080fd5b806395082d25116100f257806395082d25146105185780639cc182a41461054c5780639dec3de014610565578063a8c66a5e1461057b578063ab422702146105a857600080fd5b806379502c55146104ae5780637b0a47ee146104ce5780638ceda37e146104e45780638da5cb5b146104fa57600080fd5b80634a3b68cc116101b157806356c807161161017557806356c80716146104055780636d8fda431461042557806370d1a2f21461043a578063715018a614610483578063756b54141461049857600080fd5b80634a3b68cc146103585780634e71d92d1461038e5780634f1ef286146103a357806350579efc146103b657806352d1902d146103f057600080fd5b806323628b57116101f857806323628b57146102ab5780633659cfe6146102e357806337586ef8146103035780633cb521ce146103235780634388afe61461034357600080fd5b80630c82acac1461022a5780630f4d53d81461025357806311748de3146102735780631619047414610295575b600080fd5b34801561023657600080fd5b5061024060d35481565b6040519081526020015b60405180910390f35b34801561025f57600080fd5b5061024061026e366004612192565b6106f9565b34801561027f57600080fd5b5061029361028e3660046121af565b610772565b005b3480156102a157600080fd5b5061024060ce5481565b3480156102b757600080fd5b506102cb6102c63660046121e4565b6107df565b6040516001600160a01b03909116815260200161024a565b3480156102ef57600080fd5b506102936102fe366004612192565b610817565b34801561030f57600080fd5b5061029361031e3660046121e4565b6108ff565b34801561032f57600080fd5b5061024061033e366004612192565b61096b565b34801561034f57600080fd5b50610293610a19565b34801561036457600080fd5b506102cb610373366004612192565b60ca602052600090815260409020546001600160a01b031681565b34801561039a57600080fd5b50610293610bd6565b6102936103b1366004612226565b610d3a565b3480156103c257600080fd5b5060d05460d15460d2546103d592919083565b6040805193845260208401929092529082015260600161024a565b3480156103fc57600080fd5b50610240610e0a565b34801561041157600080fd5b506102936104203660046121af565b610ebd565b34801561043157600080fd5b50610293610f1e565b34801561044657600080fd5b5061046e610455366004612192565b60cc602052600090815260409020805460019091015482565b6040805192835260208301919091520161024a565b34801561048f57600080fd5b5061029361105c565b3480156104a457600080fd5b5061024060d85481565b3480156104ba57600080fd5b5060cf546102cb906001600160a01b031681565b3480156104da57600080fd5b5061024060d95481565b3480156104f057600080fd5b5061024060d45481565b34801561050657600080fd5b506033546001600160a01b03166102cb565b34801561052457600080fd5b50610534670de0b6b3a764000081565b6040516001600160801b03909116815260200161024a565b34801561055857600080fd5b506105346402540be40081565b34801561057157600080fd5b5061024060d75481565b34801561058757600080fd5b50610240610596366004612192565b60cd6020526000908152604090205481565b3480156105b457600080fd5b506102936105c3366004612192565b611070565b3480156105d457600080fd5b5061024060d55481565b3480156105ea57600080fd5b506105fe6105f9366004612192565b6112ad565b60405161024a91906122ea565b34801561061757600080fd5b50610293610626366004612337565b611323565b34801561063757600080fd5b50610293610646366004612192565b6114b1565b34801561065757600080fd5b5061024060d65481565b34801561066d57600080fd5b5061029361067c3660046121e4565b611648565b34801561068d57600080fd5b5061024060da5481565b3480156106a357600080fd5b506102936116a9565b3480156106b857600080fd5b506102936106c7366004612192565b611940565b3480156106d857600080fd5b506102406106e7366004612192565b60c96020526000908152604090205481565b60006107048261096b565b506001600160a01b038216600090815260c960205260409020548015610769576001600160a01b038316600090815260cd60205260408120546107479042612366565b90506107616107568284612379565b60d95460d6546119b6565b949350505050565b50600092915050565b61077b83611a6b565b600061078d8260d554620151806119b6565b6001600160a01b038516600090815260cc60205260408120805492935091839183916107ba908490612366565b925050819055508160d760008282546107d39190612366565b90915550505050505050565b60cb60205281600052604060002081815481106107fb57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108685760405162461bcd60e51b815260040161085f90612390565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108b160008051602061261a833981519152546001600160a01b031690565b6001600160a01b0316146108d75760405162461bcd60e51b815260040161085f906123dc565b6108e081611bbe565b604080516000808252602082019092526108fc91839190611bc6565b50565b61090882611a6b565b600061091a8260d454620151806119b6565b6001600160a01b038416600090815260cc6020526040812080549293509183918391610947908490612366565b925050819055508160d760008282546109609190612366565b909155505050505050565b600061097682611a6b565b60005b6001600160a01b038316600090815260cb60205260409020548110156109fc576001600160a01b038316600090815260cb602052604081208054839081106109c3576109c3612428565b6000918252602090912001546001600160a01b0316905080156109e9576109e981611a6b565b50806109f48161243e565b915050610979565b50506001600160a01b0316600090815260c9602052604090205490565b60cf60009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a909190612457565b6001600160a01b0316630910a5106040518163ffffffff1660e01b8152600401608060405180830381865afa158015610acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af19190612474565b5060dc55505060cf54604080516262667960e01b815290516001600160a01b039092169162626679916004808201926020929091908290030181865afa158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b639190612457565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc491906124aa565b60dd5560de805460ff19166001179055565b33610be081611a6b565b6000610beb826106f9565b90508015610ce15760cf60009054906101000a90046001600160a01b03166001600160a01b031663316cb88a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6a9190612457565b60405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af1158015610cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdf91906124c3565b505b6001600160a01b038216600081815260cd602052604090819020429055517f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d490610d2e9084815260200190565b60405180910390a25050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d825760405162461bcd60e51b815260040161085f90612390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610dcb60008051602061261a833981519152546001600160a01b031690565b6001600160a01b031614610df15760405162461bcd60e51b815260040161085f906123dc565b610dfa82611bbe565b610e0682826001611bc6565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610eaa5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161085f565b5060008051602061261a83398151915290565b610ec683611a6b565b6000610ed88260d554620151806119b6565b6001600160a01b038516600090815260cc6020526040812080549293509183918391610f059084906124e5565b925050819055508160d760008282546107d391906124e5565b60cf60009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f959190612457565b6001600160a01b031663daeea5ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff69190612457565b6001600160a01b031663d8950f426040518163ffffffff1660e01b8152600401602060405180830381865afa158015611033573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105791906124aa565b60db55565b611064611d36565b61106e6000611d90565b565b336001600160a01b0382168103611085575050565b60cf54604080516326dac0af60e21b815290516000926001600160a01b031691639b6b02bc9160048083019260209291908290030181865afa1580156110cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f39190612457565b6001600160a01b031663daeea5ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111549190612457565b6001600160a01b031663d8950f426040518163ffffffff1660e01b8152600401602060405180830381865afa158015611191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b591906124aa565b9050600060db541180156111ca57508060db54115b156111d457505050565b600060db8190556001600160a01b03808516825260cb60209081526040808420868416855260ca9092529092205416158015611212575060ce548154105b156112a75780546001810182556000828152602080822090920180546001600160a01b03199081166001600160a01b03888116918217909355835260ca9093526040909120805490921690861617905560d05481546002036112825760d15461127b90826124e5565b905061129b565b815460050361129b5760d25461129890826124e5565b90505b6112a58582611de2565b505b50505050565b6001600160a01b038116600090815260cb602090815260409182902080548351818402810184019094528084526060939283018282801561131757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112f9575b50505050509050919050565b60cf54604080516318b65c4560e11b815290516000926001600160a01b03169163316cb88a9160048083019260209291908290030181865afa15801561136d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113919190612457565b6040516323b872dd60e01b8152336004820152306024820152604481018490529091506001600160a01b038216906323b872dd906064016020604051808303816000875af11580156113e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140b91906124c3565b5060da54421061143a5761142262278d008361250e565b60d9556114324262278d006124e5565b60da55611479565b60004260da5461144a9190612366565b9050600060d9548261145c9190612379565b90508161146982866124e5565b611473919061250e565b60d95550505b6040518281527fe619301f0901e4a00d3162e32da1fe10865c5af10c99c45e134f72939166ab8f906020015b60405180910390a15050565b600054610100900460ff16158080156114d15750600054600160ff909116105b806114eb5750303b1580156114eb575060005460ff166001145b61154e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161085f565b6000805460ff191660011790558015611571576000805461ff0019166101001790555b611579611eb2565b611581611ee1565b61158a32611d90565b60cf80546001600160a01b0319166001600160a01b038416179055600560ce5560408051606081018252600a80825260326020830181905260c89290930182905260d05560d19190915560d255637735940060d35564037e11d60060d4556404a817c80060d555600060d9556116034262278d006124e5565b60da558015610e06576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016114a5565b61165182611a6b565b60006116638260d454620151806119b6565b6001600160a01b038416600090815260cc60205260408120805492935091839183916116909084906124e5565b925050819055508160d7600082825461096091906124e5565b60de5460ff166116e45760405162461bcd60e51b815260040161085f906020808252600490820152630736330360e41b604082015260600190565b600033905060008060cf60009054906101000a90046001600160a01b03166001600160a01b0316626266796040518163ffffffff1660e01b8152600401602060405180830381865afa15801561173e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117629190612457565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c391906124aa565b905060dd5481116117ff5760405162461bcd60e51b815260040161085f906020808252600490820152637363303160e01b604082015260600190565b60cf60009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118769190612457565b6001600160a01b0316630910a5106040518163ffffffff1660e01b8152600401608060405180830381865afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d79190612474565b5060dc54909450841191505080156118f15750600060dc54115b1561192757600061191960dc54846119099190612366565b6001670de0b6b3a76400006119b6565b90506119258482611de2565b505b5050600060dc81905560dd555060de805460ff19169055565b611948611d36565b6001600160a01b0381166119ad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161085f565b6108fc81611d90565b60008080600019858709858702925082811083820303915050806000036119f0578382816119e6576119e66124f8565b0492505050611a64565b8084116119fc57600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6001600160a01b038116600090815260cc60205260409020805415801590611a97575060008160010154115b8015611aa65750428160010154105b15611afe576000816001015442611abd9190612366565b8254909150600090611aef9083611ae16402540be400670de0b6b3a7640000612530565b6001600160801b03166119b6565b9050611afb8482611de2565b50505b600060d854118015611b1157504260d854105b8015611b1f5750600060d754115b15611b7457600060d85442611b349190612366565b90506000611b5860d754836402540be400670de0b6b3a7640000611ae19190612530565b90508060d66000828254611b6c91906124e5565b909155505050505b6001600160a01b038216600090815260cd60205260408120549003611baf576001600160a01b038216600090815260cd602052604090204290555b42600190910181905560d85550565b6108fc611d36565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611bfe57611bf983611f08565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611c58575060408051601f3d908101601f19168201909252611c55918101906124aa565b60015b611cbb5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161085f565b60008051602061261a8339815191528114611d2a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161085f565b50611bf9838383611fa4565b6033546001600160a01b0316331461106e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161085f565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03828116600090815260ca602052604081205490911615611e6357611e1f8260d3546402540be4006001600160801b03166119b6565b6001600160a01b03808516600090815260ca6020908152604080832054909316825260c9905290812080549293508392909190611e5d9084906124e5565b90915550505b6001600160a01b038316600090815260c9602052604081208054849290611e8b9084906124e5565b909155505060d6548190611ea09084906124e5565b611eaa91906124e5565b60d655505050565b600054610100900460ff16611ed95760405162461bcd60e51b815260040161085f9061255b565b61106e611fc9565b600054610100900460ff1661106e5760405162461bcd60e51b815260040161085f9061255b565b6001600160a01b0381163b611f755760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161085f565b60008051602061261a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611fad83611ff9565b600082511180611fba5750805b15611bf9576112a78383612039565b600054610100900460ff16611ff05760405162461bcd60e51b815260040161085f9061255b565b61106e33611d90565b61200281611f08565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061205e838360405180606001604052806027815260200161263a60279139612067565b90505b92915050565b6060600080856001600160a01b03168560405161208491906125ca565b600060405180830381855af49150503d80600081146120bf576040519150601f19603f3d011682016040523d82523d6000602084013e6120c4565b606091505b50915091506120d5868383876120df565b9695505050505050565b6060831561214e578251600003612147576001600160a01b0385163b6121475760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161085f565b5081610761565b61076183838151156121635781518083602001fd5b8060405162461bcd60e51b815260040161085f91906125e6565b6001600160a01b03811681146108fc57600080fd5b6000602082840312156121a457600080fd5b8135611a648161217d565b6000806000606084860312156121c457600080fd5b83356121cf8161217d565b95602085013595506040909401359392505050565b600080604083850312156121f757600080fd5b82356122028161217d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561223957600080fd5b82356122448161217d565b9150602083013567ffffffffffffffff8082111561226157600080fd5b818501915085601f83011261227557600080fd5b81358181111561228757612287612210565b604051601f8201601f19908116603f011681019083821181831017156122af576122af612210565b816040528281528860208487010111156122c857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561232b5783516001600160a01b031683529284019291840191600101612306565b50909695505050505050565b60006020828403121561234957600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561206157612061612350565b808202811582820484141761206157612061612350565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161245057612450612350565b5060010190565b60006020828403121561246957600080fd5b8151611a648161217d565b6000806000806080858703121561248a57600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000602082840312156124bc57600080fd5b5051919050565b6000602082840312156124d557600080fd5b81518015158114611a6457600080fd5b8082018082111561206157612061612350565b634e487b7160e01b600052601260045260246000fd5b60008261252b57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160801b0381811683821602808216919082811461255357612553612350565b505092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156125c15781810151838201526020016125a9565b50506000910152565b600082516125dc8184602087016125a6565b9190910192915050565b60208152600082518060208401526126058160408501602087016125a6565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207bb75c43558b0845e35a778558bc111e84f1c7988fb4f68ffb5ea1c670727bee64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106102255760003560e01c806379502c5511610123578063aba62291116100ab578063ddc83fd11161006f578063ddc83fd114610661578063ebe2b12b14610681578063f1a8892214610697578063f2fde38b146106ac578063f50ddbc7146106cc57600080fd5b8063aba62291146105c8578063b87bf76e146105de578063c089bd741461060b578063c4d66de81461062b578063dbc4feb61461064b57600080fd5b806395082d25116100f257806395082d25146105185780639cc182a41461054c5780639dec3de014610565578063a8c66a5e1461057b578063ab422702146105a857600080fd5b806379502c55146104ae5780637b0a47ee146104ce5780638ceda37e146104e45780638da5cb5b146104fa57600080fd5b80634a3b68cc116101b157806356c807161161017557806356c80716146104055780636d8fda431461042557806370d1a2f21461043a578063715018a614610483578063756b54141461049857600080fd5b80634a3b68cc146103585780634e71d92d1461038e5780634f1ef286146103a357806350579efc146103b657806352d1902d146103f057600080fd5b806323628b57116101f857806323628b57146102ab5780633659cfe6146102e357806337586ef8146103035780633cb521ce146103235780634388afe61461034357600080fd5b80630c82acac1461022a5780630f4d53d81461025357806311748de3146102735780631619047414610295575b600080fd5b34801561023657600080fd5b5061024060d35481565b6040519081526020015b60405180910390f35b34801561025f57600080fd5b5061024061026e366004612192565b6106f9565b34801561027f57600080fd5b5061029361028e3660046121af565b610772565b005b3480156102a157600080fd5b5061024060ce5481565b3480156102b757600080fd5b506102cb6102c63660046121e4565b6107df565b6040516001600160a01b03909116815260200161024a565b3480156102ef57600080fd5b506102936102fe366004612192565b610817565b34801561030f57600080fd5b5061029361031e3660046121e4565b6108ff565b34801561032f57600080fd5b5061024061033e366004612192565b61096b565b34801561034f57600080fd5b50610293610a19565b34801561036457600080fd5b506102cb610373366004612192565b60ca602052600090815260409020546001600160a01b031681565b34801561039a57600080fd5b50610293610bd6565b6102936103b1366004612226565b610d3a565b3480156103c257600080fd5b5060d05460d15460d2546103d592919083565b6040805193845260208401929092529082015260600161024a565b3480156103fc57600080fd5b50610240610e0a565b34801561041157600080fd5b506102936104203660046121af565b610ebd565b34801561043157600080fd5b50610293610f1e565b34801561044657600080fd5b5061046e610455366004612192565b60cc602052600090815260409020805460019091015482565b6040805192835260208301919091520161024a565b34801561048f57600080fd5b5061029361105c565b3480156104a457600080fd5b5061024060d85481565b3480156104ba57600080fd5b5060cf546102cb906001600160a01b031681565b3480156104da57600080fd5b5061024060d95481565b3480156104f057600080fd5b5061024060d45481565b34801561050657600080fd5b506033546001600160a01b03166102cb565b34801561052457600080fd5b50610534670de0b6b3a764000081565b6040516001600160801b03909116815260200161024a565b34801561055857600080fd5b506105346402540be40081565b34801561057157600080fd5b5061024060d75481565b34801561058757600080fd5b50610240610596366004612192565b60cd6020526000908152604090205481565b3480156105b457600080fd5b506102936105c3366004612192565b611070565b3480156105d457600080fd5b5061024060d55481565b3480156105ea57600080fd5b506105fe6105f9366004612192565b6112ad565b60405161024a91906122ea565b34801561061757600080fd5b50610293610626366004612337565b611323565b34801561063757600080fd5b50610293610646366004612192565b6114b1565b34801561065757600080fd5b5061024060d65481565b34801561066d57600080fd5b5061029361067c3660046121e4565b611648565b34801561068d57600080fd5b5061024060da5481565b3480156106a357600080fd5b506102936116a9565b3480156106b857600080fd5b506102936106c7366004612192565b611940565b3480156106d857600080fd5b506102406106e7366004612192565b60c96020526000908152604090205481565b60006107048261096b565b506001600160a01b038216600090815260c960205260409020548015610769576001600160a01b038316600090815260cd60205260408120546107479042612366565b90506107616107568284612379565b60d95460d6546119b6565b949350505050565b50600092915050565b61077b83611a6b565b600061078d8260d554620151806119b6565b6001600160a01b038516600090815260cc60205260408120805492935091839183916107ba908490612366565b925050819055508160d760008282546107d39190612366565b90915550505050505050565b60cb60205281600052604060002081815481106107fb57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108685760405162461bcd60e51b815260040161085f90612390565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108b160008051602061261a833981519152546001600160a01b031690565b6001600160a01b0316146108d75760405162461bcd60e51b815260040161085f906123dc565b6108e081611bbe565b604080516000808252602082019092526108fc91839190611bc6565b50565b61090882611a6b565b600061091a8260d454620151806119b6565b6001600160a01b038416600090815260cc6020526040812080549293509183918391610947908490612366565b925050819055508160d760008282546109609190612366565b909155505050505050565b600061097682611a6b565b60005b6001600160a01b038316600090815260cb60205260409020548110156109fc576001600160a01b038316600090815260cb602052604081208054839081106109c3576109c3612428565b6000918252602090912001546001600160a01b0316905080156109e9576109e981611a6b565b50806109f48161243e565b915050610979565b50506001600160a01b0316600090815260c9602052604090205490565b60cf60009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a909190612457565b6001600160a01b0316630910a5106040518163ffffffff1660e01b8152600401608060405180830381865afa158015610acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af19190612474565b5060dc55505060cf54604080516262667960e01b815290516001600160a01b039092169162626679916004808201926020929091908290030181865afa158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b639190612457565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc491906124aa565b60dd5560de805460ff19166001179055565b33610be081611a6b565b6000610beb826106f9565b90508015610ce15760cf60009054906101000a90046001600160a01b03166001600160a01b031663316cb88a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6a9190612457565b60405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af1158015610cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdf91906124c3565b505b6001600160a01b038216600081815260cd602052604090819020429055517f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d490610d2e9084815260200190565b60405180910390a25050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d825760405162461bcd60e51b815260040161085f90612390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610dcb60008051602061261a833981519152546001600160a01b031690565b6001600160a01b031614610df15760405162461bcd60e51b815260040161085f906123dc565b610dfa82611bbe565b610e0682826001611bc6565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610eaa5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161085f565b5060008051602061261a83398151915290565b610ec683611a6b565b6000610ed88260d554620151806119b6565b6001600160a01b038516600090815260cc6020526040812080549293509183918391610f059084906124e5565b925050819055508160d760008282546107d391906124e5565b60cf60009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f959190612457565b6001600160a01b031663daeea5ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff69190612457565b6001600160a01b031663d8950f426040518163ffffffff1660e01b8152600401602060405180830381865afa158015611033573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105791906124aa565b60db55565b611064611d36565b61106e6000611d90565b565b336001600160a01b0382168103611085575050565b60cf54604080516326dac0af60e21b815290516000926001600160a01b031691639b6b02bc9160048083019260209291908290030181865afa1580156110cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f39190612457565b6001600160a01b031663daeea5ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111549190612457565b6001600160a01b031663d8950f426040518163ffffffff1660e01b8152600401602060405180830381865afa158015611191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b591906124aa565b9050600060db541180156111ca57508060db54115b156111d457505050565b600060db8190556001600160a01b03808516825260cb60209081526040808420868416855260ca9092529092205416158015611212575060ce548154105b156112a75780546001810182556000828152602080822090920180546001600160a01b03199081166001600160a01b03888116918217909355835260ca9093526040909120805490921690861617905560d05481546002036112825760d15461127b90826124e5565b905061129b565b815460050361129b5760d25461129890826124e5565b90505b6112a58582611de2565b505b50505050565b6001600160a01b038116600090815260cb602090815260409182902080548351818402810184019094528084526060939283018282801561131757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116112f9575b50505050509050919050565b60cf54604080516318b65c4560e11b815290516000926001600160a01b03169163316cb88a9160048083019260209291908290030181865afa15801561136d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113919190612457565b6040516323b872dd60e01b8152336004820152306024820152604481018490529091506001600160a01b038216906323b872dd906064016020604051808303816000875af11580156113e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140b91906124c3565b5060da54421061143a5761142262278d008361250e565b60d9556114324262278d006124e5565b60da55611479565b60004260da5461144a9190612366565b9050600060d9548261145c9190612379565b90508161146982866124e5565b611473919061250e565b60d95550505b6040518281527fe619301f0901e4a00d3162e32da1fe10865c5af10c99c45e134f72939166ab8f906020015b60405180910390a15050565b600054610100900460ff16158080156114d15750600054600160ff909116105b806114eb5750303b1580156114eb575060005460ff166001145b61154e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161085f565b6000805460ff191660011790558015611571576000805461ff0019166101001790555b611579611eb2565b611581611ee1565b61158a32611d90565b60cf80546001600160a01b0319166001600160a01b038416179055600560ce5560408051606081018252600a80825260326020830181905260c89290930182905260d05560d19190915560d255637735940060d35564037e11d60060d4556404a817c80060d555600060d9556116034262278d006124e5565b60da558015610e06576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016114a5565b61165182611a6b565b60006116638260d454620151806119b6565b6001600160a01b038416600090815260cc60205260408120805492935091839183916116909084906124e5565b925050819055508160d7600082825461096091906124e5565b60de5460ff166116e45760405162461bcd60e51b815260040161085f906020808252600490820152630736330360e41b604082015260600190565b600033905060008060cf60009054906101000a90046001600160a01b03166001600160a01b0316626266796040518163ffffffff1660e01b8152600401602060405180830381865afa15801561173e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117629190612457565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c391906124aa565b905060dd5481116117ff5760405162461bcd60e51b815260040161085f906020808252600490820152637363303160e01b604082015260600190565b60cf60009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118769190612457565b6001600160a01b0316630910a5106040518163ffffffff1660e01b8152600401608060405180830381865afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d79190612474565b5060dc54909450841191505080156118f15750600060dc54115b1561192757600061191960dc54846119099190612366565b6001670de0b6b3a76400006119b6565b90506119258482611de2565b505b5050600060dc81905560dd555060de805460ff19169055565b611948611d36565b6001600160a01b0381166119ad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161085f565b6108fc81611d90565b60008080600019858709858702925082811083820303915050806000036119f0578382816119e6576119e66124f8565b0492505050611a64565b8084116119fc57600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6001600160a01b038116600090815260cc60205260409020805415801590611a97575060008160010154115b8015611aa65750428160010154105b15611afe576000816001015442611abd9190612366565b8254909150600090611aef9083611ae16402540be400670de0b6b3a7640000612530565b6001600160801b03166119b6565b9050611afb8482611de2565b50505b600060d854118015611b1157504260d854105b8015611b1f5750600060d754115b15611b7457600060d85442611b349190612366565b90506000611b5860d754836402540be400670de0b6b3a7640000611ae19190612530565b90508060d66000828254611b6c91906124e5565b909155505050505b6001600160a01b038216600090815260cd60205260408120549003611baf576001600160a01b038216600090815260cd602052604090204290555b42600190910181905560d85550565b6108fc611d36565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611bfe57611bf983611f08565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611c58575060408051601f3d908101601f19168201909252611c55918101906124aa565b60015b611cbb5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161085f565b60008051602061261a8339815191528114611d2a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161085f565b50611bf9838383611fa4565b6033546001600160a01b0316331461106e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161085f565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03828116600090815260ca602052604081205490911615611e6357611e1f8260d3546402540be4006001600160801b03166119b6565b6001600160a01b03808516600090815260ca6020908152604080832054909316825260c9905290812080549293508392909190611e5d9084906124e5565b90915550505b6001600160a01b038316600090815260c9602052604081208054849290611e8b9084906124e5565b909155505060d6548190611ea09084906124e5565b611eaa91906124e5565b60d655505050565b600054610100900460ff16611ed95760405162461bcd60e51b815260040161085f9061255b565b61106e611fc9565b600054610100900460ff1661106e5760405162461bcd60e51b815260040161085f9061255b565b6001600160a01b0381163b611f755760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161085f565b60008051602061261a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611fad83611ff9565b600082511180611fba5750805b15611bf9576112a78383612039565b600054610100900460ff16611ff05760405162461bcd60e51b815260040161085f9061255b565b61106e33611d90565b61200281611f08565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061205e838360405180606001604052806027815260200161263a60279139612067565b90505b92915050565b6060600080856001600160a01b03168560405161208491906125ca565b600060405180830381855af49150503d80600081146120bf576040519150601f19603f3d011682016040523d82523d6000602084013e6120c4565b606091505b50915091506120d5868383876120df565b9695505050505050565b6060831561214e578251600003612147576001600160a01b0385163b6121475760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161085f565b5081610761565b61076183838151156121635781518083602001fd5b8060405162461bcd60e51b815260040161085f91906125e6565b6001600160a01b03811681146108fc57600080fd5b6000602082840312156121a457600080fd5b8135611a648161217d565b6000806000606084860312156121c457600080fd5b83356121cf8161217d565b95602085013595506040909401359392505050565b600080604083850312156121f757600080fd5b82356122028161217d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561223957600080fd5b82356122448161217d565b9150602083013567ffffffffffffffff8082111561226157600080fd5b818501915085601f83011261227557600080fd5b81358181111561228757612287612210565b604051601f8201601f19908116603f011681019083821181831017156122af576122af612210565b816040528281528860208487010111156122c857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561232b5783516001600160a01b031683529284019291840191600101612306565b50909695505050505050565b60006020828403121561234957600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561206157612061612350565b808202811582820484141761206157612061612350565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161245057612450612350565b5060010190565b60006020828403121561246957600080fd5b8151611a648161217d565b6000806000806080858703121561248a57600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000602082840312156124bc57600080fd5b5051919050565b6000602082840312156124d557600080fd5b81518015158114611a6457600080fd5b8082018082111561206157612061612350565b634e487b7160e01b600052601260045260246000fd5b60008261252b57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160801b0381811683821602808216919082811461255357612553612350565b505092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156125c15781810151838201526020016125a9565b50506000910152565b600082516125dc8184602087016125a6565b9190910192915050565b60208152600082518060208401526126058160408501602087016125a6565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207bb75c43558b0845e35a778558bc111e84f1c7988fb4f68ffb5ea1c670727bee64736f6c63430008120033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "maxInvites()": {
        "notice": "params"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 590,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 593,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1812,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 572,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 887,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13402,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "userPoints",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13406,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "referrers",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13411,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "invites",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 13421,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "stakePointCheckpoints",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_struct(StakePointCheckpoint)13416_storage)"
      },
      {
        "astId": 13425,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "latestClaimedAts",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13428,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "maxInvites",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 13431,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "config",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IConfig)20550"
      },
      {
        "astId": 13441,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "invitePoint",
        "offset": 0,
        "slot": "208",
        "type": "t_struct(InvitePoint)13438_storage"
      },
      {
        "astId": 13443,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "inviteEarnPointPercent",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 13445,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "stakeInflation",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 13447,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "liquidityStakeInflation",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 13449,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "totalPoint",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 13451,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "totalPointRate",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 13453,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "latestCheckPoint",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 13455,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "rewardRate",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 13457,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "periodFinish",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 13595,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "_lastExerciseAmount",
        "offset": 0,
        "slot": "219",
        "type": "t_uint256"
      },
      {
        "astId": 13725,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "_marketSupport",
        "offset": 0,
        "slot": "220",
        "type": "t_uint256"
      },
      {
        "astId": 13727,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "_utilityTokenSupply",
        "offset": 0,
        "slot": "221",
        "type": "t_uint256"
      },
      {
        "astId": 13729,
        "contract": "contracts/Airdrop.sol:Airdrop",
        "label": "_startSwap",
        "offset": 0,
        "slot": "222",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IConfig)20550": {
        "encoding": "inplace",
        "label": "contract IConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_struct(StakePointCheckpoint)13416_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Airdrop.StakePointCheckpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(StakePointCheckpoint)13416_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(InvitePoint)13438_storage": {
        "encoding": "inplace",
        "label": "struct Airdrop.InvitePoint",
        "members": [
          {
            "astId": 13433,
            "contract": "contracts/Airdrop.sol:Airdrop",
            "label": "basicPoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13435,
            "contract": "contracts/Airdrop.sol:Airdrop",
            "label": "invite2Point",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13437,
            "contract": "contracts/Airdrop.sol:Airdrop",
            "label": "invite5Point",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(StakePointCheckpoint)13416_storage": {
        "encoding": "inplace",
        "label": "struct Airdrop.StakePointCheckpoint",
        "members": [
          {
            "astId": 13413,
            "contract": "contracts/Airdrop.sol:Airdrop",
            "label": "pointRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13415,
            "contract": "contracts/Airdrop.sol:Airdrop",
            "label": "latestCheckPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}