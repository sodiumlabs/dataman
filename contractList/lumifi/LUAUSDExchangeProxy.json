{
  "address": "0x4Fcb394224FCa75E1B085FD59cc829526bB75ca9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConfig",
          "name": "config_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxPayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min2CRVAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintVammAmount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min2CRVAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayAmount",
          "type": "uint256"
        }
      ],
      "name": "buyWithPRToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "payAmount",
          "type": "uint256"
        }
      ],
      "name": "calcDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "calcWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_virtual_price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReceive2CRVAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReceiveLUAUSDAmount",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeace0f7d3bf9fd60cd59330a6442448c1d8be23fb55447ed22a5b1eba21c40ca",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1310096",
    "logsBloom": "0x
    "blockHash": "0x1f176077845c4130bd1f889fe5c3e87448832ac80fc5a0864c074afac07b59fb",
    "transactionHash": "0xeace0f7d3bf9fd60cd59330a6442448c1d8be23fb55447ed22a5b1eba21c40ca",
    "logs": [],
    "blockNumber": 115650285,
    "cumulativeGasUsed": "1310096",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1218554369a87Ce4B29F6De3C050C2D13BE9E71D"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e3433254464ad8d77185c6cb44a57d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"config_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min2CRVAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintVammAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min2CRVAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithPRToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"}],\"name\":\"calcDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"calcWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_virtual_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceive2CRVAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceiveLUAUSDAmount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/curve/LUAUSDExchangeProxy.sol\":\"LUAUSDExchangeProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/IUtilityToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IUtilityToken is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x30d63bfb77e99692f375570437cd5d3111ef40ce03542a3b0a4fa4019f9a1b43\",\"license\":\"GPL-3.0\"},\"contracts/IVAMM.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IUtilityToken.sol\\\";\\nimport \\\"./PriceField.sol\\\";\\n\\ninterface IVAMM {\\n    event Mint(\\n        address indexed buyer,\\n        uint256 tokenAmount,\\n        uint256 payAmount,\\n        uint256 fees\\n    );\\n    event Burn(\\n        address indexed seller,\\n        uint256 tokenAmount,\\n        uint256 payAmount,\\n        uint256 fees\\n    );\\n    event UpdateMarketPrice(uint256 newMarketPrice);\\n    event UpdateMFR(uint256 t, uint256 x);\\n\\n    function borrow(uint256 _borrowAmount) external;\\n\\n    function repay(uint256 _repayAmount) external;\\n\\n    function canBorrowAmount() external view returns (uint256);\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function getPriceField() external view returns (PriceField);\\n\\n    function mintByPRToken(\\n        address payTokenAddress,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount\\n    ) external;\\n\\n    function getLiquidity()\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 floorPriceSupport,\\n            uint256 marketSupport,\\n            uint256 mfr\\n        );\\n\\n    function mintByPRToken(\\n        address payTokenAddress,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount,\\n        address recipient\\n    ) external;\\n\\n    function mint(\\n        address payToken,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount\\n    ) external;\\n\\n    function mint(\\n        address payToken,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount,\\n        address recipient\\n    ) external;\\n\\n    function burn(\\n        uint256 brunAmount,\\n        address receivedToken,\\n        uint256 minReceivedAmount\\n    ) external;\\n\\n    function burn(\\n        uint256 brunAmount,\\n        address receivedToken,\\n        uint256 minReceivedAmount,\\n        address recipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0x76931896e5b07bca285864ed379feeb8ce961f33694da07b8e700f05d7ae989b\",\"license\":\"GPL-3.0\"},\"contracts/PriceField.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./config/IConfig.sol\\\";\\n\\ncontract PriceField {\\n    uint128 public constant PRICE_PRECISION = 1e18;\\n\\n    uint128 public constant PRECENT_DENOMINATOR = 10000000000;\\n\\n    IConfig private _config;\\n\\n    // main slope\\n    // 10 decimals\\n    uint256 private _slope;\\n\\n    //\\n    uint256 private _exerciseAmount;\\n\\n    // current floor price\\n    uint256 private _floorPrice;\\n\\n    event UpdateFloorPrice(uint256 newFloorPrice);\\n\\n    constructor(IConfig config_, uint256 slope_, uint256 floorPrice_) {\\n        _config = config_;\\n        _slope = slope_;\\n        _exerciseAmount = 0;\\n\\n        _setFloorPrice(floorPrice_);\\n    }\\n\\n    modifier onlyVamm() {\\n        require(\\n            msg.sender == address(_config.getVAMMAddress()),\\n            \\\"PriceField: caller is not the vamm\\\"\\n        );\\n        _;\\n    }\\n\\n    function _setFloorPrice(uint256 floorPrice_) internal {\\n        require(floorPrice_ >= PRICE_PRECISION / 2, \\\"floor price too low\\\");\\n        uint256 x3 = _config.getUtilityToken().totalSupply();\\n        if (x3 > c()) {\\n            uint256 maxFloorPrice = (Math.mulDiv(\\n                x3 - c(),\\n                _slope,\\n                PRECENT_DENOMINATOR,\\n                Math.Rounding.Zero\\n            ) + PRICE_PRECISION) / 2;\\n            _floorPrice = Math.min(floorPrice_, maxFloorPrice);\\n        }\\n        _floorPrice = floorPrice_;\\n        emit UpdateFloorPrice(floorPrice_);\\n    }\\n\\n    function setFloorPrice(uint256 floorPrice_) external onlyVamm {\\n        _setFloorPrice(floorPrice_);\\n    }\\n\\n    function increaseSupplyWithNoPriceImpact(uint256 amount) external onlyVamm {\\n        _exerciseAmount += amount;\\n    }\\n\\n    function exerciseAmount() external view returns (uint256) {\\n        return _exerciseAmount;\\n    }\\n\\n    function slope() external view returns (uint256) {\\n        return _slope;\\n    }\\n\\n    function slope0() external view returns (uint256) {\\n        uint256 a = _floorPrice;\\n        uint256 b = _finalPrice1(x2() + _exerciseAmount, false);\\n        uint256 h = x2() - x1();\\n        return Math.mulDiv(b - a, PRECENT_DENOMINATOR, h);\\n    }\\n\\n    function floorPrice() external view returns (uint256) {\\n        return _floorPrice;\\n    }\\n\\n    function x1() public view returns (uint256) {\\n        // (2fp - 1)/m\\n        return\\n            Math.mulDiv(\\n                (_floorPrice * 2 - PRICE_PRECISION),\\n                PRECENT_DENOMINATOR,\\n                _slope,\\n                Math.Rounding.Zero\\n            );\\n    }\\n\\n    function x2() public view returns (uint256) {\\n        // x2 = x1+2/m\\n        return x1() + c();\\n    }\\n\\n    function c() public view returns (uint256) {\\n        // 2/m\\n        return\\n            Math.mulDiv(\\n                2 * PRICE_PRECISION,\\n                PRECENT_DENOMINATOR,\\n                _slope,\\n                Math.Rounding.Zero\\n            );\\n    }\\n\\n    function c1() public view returns (uint256) {\\n        // x1 + 1/m\\n        return\\n            x1() +\\n            Math.mulDiv(\\n                PRICE_PRECISION,\\n                PRECENT_DENOMINATOR,\\n                _slope,\\n                Math.Rounding.Zero\\n            );\\n    }\\n\\n    function b2() public view returns (uint256) {\\n        // m*x2\\n        return Math.mulDiv(x2(), _slope, PRECENT_DENOMINATOR, Math.Rounding.Up);\\n    }\\n\\n    function k() public view returns (uint256) {\\n        // b2-fp\\n        return b2() - _floorPrice;\\n    }\\n\\n    function finalPrice1(\\n        uint256 x,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _finalPrice1(x, round);\\n    }\\n\\n    function finalPrice2(\\n        uint256 x,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _finalPrice2(x, round);\\n    }\\n\\n    function _finalPrice1(\\n        uint256 x,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(x >= x1() + _exerciseAmount, \\\"x too low\\\");\\n        require(x <= x2() + _exerciseAmount, \\\"x too high\\\");\\n        if (x < c1() + _exerciseAmount) {\\n            return\\n                Math.mulDiv(\\n                    PRICE_PRECISION -\\n                        Math.mulDiv(\\n                            c1() + _exerciseAmount - x,\\n                            _slope,\\n                            PRECENT_DENOMINATOR,\\n                            round ? Math.Rounding.Up : Math.Rounding.Zero\\n                        ),\\n                    k(),\\n                    2 * PRICE_PRECISION\\n                ) + _floorPrice;\\n        }\\n        // ((x-c1-s) * m + 1) * k / 2 + fp\\n        return\\n            Math.mulDiv(\\n                Math.mulDiv(\\n                    x - c1() - _exerciseAmount,\\n                    _slope,\\n                    PRECENT_DENOMINATOR,\\n                    round ? Math.Rounding.Up : Math.Rounding.Zero\\n                ) + PRICE_PRECISION,\\n                k(),\\n                2 * PRICE_PRECISION\\n            ) + _floorPrice;\\n    }\\n\\n    function _finalPrice2(\\n        uint256 x,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(x >= x2() + _exerciseAmount, \\\"x too low\\\");\\n        // (x-s) * m\\n        return\\n            Math.mulDiv(\\n                x - _exerciseAmount,\\n                _slope,\\n                PRECENT_DENOMINATOR,\\n                round ? Math.Rounding.Up : Math.Rounding.Zero\\n            );\\n    }\\n\\n    function getPrice1(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _getPrice1(xs, xe, round);\\n    }\\n\\n    function getPrice2(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _getPrice2(xs, xe, round);\\n    }\\n\\n    // Calculate the total price of the price1 based on two points\\n    function _getPrice1(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(xs <= xe, \\\"xs > xe\\\");\\n        uint256 p1xs = xs;\\n        uint256 p1xe = xe;\\n\\n        if (xs > x2() + _exerciseAmount) {\\n            return 0;\\n        }\\n\\n        if (xe < x1() + _exerciseAmount) {\\n            return 0;\\n        }\\n\\n        if (xs < x1() + _exerciseAmount) {\\n            p1xs = x1() + _exerciseAmount;\\n        }\\n\\n        if (xe > x2() + _exerciseAmount) {\\n            p1xe = x2() + _exerciseAmount - 1;\\n        }\\n\\n        uint256 a = _finalPrice1(p1xs, round);\\n        uint256 b = _finalPrice1(p1xe, round);\\n\\n        return ((a + b) * (p1xe - p1xs)) / 2 / PRICE_PRECISION;\\n    }\\n\\n    // Calculate the total price of the price2 based on two points\\n    function _getPrice2(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(xs <= xe, \\\"xs > xe\\\");\\n\\n        if (xe < x2() + _exerciseAmount) {\\n            return 0;\\n        }\\n        uint256 p2xs = xs;\\n        uint256 p2xe = xe;\\n\\n        if (xs < x2() + _exerciseAmount) {\\n            p2xs = x2() + _exerciseAmount;\\n        }\\n\\n        uint256 a = _finalPrice2(p2xs, round);\\n        uint256 b = _finalPrice2(p2xe, round);\\n\\n        return\\n            Math.mulDiv(\\n                a + b,\\n                p2xe - p2xs,\\n                2 * PRICE_PRECISION,\\n                round ? Math.Rounding.Up : Math.Rounding.Zero\\n            );\\n    }\\n\\n    // Calculate the total price of the floor price based on two points\\n    function _getPrice0(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(xs <= xe, \\\"xs > xe\\\");\\n        uint256 fpAmount = 0;\\n        if (xs < x1() + _exerciseAmount) {\\n            fpAmount = x1() + _exerciseAmount - xs;\\n        }\\n        if (xe < x1() + _exerciseAmount) {\\n            fpAmount = xe - xs;\\n        }\\n\\n        return\\n            Math.mulDiv(\\n                fpAmount,\\n                _floorPrice,\\n                PRICE_PRECISION,\\n                round ? Math.Rounding.Up : Math.Rounding.Zero\\n            );\\n    }\\n\\n    function getUseFPBuyPrice(\\n        uint256 amount\\n    ) public view returns (uint256 toLiquidityPrice, uint256 fees) {\\n        toLiquidityPrice = Math.mulDiv(\\n            _floorPrice,\\n            amount,\\n            PRICE_PRECISION,\\n            Math.Rounding.Up\\n        );\\n        fees = _config.vammBuyFees(toLiquidityPrice);\\n    }\\n\\n    function getBuyPrice(\\n        uint256 amount\\n    ) external view returns (uint256 toLiquidityPrice, uint256 fees) {\\n        uint256 xs = _config.getUtilityToken().totalSupply() + 1;\\n        uint256 xe = xs + amount;\\n        uint256 price1 = _getPrice1(xs, xe, true);\\n        uint256 price2 = _getPrice2(xs, xe, true);\\n        uint256 price0 = _getPrice0(xs, xe, true);\\n        toLiquidityPrice = price1 + price2 + price0;\\n        fees = _config.vammBuyFees(toLiquidityPrice);\\n    }\\n\\n    function getSellPrice(\\n        uint256 xe,\\n        uint256 amount\\n    ) external view returns (uint256 toUserPrice, uint256 fees) {\\n        uint256 xs = xe - amount;\\n        uint256 price1 = _getPrice1(xs, xe, false);\\n        uint256 price2 = _getPrice2(xs, xe, false);\\n        uint256 price0 = _getPrice0(xs, xe, false);\\n        uint256 totalPrice = price1 + price2 + price0;\\n        fees = _config.vammSellFees(totalPrice);\\n        toUserPrice = totalPrice - fees;\\n    }\\n\\n    function getSellPrice(\\n        uint256 amount\\n    ) external view returns (uint256 toUserPrice, uint256 fees) {\\n        uint256 xe = _config.getUtilityToken().totalSupply();\\n        if (xe == 0) {\\n            return (0, 0);\\n        }\\n        uint256 xs = xe - amount;\\n        uint256 price1 = _getPrice1(xs, xe, false);\\n        uint256 price2 = _getPrice2(xs, xe, false);\\n        uint256 price0 = _getPrice0(xs, xe, false);\\n        uint256 totalPrice = price1 + price2 + price0;\\n        fees = _config.vammSellFees(totalPrice);\\n        toUserPrice = totalPrice - fees;\\n    }\\n}\\n\",\"keccak256\":\"0x5775afb9758145ad4cbe3e9fd45b16b8bd6a363bfdedbe66ad5cdf9c93a3a4f4\",\"license\":\"GPL-3.0\"},\"contracts/config/IConfig.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../IUtilityToken.sol\\\";\\nimport \\\"../feerouter/IFeeRouter.sol\\\";\\n\\ninterface IConfig {\\n    struct StableCoinEnabled {\\n        bool buyEnabled;\\n        bool sellEnabled;\\n        bool exists;\\n        address gauge;\\n        bool isMetaGauge;\\n    }\\n\\n    function vammBuyFees(uint256 totalPrice) external view returns (uint256);\\n\\n    function vammSellFees(uint256 totalPrice) external view returns (uint256);\\n\\n    function getVAMMStableCoin(\\n        address stableCoin\\n    ) external view returns (StableCoinEnabled memory);\\n\\n    function getStableCoins() external view returns (address[] memory);\\n\\n    function getMaxOnceExchangeAmount() external view returns (uint256);\\n\\n    function getFeeRouter() external view returns (IFeeRouter);\\n\\n    function getUtilityToken() external view returns (IUtilityToken);\\n\\n    function getPRToken() external view returns (IUtilityToken);\\n\\n    function getGovToken() external view returns (IUtilityToken);\\n\\n    function getStableCoinToken() external view returns (IUtilityToken);\\n\\n    function getUtilityStakeAddress() external view returns (address);\\n\\n    function getLiquidityStakeAddress() external view returns (address);\\n\\n    function getVAMMAddress() external view returns (address);\\n\\n    function getMinterAddress() external view returns (address);\\n\\n    function getCurveStableCoin2CRVPoolAddress()\\n        external\\n        view\\n        returns (address);\\n\\n    function checkIsOperator(address _operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x850d941ca2c41850407a30ecc191f5d73efda270e18d4a73345ea7ce05185f37\",\"license\":\"UNLICENSED\"},\"contracts/curve/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n// https://github.com/curvefi/curve-contract/blob/master/contracts/pool-templates/base/SwapTemplateBase.vy\\ninterface ICurve2CRVPool is IERC20Metadata {\\n    function calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 min_amount_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n}\\n\\ninterface ICurveMetaPool is IERC20Metadata {\\n    function calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function coins(uint256) external view returns (address);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 min_amount_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts\\n    ) external returns (uint256[2] memory);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function rewards_receiver() external view returns (address);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd81844dbda8e8bf5b403701708e49386fee7921c16a3a6931a7d9dbfa51e00c5\",\"license\":\"GPL-3.0\"},\"contracts/curve/LUAUSDExchangeProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../IVAMM.sol\\\";\\nimport \\\"../config/IConfig.sol\\\";\\nimport \\\"./IPool.sol\\\";\\n\\ncontract LUAUSDExchangeProxy {\\n    IConfig public config;\\n\\n    constructor(IConfig config_) {\\n        config = config_;\\n    }\\n\\n    function buyWithPRToken(\\n        uint256 buyAmount,\\n        uint256 min2CRVAmount,\\n        uint256 maxPayAmount\\n    ) external {\\n        IUtilityToken prToken = config.getPRToken();\\n        address vamm = config.getVAMMAddress();\\n        ICurveMetaPool curvePool = ICurveMetaPool(\\n            config.getCurveStableCoin2CRVPoolAddress()\\n        );\\n        address acceptCoin = address(config.getStableCoinToken());\\n        address curve2CRV = curvePool.coins(1);\\n\\n        require(\\n            IERC20Metadata(acceptCoin).transferFrom(\\n                msg.sender,\\n                address(this),\\n                maxPayAmount\\n            ),\\n            \\\"b0\\\"\\n        );\\n        IERC20Metadata(acceptCoin).approve(address(curvePool), maxPayAmount);\\n        require(\\n            prToken.transferFrom(msg.sender, address(this), buyAmount),\\n            \\\"b1\\\"\\n        );\\n\\n        uint256 beforeBalance = IERC20Metadata(curve2CRV).balanceOf(\\n            address(this)\\n        );\\n        curvePool.exchange(0, 1, maxPayAmount, min2CRVAmount);\\n        uint256 mint2CRVBalance = IERC20Metadata(curve2CRV).balanceOf(address(this)) -\\n            beforeBalance;\\n        IERC20Metadata(curve2CRV).approve(vamm, mint2CRVBalance);\\n\\n        prToken.approve(vamm, buyAmount);\\n\\n        IVAMM(vamm).mintByPRToken(\\n            curve2CRV,\\n            buyAmount,\\n            mint2CRVBalance,\\n            msg.sender\\n        );\\n    }\\n\\n    function buy(\\n        uint256 maxPayAmount,\\n        uint256 min2CRVAmount,\\n        uint256 mintVammAmount\\n    ) external {\\n        address vamm = config.getVAMMAddress();\\n        ICurveMetaPool curvePool = ICurveMetaPool(\\n            config.getCurveStableCoin2CRVPoolAddress()\\n        );\\n        address acceptCoin = address(config.getStableCoinToken());\\n        address curve2CRV = curvePool.coins(1);\\n        require(\\n            IERC20Metadata(acceptCoin).transferFrom(\\n                msg.sender,\\n                address(this),\\n                maxPayAmount\\n            ),\\n            \\\"b0\\\"\\n        );\\n        IERC20Metadata(acceptCoin).approve(address(curvePool), maxPayAmount);\\n\\n        // exchange 2crv\\n        uint256 beforeBalance = IERC20Metadata(curve2CRV).balanceOf(\\n            address(this)\\n        );\\n        curvePool.exchange(0, 1, maxPayAmount, min2CRVAmount);\\n        uint256 mint2CRVBalance = IERC20Metadata(curve2CRV).balanceOf(\\n            address(this)\\n        ) - beforeBalance;\\n        IERC20Metadata(curve2CRV).approve(vamm, mint2CRVBalance);\\n\\n        // address payToken,\\n        // uint256 mintAmount,\\n        // uint256 maxPayAmount,\\n        // address recipient\\n        IVAMM(vamm).mint(\\n            curve2CRV,\\n            mintVammAmount,\\n            mint2CRVBalance,\\n            msg.sender\\n        );\\n    }\\n\\n    function get_virtual_price() external view returns (uint256) {\\n        ICurveMetaPool curvePool = ICurveMetaPool(\\n            config.getCurveStableCoin2CRVPoolAddress()\\n        );\\n        return curvePool.get_virtual_price();\\n    }\\n\\n    function sell(\\n        uint256 burnAmount,\\n        uint256 minReceive2CRVAmount,\\n        uint256 minReceiveLUAUSDAmount\\n    ) external {\\n        address vamm = config.getVAMMAddress();\\n        ICurveMetaPool curvePool = ICurveMetaPool(\\n            config.getCurveStableCoin2CRVPoolAddress()\\n        );\\n        address curve2CRV = curvePool.coins(1);\\n\\n        IUtilityToken utilityToken = config.getUtilityToken();\\n        utilityToken.transferFrom(msg.sender, address(this), burnAmount);\\n        utilityToken.approve(address(vamm), burnAmount);\\n\\n        uint256 beforeBalance = IERC20Metadata(curve2CRV).balanceOf(\\n            address(this)\\n        );\\n\\n        // \\u8c03\\u7528vAMM\\u8fdb\\u884c\\u8d2d\\u4e70.\\n        IVAMM(vamm).burn(\\n            burnAmount,\\n            curve2CRV,\\n            minReceive2CRVAmount,\\n            address(this)\\n        );\\n\\n        uint256 receive2CRVBalance = IERC20Metadata(curve2CRV).balanceOf(\\n            address(this)\\n        ) - beforeBalance;\\n\\n        require(receive2CRVBalance >= minReceive2CRVAmount, \\\"b0\\\");\\n        IERC20Metadata(curve2CRV).approve(\\n            address(curvePool),\\n            receive2CRVBalance\\n        );\\n\\n        // exchange 2CRV to LUAUSD\\n        curvePool.exchange(\\n            1,\\n            0,\\n            receive2CRVBalance,\\n            minReceiveLUAUSDAmount,\\n            msg.sender\\n        );\\n    }\\n\\n    function calcDeposit(uint256 payAmount) external view returns (uint256) {\\n        ICurveMetaPool curvePool = ICurveMetaPool(\\n            config.getCurveStableCoin2CRVPoolAddress()\\n        );\\n        return curvePool.get_dy(0, 1, payAmount);\\n    }\\n\\n    function calcWithdraw(uint256 tokenAmount) external view returns (uint256) {\\n        ICurveMetaPool curvePool = ICurveMetaPool(\\n            config.getCurveStableCoin2CRVPoolAddress()\\n        );\\n        return curvePool.get_dy(1, 0, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xd7f49c40c87f6514898300dd96d47349b26946892db309440255a7ed9b4d6507\",\"license\":\"GPL-3.0\"},\"contracts/feerouter/IFeeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IFeeRouter {\\n    function colletFees() external;\\n\\n    function getDAOVault() external view returns (address);\\n\\n    function getGewardVault() external view returns (address);\\n\\n    function getPercentForGeward() external view returns (uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x6b52bdeb8b97c72a36e6abab4897168393c9a3feb6125bade339fc9741e4cc34\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516116d23803806116d283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61163f806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638f2b29a71161005b5780638f2b29a7146100da5780639b05f5e4146100fb578063bb7b8b801461010e578063d3c9727c1461011657600080fd5b806333f2fdbf1461008257806340993b261461009757806379502c55146100aa575b600080fd5b6100956100903660046114ed565b610129565b005b6100956100a53660046114ed565b6107fe565b6000546100bd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ed6100e8366004611519565b610d37565b6040519081526020016100d1565b6100ed610109366004611519565b610e27565b6100ed610ed3565b6100956101243660046114ed565b610fab565b60008060009054906101000a90046001600160a01b03166001600160a01b031663316cb88a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561017d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a1919061154a565b905060008060009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021b919061154a565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663ea6b53286040518163ffffffff1660e01b8152600401602060405180830381865afa158015610271573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610295919061154a565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663e3fbec786040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f919061154a565b60405163c661065760e01b8152600160048201529091506000906001600160a01b0384169063c661065790602401602060405180830381865afa15801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e919061154a565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd906103b190339030908b90600401611567565b6020604051808303816000875af11580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f4919061158b565b6104195760405162461bcd60e51b8152600401610410906115ad565b60405180910390fd5b60405163095ea7b360e01b81526001600160a01b0384811660048301526024820188905283169063095ea7b3906044016020604051808303816000875af1158015610468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048c919061158b565b506040516323b872dd60e01b81526001600160a01b038616906323b872dd906104bd90339030908d90600401611567565b6020604051808303816000875af11580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610500919061158b565b6105315760405162461bcd60e51b8152602060048201526002602482015261623160f01b6044820152606401610410565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059c91906115c9565b604051630f7c084960e21b8152600060048201526001602482015260448101899052606481018a90529091506001600160a01b03851690633df02124906084016020604051808303816000875af11580156105fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061f91906115c9565b506040516370a0823160e01b815230600482015260009082906001600160a01b038516906370a0823190602401602060405180830381865afa158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d91906115c9565b61069791906115e2565b60405163095ea7b360e01b81526001600160a01b038881166004830152602482018390529192509084169063095ea7b3906044016020604051808303816000875af11580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e919061158b565b5060405163095ea7b360e01b81526001600160a01b038781166004830152602482018c905288169063095ea7b3906044016020604051808303816000875af115801561075e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610782919061158b565b50604051631a1c20f160e01b81526001600160a01b038481166004830152602482018c905260448201839052336064830152871690631a1c20f190608401600060405180830381600087803b1580156107da57600080fd5b505af11580156107ee573d6000803e3d6000fd5b5050505050505050505050505050565b60008060009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610876919061154a565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663ea6b53286040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f0919061154a565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663e3fbec786040518163ffffffff1660e01b8152600401602060405180830381865afa158015610946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096a919061154a565b60405163c661065760e01b8152600160048201529091506000906001600160a01b0384169063c661065790602401602060405180830381865afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d9919061154a565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd90610a0c90339030908c90600401611567565b6020604051808303816000875af1158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f919061158b565b610a6b5760405162461bcd60e51b8152600401610410906115ad565b60405163095ea7b360e01b81526001600160a01b0384811660048301526024820189905283169063095ea7b3906044016020604051808303816000875af1158015610aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ade919061158b565b506040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4a91906115c9565b604051630f7c084960e21b81526000600482015260016024820152604481018a9052606481018990529091506001600160a01b03851690633df02124906084016020604051808303816000875af1158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd91906115c9565b506040516370a0823160e01b815230600482015260009082906001600160a01b038516906370a0823190602401602060405180830381865afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b91906115c9565b610c4591906115e2565b60405163095ea7b360e01b81526001600160a01b038881166004830152602482018390529192509084169063095ea7b3906044016020604051808303816000875af1158015610c98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbc919061158b565b50604051637ba5ff4760e11b81526001600160a01b038481166004830152602482018990526044820183905233606483015287169063f74bfe8e90608401600060405180830381600087803b158015610d1457600080fd5b505af1158015610d28573d6000803e3d6000fd5b50505050505050505050505050565b6000805460408051631d4d6a6560e31b8152905183926001600160a01b03169163ea6b53289160048083019260209291908290030181865afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da5919061154a565b604051635e0d443f60e01b81526000600482015260016024820152604481018590529091506001600160a01b03821690635e0d443f906064015b602060405180830381865afa158015610dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2091906115c9565b9392505050565b6000805460408051631d4d6a6560e31b8152905183926001600160a01b03169163ea6b53289160048083019260209291908290030181865afa158015610e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e95919061154a565b604051635e0d443f60e01b81526001600482015260006024820152604481018590529091506001600160a01b03821690635e0d443f90606401610ddf565b6000805460408051631d4d6a6560e31b8152905183926001600160a01b03169163ea6b53289160048083019260209291908290030181865afa158015610f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f41919061154a565b9050806001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa591906115c9565b91505090565b60008060009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611023919061154a565b905060008060009054906101000a90046001600160a01b03166001600160a01b031663ea6b53286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109d919061154a565b60405163c661065760e01b8152600160048201529091506000906001600160a01b0383169063c661065790602401602060405180830381865afa1580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c919061154a565b905060008060009054906101000a90046001600160a01b03166001600160a01b0316626266796040518163ffffffff1660e01b8152600401602060405180830381865afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611185919061154a565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd906111b890339030908c90600401611567565b6020604051808303816000875af11580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb919061158b565b5060405163095ea7b360e01b81526001600160a01b0385811660048301526024820189905282169063095ea7b3906044016020604051808303816000875af115801561124b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126f919061158b565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156112b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112db91906115c9565b604051630bf7be2160e41b8152600481018a90526001600160a01b038581166024830152604482018a90523060648301529192509086169063bf7be21090608401600060405180830381600087803b15801561133657600080fd5b505af115801561134a573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508391506001600160a01b038616906370a0823190602401602060405180830381865afa158015611397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bb91906115c9565b6113c591906115e2565b9050878110156113e75760405162461bcd60e51b8152600401610410906115ad565b60405163095ea7b360e01b81526001600160a01b0386811660048301526024820183905285169063095ea7b3906044016020604051808303816000875af1158015611436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145a919061158b565b5060405163ddc1f59d60e01b8152600160048201526000602482015260448101829052606481018890523360848201526001600160a01b0386169063ddc1f59d9060a4016020604051808303816000875af11580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e191906115c9565b50505050505050505050565b60008060006060848603121561150257600080fd5b505081359360208301359350604090920135919050565b60006020828403121561152b57600080fd5b5035919050565b6001600160a01b038116811461154757600080fd5b50565b60006020828403121561155c57600080fd5b8151610e2081611532565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561159d57600080fd5b81518015158114610e2057600080fd5b602080825260029082015261062360f41b604082015260600190565b6000602082840312156115db57600080fd5b5051919050565b8181038181111561160357634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220c7562da14ec73c5afe77e5ae95375a0c6743e21ca248136bd2c047deeb7e0a1f64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12980,
        "contract": "contracts/curve/LUAUSDExchangeProxy.sol:LUAUSDExchangeProxy",
        "label": "config",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IConfig)12016"
      }
    ],
    "types": {
      "t_contract(IConfig)12016": {
        "encoding": "inplace",
        "label": "contract IConfig",
        "numberOfBytes": "20"
      }
    }
  }
}