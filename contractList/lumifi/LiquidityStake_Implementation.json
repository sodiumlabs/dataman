{
  "address": "0xA88536530eFe2F6a8Bb5B9f985EAD89E6dbd928C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpamount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnamount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayamount",
          "type": "uint256"
        }
      ],
      "name": "UnStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_REWARDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECENT_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calcStakeLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "unstakeLP",
          "type": "uint256"
        }
      ],
      "name": "calcUnstakeToUserAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimDataByStaker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hook",
      "outputs": [
        {
          "internalType": "contract LiquidityStakeHook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfig",
          "name": "config_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardIntegral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardIntegralFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LiquidityStakeHook",
          "name": "hook_",
          "type": "address"
        }
      ],
      "name": "setHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minMintAmount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeInfoByStaker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loaned2CRVAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSC2CRVLP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBurnSCAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLoaned2CRVAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unstakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min2userAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unstakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min2userAmount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewCanClaimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4c8f192e3697e532d6020b5688b890dcdcc7efce5be4d22f3f49f6fc2c16560",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2773151",
    "logsBloom": "0x
    "blockHash": "0xf0c5792733d8539571914eaa5a6386d79d9505538f6dd2e17709e60f67944dea",
    "transactionHash": "0xd4c8f192e3697e532d6020b5688b890dcdcc7efce5be4d22f3f49f6fc2c16560",
    "logs": [],
    "blockNumber": 120227468,
    "cumulativeGasUsed": "2773151",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4f1f45ca5fe8f6515b42ba0264732978",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayamount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECENT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcStakeLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakeLP\",\"type\":\"uint256\"}],\"name\":\"calcUnstakeToUserAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimDataByStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hook\",\"outputs\":[{\"internalType\":\"contract LiquidityStakeHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"config_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardIntegral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardIntegralFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LiquidityStakeHook\",\"name\":\"hook_\",\"type\":\"address\"}],\"name\":\"setHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeInfoByStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loaned2CRVAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSC2CRVLP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnSCAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLoaned2CRVAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min2userAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min2userAmount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewCanClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityStake.sol\":\"LiquidityStake\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/IUtilityToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IUtilityToken is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x30d63bfb77e99692f375570437cd5d3111ef40ce03542a3b0a4fa4019f9a1b43\",\"license\":\"GPL-3.0\"},\"contracts/IVAMM.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IUtilityToken.sol\\\";\\nimport \\\"./PriceField.sol\\\";\\n\\ninterface IVAMM {\\n    event Mint(\\n        address indexed buyer,\\n        uint256 tokenAmount,\\n        uint256 payAmount,\\n        uint256 fees\\n    );\\n    event Burn(\\n        address indexed seller,\\n        uint256 tokenAmount,\\n        uint256 payAmount,\\n        uint256 fees\\n    );\\n    event UpdateMarketPrice(uint256 newMarketPrice);\\n    event UpdateMFR(uint256 t, uint256 x);\\n\\n    function borrow(uint256 _borrowAmount) external;\\n\\n    function repay(uint256 _repayAmount) external;\\n\\n    function canBorrowAmount() external view returns (uint256);\\n\\n    function balanceOf(address token) external view returns (uint256);\\n\\n    function getPriceField() external view returns (PriceField);\\n\\n    function mintByPRToken(\\n        address payTokenAddress,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount\\n    ) external;\\n\\n    function getLiquidity()\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 floorPriceSupport,\\n            uint256 marketSupport,\\n            uint256 mfr\\n        );\\n\\n    function mintByPRToken(\\n        address payTokenAddress,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount,\\n        address recipient\\n    ) external;\\n\\n    function mint(\\n        address payToken,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount\\n    ) external;\\n\\n    function mint(\\n        address payToken,\\n        uint256 mintAmount,\\n        uint256 maxPayAmount,\\n        address recipient\\n    ) external;\\n\\n    function burn(\\n        uint256 brunAmount,\\n        address receivedToken,\\n        uint256 minReceivedAmount\\n    ) external;\\n\\n    function burn(\\n        uint256 brunAmount,\\n        address receivedToken,\\n        uint256 minReceivedAmount,\\n        address recipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0x76931896e5b07bca285864ed379feeb8ce961f33694da07b8e700f05d7ae989b\",\"license\":\"GPL-3.0\"},\"contracts/LiquidityStake.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./IVAMM.sol\\\";\\nimport \\\"./IUtilityToken.sol\\\";\\nimport \\\"./config/IConfig.sol\\\";\\nimport \\\"./curve/IPool.sol\\\";\\nimport \\\"./curve/ICurveMetaPoolGauge.sol\\\";\\nimport \\\"./LiquidityStakeHook.sol\\\";\\n\\ncontract LiquidityStake is Initializable, OwnableUpgradeable, UUPSUpgradeable {\\n    uint128 public constant PRICE_PRECISION = 1e18;\\n    uint128 public constant PRECENT_DENOMINATOR = 10000000000;\\n    uint256 public constant MAX_REWARDS = 8;\\n\\n    IConfig public config;\\n    LiquidityStakeHook public hook;\\n\\n    struct StakeInfo {\\n        uint256 loaned2CRVAmount;\\n        uint256 totalSC2CRVLP;\\n    }\\n\\n    mapping(address => StakeInfo) public stakeInfoByStaker;\\n    mapping(address => mapping(address => uint256)) public claimDataByStaker;\\n    mapping(address => mapping(address => uint256)) public rewardIntegralFor;\\n    mapping(address => uint256) public rewardBalances;\\n    mapping(address => uint256) public rewardIntegral;\\n\\n    uint256 public totalLoaned2CRVAmount;\\n    uint256 public totalBurnSCAmount;\\n\\n    event Stake(address indexed staker, uint256 amount);\\n    event UnStake(\\n        address indexed staker,\\n        address recipient,\\n        uint256 lpamount,\\n        uint256 burnamount,\\n        uint256 repayamount\\n    );\\n    event Claim(address indexed staker, address token, uint256 amount);\\n\\n    function initialize(IConfig config_) public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        _transferOwnership(tx.origin);\\n        config = config_;\\n    }\\n\\n    function setHook(LiquidityStakeHook hook_) external onlyOwner {\\n        hook = hook_;\\n    }\\n\\n    function _sc2crvPool() internal view returns (ICurveMetaPool) {\\n        address sc2crvPoolAddress = config.getCurveStableCoin2CRVPoolAddress();\\n        return ICurveMetaPool(sc2crvPoolAddress);\\n    }\\n\\n    function _totalSC2CRVLP() internal view returns (uint256) {\\n        return _sc2crvPool().balanceOf(address(this));\\n    }\\n\\n    function _metaGauge() internal view returns (ICurveMetaPoolGauge) {\\n        return ICurveMetaPoolGauge(_sc2crvPool().rewards_receiver());\\n    }\\n\\n    function calcUnstakeToUserAmount(\\n        address staker,\\n        uint256 unstakeLP\\n    ) external view returns (uint256) {\\n        StakeInfo memory stakeInfo = stakeInfoByStaker[staker];\\n        if (stakeInfo.totalSC2CRVLP == 0) {\\n            return 0;\\n        }\\n        if (unstakeLP > stakeInfo.totalSC2CRVLP) {\\n            unstakeLP = stakeInfo.totalSC2CRVLP;\\n        }\\n        uint256 repayAmount = Math.mulDiv(\\n            stakeInfo.loaned2CRVAmount,\\n            unstakeLP,\\n            stakeInfo.totalSC2CRVLP\\n        );\\n        uint256 t = _totalSC2CRVLP();\\n        uint256 b0 = _sc2crvPool().balances(0);\\n        uint256 b1 = _sc2crvPool().balances(1);\\n        uint256 w0 = Math.mulDiv(unstakeLP, b0, t);\\n        uint256 w1 = Math.mulDiv(unstakeLP, b1, t);\\n\\n        if (w1 > repayAmount) {\\n            w1 = w1 - repayAmount;\\n        } else {\\n            w0 = w0 - (repayAmount - w1);\\n            w1 = 0;\\n        }\\n\\n        if (w1 > 0) {\\n            w0 = w0 + _sc2crvPool().get_dy(1, 0, w1);\\n        }\\n\\n        return w0;\\n    }\\n\\n    function _borrow2CRV(uint256 _amount) internal returns (uint256) {\\n        IVAMM vamm = IVAMM(config.getVAMMAddress());\\n        uint256 borrowAmount = _amount;\\n        if (vamm.canBorrowAmount() < _amount) {\\n            borrowAmount = vamm.canBorrowAmount();\\n        }\\n        vamm.borrow(borrowAmount);\\n        totalLoaned2CRVAmount += borrowAmount;\\n        return borrowAmount;\\n    }\\n\\n    function _repay2CRV(uint256 _amount) internal {\\n        IVAMM vamm = IVAMM(config.getVAMMAddress());\\n        address tokenAddress = _sc2crvPool().coins(1);\\n        IERC20Metadata token = IERC20Metadata(tokenAddress);\\n        token.approve(address(vamm), _amount);\\n        vamm.repay(_amount);\\n        totalLoaned2CRVAmount -= _amount;\\n    }\\n\\n    function calcStakeLP(uint256 _amount) external view returns (uint256) {\\n        IVAMM vamm = IVAMM(config.getVAMMAddress());\\n        uint256 borrowAmount = _amount;\\n        if (vamm.canBorrowAmount() < _amount) {\\n            borrowAmount = vamm.canBorrowAmount();\\n        }\\n        uint256[2] memory amounts = [_amount, borrowAmount];\\n        return _sc2crvPool().calc_token_amount(amounts, true);\\n    }\\n\\n    function withdrawFees() external {\\n        _metaGauge().claim_rewards();\\n        // withdraw CRV\\n        address crvToken = address(0x11cDb42B0EB46D95f990BeDD4695A6e3fA034978);\\n        uint256 crvBalance = IERC20Metadata(crvToken).balanceOf(address(this));\\n        IERC20Metadata(crvToken).transfer(\\n            address(config.getFeeRouter()),\\n            crvBalance\\n        );\\n    }\\n\\n    function stake(uint256 _amount, uint256 minMintAmount) external {\\n        address staker = msg.sender;\\n        IUtilityToken stablecoin = config.getStableCoinToken();\\n        _checkpoint(staker);\\n        stablecoin.transferFrom(staker, address(this), _amount);\\n        StakeInfo storage stakeInfo = stakeInfoByStaker[staker];\\n        uint256 borrowed2CRV = _borrow2CRV(_amount);\\n        stakeInfo.loaned2CRVAmount += borrowed2CRV;\\n        address tokenAddress = _sc2crvPool().coins(1);\\n        IERC20Metadata token2crv = IERC20Metadata(tokenAddress);\\n        // approve\\n        stablecoin.approve(address(_sc2crvPool()), _amount);\\n        token2crv.approve(address(_sc2crvPool()), borrowed2CRV);\\n        // add liqulity\\n        uint256[2] memory amounts = [_amount, borrowed2CRV];\\n        uint256 mintLPAmount = _sc2crvPool().add_liquidity(\\n            amounts,\\n            minMintAmount\\n        );\\n        stakeInfo.totalSC2CRVLP += mintLPAmount;\\n\\n        if (address(hook) != address(0)) {\\n            hook.onLiquidityStake(staker, _amount, mintLPAmount);\\n        }\\n        // address staker,\\n        // uint256 amount,\\n        // uint256 stakerLP\\n        emit Stake(staker, _amount);\\n    }\\n\\n    function unstake(uint256 _unstakeAmount, uint256 min2userAmount) external {\\n        address staker = msg.sender;\\n        _unstake(staker, staker, _unstakeAmount, min2userAmount);\\n    }\\n\\n    function unstake(\\n        uint256 _unstakeAmount,\\n        uint256 min2userAmount,\\n        address recipient\\n    ) external {\\n        address staker = msg.sender;\\n        _unstake(staker, recipient, _unstakeAmount, min2userAmount);\\n    }\\n\\n    function _unstake(\\n        address staker,\\n        address recipient,\\n        uint256 _unstakeAmount,\\n        uint256 min2userAmount\\n    ) internal {\\n        StakeInfo storage stakeInfo = stakeInfoByStaker[staker];\\n        IERC20Metadata token0 = IERC20Metadata(_sc2crvPool().coins(0));\\n        IERC20Metadata token1 = IERC20Metadata(_sc2crvPool().coins(1));\\n        require(stakeInfo.totalSC2CRVLP >= _unstakeAmount, \\\"un01\\\");\\n        uint256 repayAmount = Math.mulDiv(\\n            stakeInfo.loaned2CRVAmount,\\n            _unstakeAmount,\\n            stakeInfo.totalSC2CRVLP\\n        );\\n\\n        _checkpoint(staker);\\n\\n        uint256 b0 = token0.balanceOf(address(this));\\n        uint256 b1 = token1.balanceOf(address(this));\\n\\n        // It doesn't matter the slippage of the curve here, just make sure that the end user receives a sufficient amount\\n        uint256[2] memory minAmounts = [b1, b1];\\n        minAmounts[0] = 0;\\n        minAmounts[1] = 0;\\n        _sc2crvPool().approve(address(_sc2crvPool()), _unstakeAmount);\\n        _sc2crvPool().remove_liquidity(_unstakeAmount, minAmounts);\\n\\n        uint256 w0 = token0.balanceOf(address(this)) - b0;\\n        uint256 w1 = token1.balanceOf(address(this)) - b1;\\n\\n        stakeInfo.totalSC2CRVLP -= _unstakeAmount;\\n        stakeInfo.loaned2CRVAmount -= repayAmount;\\n\\n        uint256 burnAmount = 0;\\n\\n        if (w1 > repayAmount) {\\n            _repay2CRV(repayAmount);\\n            w1 = w1 - repayAmount;\\n        } else {\\n            _repay2CRV(w1);\\n            burnAmount = (repayAmount - w1);\\n            totalBurnSCAmount = totalBurnSCAmount + burnAmount;\\n            w0 = w0 - burnAmount;\\n            repayAmount = w1;\\n            w1 = 0;\\n        }\\n\\n        if (w1 > 0) {\\n            w0 = w0 + _sc2crvPool().exchange(1, 0, w1, 0);\\n        }\\n\\n        require(w0 >= min2userAmount, \\\"un02\\\");\\n        token0.transfer(recipient, w0);\\n\\n        if (address(hook) != address(0)) {\\n            hook.onLiquidityUnstake(staker, w0, _unstakeAmount);\\n        }\\n\\n        // address indexed staker,\\n        // address recipient,\\n        // uint256 lpamount,\\n        // uint256 burnamount,\\n        // uint256 repayamount\\n        emit UnStake(\\n            staker,\\n            recipient,\\n            _unstakeAmount,\\n            burnAmount,\\n            repayAmount\\n        );\\n    }\\n\\n    function _checkpoint(address staker) internal {\\n        _metaGauge().claim_rewards();\\n        StakeInfo memory stakeInfo = stakeInfoByStaker[staker];\\n        uint256 totalSupplay = _sc2crvPool().totalSupply();\\n        if (totalSupplay == 0) {\\n            return;\\n        }\\n        for (uint256 i = 0; i < MAX_REWARDS; i++) {\\n            address tokenAddress = _metaGauge().reward_tokens(i);\\n            if (tokenAddress == address(0)) {\\n                break;\\n            }\\n            uint256 dI = 0;\\n            uint256 tokenBalance = IERC20Metadata(tokenAddress).balanceOf(\\n                address(this)\\n            );\\n\\n            dI =\\n                (10 ** 18 * (tokenBalance - rewardBalances[tokenAddress])) /\\n                totalSupplay;\\n            rewardBalances[tokenAddress] = tokenBalance;\\n\\n            // integral: uint256 = self.reward_integral[token] + dI\\n            uint256 integral = rewardIntegral[tokenAddress] + dI;\\n            if (dI != 0) {\\n                rewardIntegral[tokenAddress] = integral;\\n            }\\n\\n            uint256 integralFor = rewardIntegralFor[tokenAddress][staker];\\n            uint256 newClaimable = 0;\\n\\n            if (integralFor < integral) {\\n                rewardIntegralFor[tokenAddress][staker] = integral;\\n                newClaimable =\\n                    (stakeInfo.totalSC2CRVLP * ((integral - integralFor))) /\\n                    PRICE_PRECISION;\\n            }\\n\\n            uint256 claimData = claimDataByStaker[staker][tokenAddress];\\n            uint256 totalClaimable = (claimData >> 128) + newClaimable;\\n\\n            if (totalClaimable > 0) {\\n                uint256 totalClaimed = claimData % 2 ** 128;\\n                if (newClaimable > 0) {\\n                    claimDataByStaker[staker][tokenAddress] =\\n                        totalClaimed +\\n                        (totalClaimable << 128);\\n                }\\n            }\\n        }\\n    }\\n\\n    function viewCanClaimAmount(\\n        address staker,\\n        address token\\n    ) external returns (uint256) {\\n        _checkpoint(staker);\\n        uint256 claimData = claimDataByStaker[staker][token];\\n        return claimData >> 128;\\n    }\\n\\n    function claim(address token) external {\\n        address staker = msg.sender;\\n        _checkpoint(staker);\\n\\n        uint256 claimData = claimDataByStaker[staker][token];\\n        claimDataByStaker[staker][token] = 0;\\n\\n        uint256 totalClaimble = claimData >> 128;\\n        rewardBalances[token] -= totalClaimble;\\n\\n        IERC20Metadata(token).transfer(staker, totalClaimble);\\n\\n        emit Claim(staker, token, totalClaimble);\\n    }\\n\\n    /// upgrade --- ///\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x86241af3d56d7741c347896dc5cbdf1efadc607876fc93b97eb318e2f84ba7eb\",\"license\":\"GPL-3.0\"},\"contracts/LiquidityStakeHook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface LiquidityStakeHook {\\n    function onLiquidityStake(\\n        address staker,\\n        uint256 amount,\\n        uint256 stakerLP\\n    ) external;\\n\\n    function onLiquidityUnstake(\\n        address staker,\\n        uint256 amount,\\n        uint256 stakerLP\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb7347b35a4aeb1384d6dc6455476c1b37798a12b166dd9ada293204832ea1341\",\"license\":\"GPL-3.0\"},\"contracts/PriceField.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./config/IConfig.sol\\\";\\n\\ncontract PriceField {\\n    uint128 public constant PRICE_PRECISION = 1e18;\\n\\n    uint128 public constant PRECENT_DENOMINATOR = 10000000000;\\n\\n    IConfig private _config;\\n\\n    // main slope\\n    // 10 decimals\\n    uint256 private _slope;\\n\\n    //\\n    uint256 private _exerciseAmount;\\n\\n    // current floor price\\n    uint256 private _floorPrice;\\n\\n    event UpdateFloorPrice(uint256 newFloorPrice);\\n\\n    constructor(IConfig config_, uint256 slope_, uint256 floorPrice_) {\\n        _config = config_;\\n        _slope = slope_;\\n        _exerciseAmount = 0;\\n\\n        _setFloorPrice(floorPrice_);\\n    }\\n\\n    modifier onlyVamm() {\\n        require(\\n            msg.sender == address(_config.getVAMMAddress()),\\n            \\\"PriceField: caller is not the vamm\\\"\\n        );\\n        _;\\n    }\\n\\n    function _setFloorPrice(uint256 floorPrice_) internal {\\n        require(floorPrice_ >= PRICE_PRECISION / 2, \\\"floor price too low\\\");\\n        uint256 x3 = _config.getUtilityToken().totalSupply();\\n        if (x3 > c()) {\\n            uint256 maxFloorPrice = (Math.mulDiv(\\n                x3 - c(),\\n                _slope,\\n                PRECENT_DENOMINATOR,\\n                Math.Rounding.Zero\\n            ) + PRICE_PRECISION) / 2;\\n            _floorPrice = Math.min(floorPrice_, maxFloorPrice);\\n        }\\n        _floorPrice = floorPrice_;\\n        emit UpdateFloorPrice(floorPrice_);\\n    }\\n\\n    function setFloorPrice(uint256 floorPrice_) external onlyVamm {\\n        _setFloorPrice(floorPrice_);\\n    }\\n\\n    function increaseSupplyWithNoPriceImpact(uint256 amount) external onlyVamm {\\n        _exerciseAmount += amount;\\n    }\\n\\n    function exerciseAmount() external view returns (uint256) {\\n        return _exerciseAmount;\\n    }\\n\\n    function slope() external view returns (uint256) {\\n        return _slope;\\n    }\\n\\n    function slope0() external view returns (uint256) {\\n        uint256 a = _floorPrice;\\n        uint256 b = _finalPrice1(x2() + _exerciseAmount, false);\\n        uint256 h = x2() - x1();\\n        return Math.mulDiv(b - a, PRECENT_DENOMINATOR, h);\\n    }\\n\\n    function floorPrice() external view returns (uint256) {\\n        return _floorPrice;\\n    }\\n\\n    function x1() public view returns (uint256) {\\n        // (2fp - 1)/m\\n        return\\n            Math.mulDiv(\\n                (_floorPrice * 2 - PRICE_PRECISION),\\n                PRECENT_DENOMINATOR,\\n                _slope,\\n                Math.Rounding.Zero\\n            );\\n    }\\n\\n    function x2() public view returns (uint256) {\\n        // x2 = x1+2/m\\n        return x1() + c();\\n    }\\n\\n    function c() public view returns (uint256) {\\n        // 2/m\\n        return\\n            Math.mulDiv(\\n                2 * PRICE_PRECISION,\\n                PRECENT_DENOMINATOR,\\n                _slope,\\n                Math.Rounding.Zero\\n            );\\n    }\\n\\n    function c1() public view returns (uint256) {\\n        // x1 + 1/m\\n        return\\n            x1() +\\n            Math.mulDiv(\\n                PRICE_PRECISION,\\n                PRECENT_DENOMINATOR,\\n                _slope,\\n                Math.Rounding.Zero\\n            );\\n    }\\n\\n    function b2() public view returns (uint256) {\\n        // m*x2\\n        return Math.mulDiv(x2(), _slope, PRECENT_DENOMINATOR, Math.Rounding.Up);\\n    }\\n\\n    function k() public view returns (uint256) {\\n        // b2-fp\\n        return b2() - _floorPrice;\\n    }\\n\\n    function finalPrice1(\\n        uint256 x,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _finalPrice1(x, round);\\n    }\\n\\n    function finalPrice2(\\n        uint256 x,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _finalPrice2(x, round);\\n    }\\n\\n    function _finalPrice1(\\n        uint256 x,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(x >= x1() + _exerciseAmount, \\\"x too low\\\");\\n        require(x <= x2() + _exerciseAmount, \\\"x too high\\\");\\n        if (x < c1() + _exerciseAmount) {\\n            return\\n                Math.mulDiv(\\n                    PRICE_PRECISION -\\n                        Math.mulDiv(\\n                            c1() + _exerciseAmount - x,\\n                            _slope,\\n                            PRECENT_DENOMINATOR,\\n                            round ? Math.Rounding.Up : Math.Rounding.Zero\\n                        ),\\n                    k(),\\n                    2 * PRICE_PRECISION\\n                ) + _floorPrice;\\n        }\\n        // ((x-c1-s) * m + 1) * k / 2 + fp\\n        return\\n            Math.mulDiv(\\n                Math.mulDiv(\\n                    x - c1() - _exerciseAmount,\\n                    _slope,\\n                    PRECENT_DENOMINATOR,\\n                    round ? Math.Rounding.Up : Math.Rounding.Zero\\n                ) + PRICE_PRECISION,\\n                k(),\\n                2 * PRICE_PRECISION\\n            ) + _floorPrice;\\n    }\\n\\n    function _finalPrice2(\\n        uint256 x,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(x >= x2() + _exerciseAmount, \\\"x too low\\\");\\n        // (x-s) * m\\n        return\\n            Math.mulDiv(\\n                x - _exerciseAmount,\\n                _slope,\\n                PRECENT_DENOMINATOR,\\n                round ? Math.Rounding.Up : Math.Rounding.Zero\\n            );\\n    }\\n\\n    function getPrice1(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _getPrice1(xs, xe, round);\\n    }\\n\\n    function getPrice2(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) external view returns (uint256) {\\n        return _getPrice2(xs, xe, round);\\n    }\\n\\n    // Calculate the total price of the price1 based on two points\\n    function _getPrice1(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(xs <= xe, \\\"xs > xe\\\");\\n        uint256 p1xs = xs;\\n        uint256 p1xe = xe;\\n\\n        if (xs > x2() + _exerciseAmount) {\\n            return 0;\\n        }\\n\\n        if (xe < x1() + _exerciseAmount) {\\n            return 0;\\n        }\\n\\n        if (xs < x1() + _exerciseAmount) {\\n            p1xs = x1() + _exerciseAmount;\\n        }\\n\\n        if (xe > x2() + _exerciseAmount) {\\n            p1xe = x2() + _exerciseAmount - 1;\\n        }\\n\\n        uint256 a = _finalPrice1(p1xs, round);\\n        uint256 b = _finalPrice1(p1xe, round);\\n\\n        return ((a + b) * (p1xe - p1xs)) / 2 / PRICE_PRECISION;\\n    }\\n\\n    // Calculate the total price of the price2 based on two points\\n    function _getPrice2(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(xs <= xe, \\\"xs > xe\\\");\\n\\n        if (xe < x2() + _exerciseAmount) {\\n            return 0;\\n        }\\n        uint256 p2xs = xs;\\n        uint256 p2xe = xe;\\n\\n        if (xs < x2() + _exerciseAmount) {\\n            p2xs = x2() + _exerciseAmount;\\n        }\\n\\n        uint256 a = _finalPrice2(p2xs, round);\\n        uint256 b = _finalPrice2(p2xe, round);\\n\\n        return\\n            Math.mulDiv(\\n                a + b,\\n                p2xe - p2xs,\\n                2 * PRICE_PRECISION,\\n                round ? Math.Rounding.Up : Math.Rounding.Zero\\n            );\\n    }\\n\\n    // Calculate the total price of the floor price based on two points\\n    function _getPrice0(\\n        uint256 xs,\\n        uint256 xe,\\n        bool round\\n    ) internal view returns (uint256) {\\n        require(xs <= xe, \\\"xs > xe\\\");\\n        uint256 fpAmount = 0;\\n        if (xs < x1() + _exerciseAmount) {\\n            fpAmount = x1() + _exerciseAmount - xs;\\n        }\\n        if (xe < x1() + _exerciseAmount) {\\n            fpAmount = xe - xs;\\n        }\\n\\n        return\\n            Math.mulDiv(\\n                fpAmount,\\n                _floorPrice,\\n                PRICE_PRECISION,\\n                round ? Math.Rounding.Up : Math.Rounding.Zero\\n            );\\n    }\\n\\n    function getUseFPBuyPrice(\\n        uint256 amount\\n    ) public view returns (uint256 toLiquidityPrice, uint256 fees) {\\n        toLiquidityPrice = Math.mulDiv(\\n            _floorPrice,\\n            amount,\\n            PRICE_PRECISION,\\n            Math.Rounding.Up\\n        );\\n        fees = _config.vammBuyFees(toLiquidityPrice);\\n    }\\n\\n    function getBuyPrice(\\n        uint256 amount\\n    ) external view returns (uint256 toLiquidityPrice, uint256 fees) {\\n        uint256 xs = _config.getUtilityToken().totalSupply() + 1;\\n        uint256 xe = xs + amount;\\n        uint256 price1 = _getPrice1(xs, xe, true);\\n        uint256 price2 = _getPrice2(xs, xe, true);\\n        uint256 price0 = _getPrice0(xs, xe, true);\\n        toLiquidityPrice = price1 + price2 + price0;\\n        fees = _config.vammBuyFees(toLiquidityPrice);\\n    }\\n\\n    function getSellPrice(\\n        uint256 xe,\\n        uint256 amount\\n    ) external view returns (uint256 toUserPrice, uint256 fees) {\\n        uint256 xs = xe - amount;\\n        uint256 price1 = _getPrice1(xs, xe, false);\\n        uint256 price2 = _getPrice2(xs, xe, false);\\n        uint256 price0 = _getPrice0(xs, xe, false);\\n        uint256 totalPrice = price1 + price2 + price0;\\n        fees = _config.vammSellFees(totalPrice);\\n        toUserPrice = totalPrice - fees;\\n    }\\n\\n    function getSellPrice(\\n        uint256 amount\\n    ) external view returns (uint256 toUserPrice, uint256 fees) {\\n        uint256 xe = _config.getUtilityToken().totalSupply();\\n        if (xe == 0) {\\n            return (0, 0);\\n        }\\n        uint256 xs = xe - amount;\\n        uint256 price1 = _getPrice1(xs, xe, false);\\n        uint256 price2 = _getPrice2(xs, xe, false);\\n        uint256 price0 = _getPrice0(xs, xe, false);\\n        uint256 totalPrice = price1 + price2 + price0;\\n        fees = _config.vammSellFees(totalPrice);\\n        toUserPrice = totalPrice - fees;\\n    }\\n}\\n\",\"keccak256\":\"0x5775afb9758145ad4cbe3e9fd45b16b8bd6a363bfdedbe66ad5cdf9c93a3a4f4\",\"license\":\"GPL-3.0\"},\"contracts/config/IConfig.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../IUtilityToken.sol\\\";\\nimport \\\"../feerouter/IFeeRouter.sol\\\";\\n\\ninterface IConfig {\\n    struct StableCoinEnabled {\\n        bool buyEnabled;\\n        bool sellEnabled;\\n        bool exists;\\n        address gauge;\\n        bool isMetaGauge;\\n    }\\n\\n    function vammBuyFees(uint256 totalPrice) external view returns (uint256);\\n\\n    function vammSellFees(uint256 totalPrice) external view returns (uint256);\\n\\n    function getVAMMStableCoin(\\n        address stableCoin\\n    ) external view returns (StableCoinEnabled memory);\\n\\n    function getStableCoins() external view returns (address[] memory);\\n\\n    function getMaxOnceExchangeAmount() external view returns (uint256);\\n\\n    function getFeeRouter() external view returns (IFeeRouter);\\n\\n    function getUtilityToken() external view returns (IUtilityToken);\\n\\n    function getPRToken() external view returns (IUtilityToken);\\n\\n    function getGovToken() external view returns (IUtilityToken);\\n\\n    function getStableCoinToken() external view returns (IUtilityToken);\\n\\n    function getUtilityStakeAddress() external view returns (address);\\n\\n    function getLiquidityStakeAddress() external view returns (address);\\n\\n    function getVAMMAddress() external view returns (address);\\n\\n    function getMinterAddress() external view returns (address);\\n\\n    function getCurveStableCoin2CRVPoolAddress()\\n        external\\n        view\\n        returns (address);\\n\\n    function checkIsOperator(address _operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x850d941ca2c41850407a30ecc191f5d73efda270e18d4a73345ea7ce05185f37\",\"license\":\"UNLICENSED\"},\"contracts/curve/ICurveMetaPoolGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface ICurveMetaPoolGauge {\\n    struct Reward {\\n        address token;\\n        address distributor;\\n        uint256 period_finish;\\n        uint256 rate;\\n        uint256 last_update;\\n        uint256 integral;\\n    }\\n\\n    function reward_data(address _token) external view returns (Reward memory);\\n\\n    function claimable_reward(\\n        address _addr,\\n        address _token\\n    ) external view returns (uint256);\\n\\n    function deposit_reward_token(\\n        address _reward_token,\\n        uint256 _amount\\n    ) external;\\n\\n    function add_reward(address _reward_token, address _distributor) external;\\n\\n    function claim_rewards(address _addr) external;\\n\\n    function claim_rewards() external;\\n\\n    function claim_rewards(address _addr, address _receiver) external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function deployer() external view returns (address);\\n\\n    function base_gauge() external returns (address);\\n}\\n\",\"keccak256\":\"0x88591e8d89945156ca88bdefd0bf41336f5910d277e5576ffaf37be0799bfddb\",\"license\":\"GPL-3.0\"},\"contracts/curve/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n// https://github.com/curvefi/curve-contract/blob/master/contracts/pool-templates/base/SwapTemplateBase.vy\\ninterface ICurve2CRVPool is IERC20Metadata {\\n    function calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 min_amount_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n}\\n\\ninterface ICurveMetaPool is IERC20Metadata {\\n    function calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function coins(uint256) external view returns (address);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 min_amount_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts\\n    ) external returns (uint256[2] memory);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function rewards_receiver() external view returns (address);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd81844dbda8e8bf5b403701708e49386fee7921c16a3a6931a7d9dbfa51e00c5\",\"license\":\"GPL-3.0\"},\"contracts/feerouter/IFeeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IFeeRouter {\\n    function colletFees() external;\\n\\n    function getDAOVault() external view returns (address);\\n\\n    function getGewardVault() external view returns (address);\\n\\n    function getPercentForGeward() external view returns (uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x6b52bdeb8b97c72a36e6abab4897168393c9a3feb6125bade339fc9741e4cc34\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161311d61004c600039600081816106c701528181610710015281816109a9015281816109e90152610a7c015261311d6000f3fe6080604052600436106101b75760003560e01c8063873b7820116100ec5780639cc182a41161008a578063c4d66de811610064578063c4d66de81461052e578063f2fde38b1461054e578063f624dac81461056e578063fb5478b31461058e57600080fd5b80639cc182a4146104df5780639dc8342f146104f85780639e2c8a5b1461050e57600080fd5b806393c8dc6d116100c657806393c8dc6d1461043f57806393d4f2c91461046c57806395082d251461048c578063994c5b7f146104c957600080fd5b8063873b7820146103e15780638da5cb5b146104015780638e0752691461041f57600080fd5b806363f577771161015957806379502c551161013357806379502c55146103315780637b0472f0146103695780637f5a7c7b1461038957806380701f0a146103a957600080fd5b806363f57777146102b7578063715018a6146102ef578063762006221461030457600080fd5b80633dfd3873116101955780633dfd38731461024c578063476343ee1461026c5780634f1ef2861461028157806352d1902d1461029457600080fd5b806302267cad146101bc5780631e83409a1461020a5780633659cfe61461022c575b600080fd5b3480156101c857600080fd5b506101f06101d7366004612b74565b60cb602052600090815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b34801561021657600080fd5b5061022a610225366004612b74565b6105a3565b005b34801561023857600080fd5b5061022a610247366004612b74565b6106bd565b34801561025857600080fd5b5061022a610267366004612b74565b6107a5565b34801561027857600080fd5b5061022a6107cf565b61022a61028f366004612bd8565b61099f565b3480156102a057600080fd5b506102a9610a6f565b604051908152602001610201565b3480156102c357600080fd5b506102a96102d2366004612c80565b60cd60209081526000928352604080842090915290825290205481565b3480156102fb57600080fd5b5061022a610b22565b34801561031057600080fd5b506102a961031f366004612b74565b60cf6020526000908152604090205481565b34801561033d57600080fd5b5060c954610351906001600160a01b031681565b6040516001600160a01b039091168152602001610201565b34801561037557600080fd5b5061022a610384366004612cb9565b610b36565b34801561039557600080fd5b5060ca54610351906001600160a01b031681565b3480156103b557600080fd5b506102a96103c4366004612c80565b60cc60209081526000928352604080842090915290825290205481565b3480156103ed57600080fd5b506102a96103fc366004612cdb565b610f6d565b34801561040d57600080fd5b506033546001600160a01b0316610351565b34801561042b57600080fd5b506102a961043a366004612c80565b611150565b34801561044b57600080fd5b506102a961045a366004612b74565b60ce6020526000908152604090205481565b34801561047857600080fd5b5061022a610487366004612cf4565b61118c565b34801561049857600080fd5b506104a8670de0b6b3a764000081565b6040516fffffffffffffffffffffffffffffffff9091168152602001610201565b3480156104d557600080fd5b506102a960d15481565b3480156104eb57600080fd5b506104a86402540be40081565b34801561050457600080fd5b506102a960d05481565b34801561051a57600080fd5b5061022a610529366004612cb9565b61119f565b34801561053a57600080fd5b5061022a610549366004612b74565b6111ac565b34801561055a57600080fd5b5061022a610569366004612b74565b6112e9565b34801561057a57600080fd5b506102a9610589366004612d2d565b61135f565b34801561059a57600080fd5b506102a9600881565b336105ad816115b9565b6001600160a01b03818116600090815260cc60209081526040808320938616835292815282822080549083905560ce9091529181208054608084901c928392916105f8908490612d6f565b909155505060405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905285169063a9059cbb906044016020604051808303816000875af115801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190612d82565b50604080516001600160a01b038681168252602082018490528516917f70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068910160405180910390a250505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361070e5760405162461bcd60e51b815260040161070590612da4565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107576000805160206130a1833981519152546001600160a01b031690565b6001600160a01b03161461077d5760405162461bcd60e51b815260040161070590612df0565b61078681611993565b604080516000808252602082019092526107a29183919061199b565b50565b6107ad611b06565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b6107d7611b60565b6001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561081157600080fd5b505af1158015610825573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527311cdb42b0eb46d95f990bedd4695a6e3fa03497892506000915082906370a0823190602401602060405180830381865afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190612e3c565b9050816001600160a01b031663a9059cbb60c960009054906101000a90046001600160a01b03166001600160a01b031663ea9c5e0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190612e55565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099a9190612d82565b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109e75760405162461bcd60e51b815260040161070590612da4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a306000805160206130a1833981519152546001600160a01b031690565b6001600160a01b031614610a565760405162461bcd60e51b815260040161070590612df0565b610a5f82611993565b610a6b8282600161199b565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b0f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610705565b506000805160206130a183398151915290565b610b2a611b06565b610b346000611bd0565b565b60c95460408051631c7f7d8f60e31b8152905133926000926001600160a01b039091169163e3fbec78916004808201926020929091908290030181865afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190612e55565b9050610bb4826115b9565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018690528216906323b872dd906064016020604051808303816000875af1158015610c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2d9190612d82565b506001600160a01b038216600090815260cb6020526040812090610c5086611c22565b905080826000016000828254610c669190612e72565b9091555060009050610c76611dea565b60405163c661065760e01b8152600160048201526001600160a01b03919091169063c661065790602401602060405180830381865afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce19190612e55565b9050806001600160a01b03851663095ea7b3610cfb611dea565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018b90526044016020604051808303816000875af1158015610d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6c9190612d82565b50806001600160a01b031663095ea7b3610d84611dea565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df59190612d82565b5060408051808201909152888152602081018490526000610e14611dea565b6001600160a01b0316630b4c7e4d838b6040518363ffffffff1660e01b8152600401610e41929190612ea8565b6020604051808303816000875af1158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e849190612e3c565b905080866001016000828254610e9a9190612e72565b909155505060ca546001600160a01b031615610f1e5760ca54604051632b64038b60e11b81526001600160a01b038a81166004830152602482018d905260448201849052909116906356c8071690606401600060405180830381600087803b158015610f0557600080fd5b505af1158015610f19573d6000803e3d6000fd5b505050505b876001600160a01b03167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a8b604051610f5991815260200190565b60405180910390a250505050505050505050565b60008060c960009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe79190612e55565b9050600083905083826001600160a01b0316635ea032af6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561102d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110519190612e3c565b10156110bc57816001600160a01b0316635ea032af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b99190612e3c565b90505b60408051808201909152848152602081018290526110d8611dea565b6001600160a01b031663ed8e84f38260016040518363ffffffff1660e01b8152600401611106929190612ec3565b602060405180830381865afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190612e3c565b95945050505050565b600061115b836115b9565b506001600160a01b03808316600090815260cc602090815260408083209385168352929052205460801c5b92915050565b3361119981838686611e64565b50505050565b3361099a81808585611e64565b600054610100900460ff16158080156111cc5750600054600160ff909116105b806111e65750303b1580156111e6575060005460ff166001145b6112495760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610705565b6000805460ff19166001179055801561126c576000805461ff0019166101001790555b611274612597565b61127c6125c6565b61128532611bd0565b60c980546001600160a01b0319166001600160a01b0384161790558015610a6b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6112f1611b06565b6001600160a01b0381166113565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610705565b6107a281611bd0565b6001600160a01b038216600090815260cb60209081526040808320815180830190925280548252600101549181018290529082036113a1576000915050611186565b80602001518311156113b557806020015192505b60006113ca82600001518584602001516125ed565b905060006113d66126a2565b905060006113e2611dea565b604051634903b0d160e01b8152600060048201526001600160a01b039190911690634903b0d190602401602060405180830381865afa158015611429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144d9190612e3c565b90506000611459611dea565b604051634903b0d160e01b8152600160048201526001600160a01b039190911690634903b0d190602401602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190612e3c565b905060006114d38884866125ed565b905060006114e28984876125ed565b9050858111156114fd576114f68682612d6f565b9050611518565b6115078187612d6f565b6115119083612d6f565b9150600090505b80156115ac57611526611dea565b604051635e0d443f60e01b81526001600482015260006024820152604481018390526001600160a01b039190911690635e0d443f90606401602060405180830381865afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f9190612e3c565b6115a99083612e72565b91505b5098975050505050505050565b6115c1611b60565b6001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115fb57600080fd5b505af115801561160f573d6000803e3d6000fd5b5050506001600160a01b038216600090815260cb602090815260408083208151808301909252805482526001015491810191909152915061164e611dea565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561168b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116af9190612e3c565b9050806000036116be57505050565b60005b60088110156111995760006116d4611b60565b6001600160a01b03166354c49fe9836040518263ffffffff1660e01b815260040161170191815260200190565b602060405180830381865afa15801561171e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117429190612e55565b90506001600160a01b0381166117585750611199565b6040516370a0823160e01b815230600482015260009081906001600160a01b038416906370a0823190602401602060405180830381865afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c59190612e3c565b6001600160a01b038416600090815260ce602052604090205490915085906117ed9083612d6f565b6117ff90670de0b6b3a7640000612ee0565b6118099190612f0d565b6001600160a01b038416600090815260ce6020908152604080832085905560cf9091528120549193509061183e908490612e72565b90508215611862576001600160a01b038416600090815260cf602052604090208190555b6001600160a01b03808516600090815260cd60209081526040808320938c1683529290529081205490828210156118ea576001600160a01b03808716600090815260cd60209081526040808320938e16835292905220839055670de0b6b3a76400006118ce8385612d6f565b8a602001516118dd9190612ee0565b6118e79190612f0d565b90505b6001600160a01b03808b16600090815260cc60209081526040808320938a168352929052908120549061192183608084901c612e72565b90508015611978576000611939600160801b84612f21565b905083156119765761194f608083901b82612e72565b6001600160a01b03808f16600090815260cc60209081526040808320938e16835292905220555b505b5050505050505050808061198b90612f35565b9150506116c1565b6107a2611b06565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119ce5761099a83612716565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a28575060408051601f3d908101601f19168201909252611a2591810190612e3c565b60015b611a8b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610705565b6000805160206130a18339815191528114611afa5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610705565b5061099a8383836127b2565b6033546001600160a01b03163314610b345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610705565b6000611b6a611dea565b6001600160a01b03166364817b8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb9190612e55565b905090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060c960009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9c9190612e55565b9050600083905083826001600160a01b0316635ea032af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d069190612e3c565b1015611d7157816001600160a01b0316635ea032af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6e9190612e3c565b90505b60405163317afabb60e21b8152600481018290526001600160a01b0383169063c5ebeaec90602401600060405180830381600087803b158015611db357600080fd5b505af1158015611dc7573d6000803e3d6000fd5b505050508060d06000828254611ddd9190612e72565b9091555090949350505050565b60008060c960009054906101000a90046001600160a01b03166001600160a01b031663ea6b53286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e40573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111869190612e55565b6001600160a01b038416600090815260cb6020526040812090611e85611dea565b60405163c661065760e01b8152600060048201526001600160a01b03919091169063c661065790602401602060405180830381865afa158015611ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef09190612e55565b90506000611efc611dea565b60405163c661065760e01b8152600160048201526001600160a01b03919091169063c661065790602401602060405180830381865afa158015611f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f679190612e55565b90508483600101541015611fa65760405162461bcd60e51b815260040161070590602080825260049082015263756e303160e01b604082015260600190565b6000611fbb84600001548786600101546125ed565b9050611fc6886115b9565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561200d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120319190612e3c565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209f9190612e3c565b60408051808201909152600080825260208201529091506120be611dea565b6001600160a01b031663095ea7b36120d4611dea565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018c90526044016020604051808303816000875af1158015612121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121459190612d82565b5061214e611dea565b6001600160a01b0316635b36389c8a836040518363ffffffff1660e01b815260040161217b929190612f4e565b60408051808303816000875af1158015612199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bd9190612f62565b506040516370a0823160e01b815230600482015260009084906001600160a01b038916906370a0823190602401602060405180830381865afa158015612207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222b9190612e3c565b6122359190612d6f565b6040516370a0823160e01b815230600482015290915060009084906001600160a01b038916906370a0823190602401602060405180830381865afa158015612281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a59190612e3c565b6122af9190612d6f565b90508a8960010160008282546122c59190612d6f565b9091555050885486908a906000906122de908490612d6f565b909155506000905086821115612308576122f7876127d7565b6123018783612d6f565b9150612342565b612311826127d7565b61231b8288612d6f565b90508060d15461232b9190612e72565b60d1556123388184612d6f565b9250819650600091505b81156123df57612350611dea565b604051630f7c084960e21b8152600160048201526000602482018190526044820185905260648201526001600160a01b039190911690633df02124906084016020604051808303816000875af11580156123ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d29190612e3c565b6123dc9084612e72565b92505b8a8310156124185760405162461bcd60e51b8152600401610705906020808252600490820152633ab7181960e11b604082015260600190565b60405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590528a169063a9059cbb906044016020604051808303816000875af1158015612467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248b9190612d82565b5060ca546001600160a01b0316156125315760ca60009054906101000a90046001600160a01b03166001600160a01b03166311748de38f858f6040518463ffffffff1660e01b81526004016124fe939291906001600160a01b039390931683526020830191909152604082015260600190565b600060405180830381600087803b15801561251857600080fd5b505af115801561252c573d6000803e3d6000fd5b505050505b604080516001600160a01b038f81168252602082018f905291810183905260608101899052908f16907fa4b627609e711628747558b171b04b9636337afdadac065ee7113fb91eab0b729060800160405180910390a25050505050505050505050505050565b600054610100900460ff166125be5760405162461bcd60e51b815260040161070590612fe2565b610b346129ac565b600054610100900460ff16610b345760405162461bcd60e51b815260040161070590612fe2565b60008080600019858709858702925082811083820303915050806000036126275783828161261d5761261d612ef7565b049250505061269b565b80841161263357600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b60006126ac611dea565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156126f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb9190612e3c565b6001600160a01b0381163b6127835760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610705565b6000805160206130a183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6127bb836129dc565b6000825111806127c85750805b1561099a576111998383612a1c565b60c954604080516326dac0af60e21b815290516000926001600160a01b031691639b6b02bc9160048083019260209291908290030181865afa158015612821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128459190612e55565b90506000612851611dea565b60405163c661065760e01b8152600160048201526001600160a01b03919091169063c661065790602401602060405180830381865afa158015612898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bc9190612e55565b60405163095ea7b360e01b81526001600160a01b03848116600483015260248201869052919250829182169063095ea7b3906044016020604051808303816000875af1158015612910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129349190612d82565b50604051631b8fec7360e11b8152600481018590526001600160a01b0384169063371fd8e690602401600060405180830381600087803b15801561297757600080fd5b505af115801561298b573d6000803e3d6000fd5b505050508360d060008282546129a19190612d6f565b909155505050505050565b600054610100900460ff166129d35760405162461bcd60e51b815260040161070590612fe2565b610b3433611bd0565b6129e581612716565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061269b83836040518060600160405280602781526020016130c1602791396060600080856001600160a01b031685604051612a599190613051565b600060405180830381855af49150503d8060008114612a94576040519150601f19603f3d011682016040523d82523d6000602084013e612a99565b606091505b5091509150612aaa86838387612ab4565b9695505050505050565b60608315612b23578251600003612b1c576001600160a01b0385163b612b1c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610705565b5081612b2d565b612b2d8383612b35565b949350505050565b815115612b455781518083602001fd5b8060405162461bcd60e51b8152600401610705919061306d565b6001600160a01b03811681146107a257600080fd5b600060208284031215612b8657600080fd5b813561269b81612b5f565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612bd057612bd0612b91565b604052919050565b60008060408385031215612beb57600080fd5b8235612bf681612b5f565b915060208381013567ffffffffffffffff80821115612c1457600080fd5b818601915086601f830112612c2857600080fd5b813581811115612c3a57612c3a612b91565b612c4c601f8201601f19168501612ba7565b91508082528784828501011115612c6257600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408385031215612c9357600080fd5b8235612c9e81612b5f565b91506020830135612cae81612b5f565b809150509250929050565b60008060408385031215612ccc57600080fd5b50508035926020909101359150565b600060208284031215612ced57600080fd5b5035919050565b600080600060608486031215612d0957600080fd5b83359250602084013591506040840135612d2281612b5f565b809150509250925092565b60008060408385031215612d4057600080fd5b8235612d4b81612b5f565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561118657611186612d59565b600060208284031215612d9457600080fd5b8151801515811461269b57600080fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215612e4e57600080fd5b5051919050565b600060208284031215612e6757600080fd5b815161269b81612b5f565b8082018082111561118657611186612d59565b8060005b6002811015611199578151845260209384019390910190600101612e89565b60608101612eb68285612e85565b8260408301529392505050565b60608101612ed18285612e85565b82151560408301529392505050565b808202811582820484141761118657611186612d59565b634e487b7160e01b600052601260045260246000fd5b600082612f1c57612f1c612ef7565b500490565b600082612f3057612f30612ef7565b500690565b600060018201612f4757612f47612d59565b5060010190565b8281526060810161269b6020830184612e85565b600060408284031215612f7457600080fd5b82601f830112612f8357600080fd5b6040516040810181811067ffffffffffffffff82111715612fa657612fa6612b91565b8060405250806040840185811115612fbd57600080fd5b845b81811015612fd7578051835260209283019201612fbf565b509195945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015613048578181015183820152602001613030565b50506000910152565b6000825161306381846020870161302d565b9190910192915050565b602081526000825180602084015261308c81604085016020870161302d565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209ca34722aa5f08604dbc63bdc65e8bcfec9405c0b27f8e2c59c9d0c6425f4fd164736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c8063873b7820116100ec5780639cc182a41161008a578063c4d66de811610064578063c4d66de81461052e578063f2fde38b1461054e578063f624dac81461056e578063fb5478b31461058e57600080fd5b80639cc182a4146104df5780639dc8342f146104f85780639e2c8a5b1461050e57600080fd5b806393c8dc6d116100c657806393c8dc6d1461043f57806393d4f2c91461046c57806395082d251461048c578063994c5b7f146104c957600080fd5b8063873b7820146103e15780638da5cb5b146104015780638e0752691461041f57600080fd5b806363f577771161015957806379502c551161013357806379502c55146103315780637b0472f0146103695780637f5a7c7b1461038957806380701f0a146103a957600080fd5b806363f57777146102b7578063715018a6146102ef578063762006221461030457600080fd5b80633dfd3873116101955780633dfd38731461024c578063476343ee1461026c5780634f1ef2861461028157806352d1902d1461029457600080fd5b806302267cad146101bc5780631e83409a1461020a5780633659cfe61461022c575b600080fd5b3480156101c857600080fd5b506101f06101d7366004612b74565b60cb602052600090815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b34801561021657600080fd5b5061022a610225366004612b74565b6105a3565b005b34801561023857600080fd5b5061022a610247366004612b74565b6106bd565b34801561025857600080fd5b5061022a610267366004612b74565b6107a5565b34801561027857600080fd5b5061022a6107cf565b61022a61028f366004612bd8565b61099f565b3480156102a057600080fd5b506102a9610a6f565b604051908152602001610201565b3480156102c357600080fd5b506102a96102d2366004612c80565b60cd60209081526000928352604080842090915290825290205481565b3480156102fb57600080fd5b5061022a610b22565b34801561031057600080fd5b506102a961031f366004612b74565b60cf6020526000908152604090205481565b34801561033d57600080fd5b5060c954610351906001600160a01b031681565b6040516001600160a01b039091168152602001610201565b34801561037557600080fd5b5061022a610384366004612cb9565b610b36565b34801561039557600080fd5b5060ca54610351906001600160a01b031681565b3480156103b557600080fd5b506102a96103c4366004612c80565b60cc60209081526000928352604080842090915290825290205481565b3480156103ed57600080fd5b506102a96103fc366004612cdb565b610f6d565b34801561040d57600080fd5b506033546001600160a01b0316610351565b34801561042b57600080fd5b506102a961043a366004612c80565b611150565b34801561044b57600080fd5b506102a961045a366004612b74565b60ce6020526000908152604090205481565b34801561047857600080fd5b5061022a610487366004612cf4565b61118c565b34801561049857600080fd5b506104a8670de0b6b3a764000081565b6040516fffffffffffffffffffffffffffffffff9091168152602001610201565b3480156104d557600080fd5b506102a960d15481565b3480156104eb57600080fd5b506104a86402540be40081565b34801561050457600080fd5b506102a960d05481565b34801561051a57600080fd5b5061022a610529366004612cb9565b61119f565b34801561053a57600080fd5b5061022a610549366004612b74565b6111ac565b34801561055a57600080fd5b5061022a610569366004612b74565b6112e9565b34801561057a57600080fd5b506102a9610589366004612d2d565b61135f565b34801561059a57600080fd5b506102a9600881565b336105ad816115b9565b6001600160a01b03818116600090815260cc60209081526040808320938616835292815282822080549083905560ce9091529181208054608084901c928392916105f8908490612d6f565b909155505060405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905285169063a9059cbb906044016020604051808303816000875af115801561064c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106709190612d82565b50604080516001600160a01b038681168252602082018490528516917f70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068910160405180910390a250505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361070e5760405162461bcd60e51b815260040161070590612da4565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107576000805160206130a1833981519152546001600160a01b031690565b6001600160a01b03161461077d5760405162461bcd60e51b815260040161070590612df0565b61078681611993565b604080516000808252602082019092526107a29183919061199b565b50565b6107ad611b06565b60ca80546001600160a01b0319166001600160a01b0392909216919091179055565b6107d7611b60565b6001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561081157600080fd5b505af1158015610825573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527311cdb42b0eb46d95f990bedd4695a6e3fa03497892506000915082906370a0823190602401602060405180830381865afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190612e3c565b9050816001600160a01b031663a9059cbb60c960009054906101000a90046001600160a01b03166001600160a01b031663ea9c5e0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190612e55565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099a9190612d82565b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109e75760405162461bcd60e51b815260040161070590612da4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a306000805160206130a1833981519152546001600160a01b031690565b6001600160a01b031614610a565760405162461bcd60e51b815260040161070590612df0565b610a5f82611993565b610a6b8282600161199b565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b0f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610705565b506000805160206130a183398151915290565b610b2a611b06565b610b346000611bd0565b565b60c95460408051631c7f7d8f60e31b8152905133926000926001600160a01b039091169163e3fbec78916004808201926020929091908290030181865afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190612e55565b9050610bb4826115b9565b6040516323b872dd60e01b81526001600160a01b038381166004830152306024830152604482018690528216906323b872dd906064016020604051808303816000875af1158015610c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2d9190612d82565b506001600160a01b038216600090815260cb6020526040812090610c5086611c22565b905080826000016000828254610c669190612e72565b9091555060009050610c76611dea565b60405163c661065760e01b8152600160048201526001600160a01b03919091169063c661065790602401602060405180830381865afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce19190612e55565b9050806001600160a01b03851663095ea7b3610cfb611dea565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018b90526044016020604051808303816000875af1158015610d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6c9190612d82565b50806001600160a01b031663095ea7b3610d84611dea565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df59190612d82565b5060408051808201909152888152602081018490526000610e14611dea565b6001600160a01b0316630b4c7e4d838b6040518363ffffffff1660e01b8152600401610e41929190612ea8565b6020604051808303816000875af1158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e849190612e3c565b905080866001016000828254610e9a9190612e72565b909155505060ca546001600160a01b031615610f1e5760ca54604051632b64038b60e11b81526001600160a01b038a81166004830152602482018d905260448201849052909116906356c8071690606401600060405180830381600087803b158015610f0557600080fd5b505af1158015610f19573d6000803e3d6000fd5b505050505b876001600160a01b03167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a8b604051610f5991815260200190565b60405180910390a250505050505050505050565b60008060c960009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe79190612e55565b9050600083905083826001600160a01b0316635ea032af6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561102d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110519190612e3c565b10156110bc57816001600160a01b0316635ea032af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b99190612e3c565b90505b60408051808201909152848152602081018290526110d8611dea565b6001600160a01b031663ed8e84f38260016040518363ffffffff1660e01b8152600401611106929190612ec3565b602060405180830381865afa158015611123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111479190612e3c565b95945050505050565b600061115b836115b9565b506001600160a01b03808316600090815260cc602090815260408083209385168352929052205460801c5b92915050565b3361119981838686611e64565b50505050565b3361099a81808585611e64565b600054610100900460ff16158080156111cc5750600054600160ff909116105b806111e65750303b1580156111e6575060005460ff166001145b6112495760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610705565b6000805460ff19166001179055801561126c576000805461ff0019166101001790555b611274612597565b61127c6125c6565b61128532611bd0565b60c980546001600160a01b0319166001600160a01b0384161790558015610a6b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6112f1611b06565b6001600160a01b0381166113565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610705565b6107a281611bd0565b6001600160a01b038216600090815260cb60209081526040808320815180830190925280548252600101549181018290529082036113a1576000915050611186565b80602001518311156113b557806020015192505b60006113ca82600001518584602001516125ed565b905060006113d66126a2565b905060006113e2611dea565b604051634903b0d160e01b8152600060048201526001600160a01b039190911690634903b0d190602401602060405180830381865afa158015611429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144d9190612e3c565b90506000611459611dea565b604051634903b0d160e01b8152600160048201526001600160a01b039190911690634903b0d190602401602060405180830381865afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c49190612e3c565b905060006114d38884866125ed565b905060006114e28984876125ed565b9050858111156114fd576114f68682612d6f565b9050611518565b6115078187612d6f565b6115119083612d6f565b9150600090505b80156115ac57611526611dea565b604051635e0d443f60e01b81526001600482015260006024820152604481018390526001600160a01b039190911690635e0d443f90606401602060405180830381865afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f9190612e3c565b6115a99083612e72565b91505b5098975050505050505050565b6115c1611b60565b6001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156115fb57600080fd5b505af115801561160f573d6000803e3d6000fd5b5050506001600160a01b038216600090815260cb602090815260408083208151808301909252805482526001015491810191909152915061164e611dea565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561168b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116af9190612e3c565b9050806000036116be57505050565b60005b60088110156111995760006116d4611b60565b6001600160a01b03166354c49fe9836040518263ffffffff1660e01b815260040161170191815260200190565b602060405180830381865afa15801561171e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117429190612e55565b90506001600160a01b0381166117585750611199565b6040516370a0823160e01b815230600482015260009081906001600160a01b038416906370a0823190602401602060405180830381865afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c59190612e3c565b6001600160a01b038416600090815260ce602052604090205490915085906117ed9083612d6f565b6117ff90670de0b6b3a7640000612ee0565b6118099190612f0d565b6001600160a01b038416600090815260ce6020908152604080832085905560cf9091528120549193509061183e908490612e72565b90508215611862576001600160a01b038416600090815260cf602052604090208190555b6001600160a01b03808516600090815260cd60209081526040808320938c1683529290529081205490828210156118ea576001600160a01b03808716600090815260cd60209081526040808320938e16835292905220839055670de0b6b3a76400006118ce8385612d6f565b8a602001516118dd9190612ee0565b6118e79190612f0d565b90505b6001600160a01b03808b16600090815260cc60209081526040808320938a168352929052908120549061192183608084901c612e72565b90508015611978576000611939600160801b84612f21565b905083156119765761194f608083901b82612e72565b6001600160a01b03808f16600090815260cc60209081526040808320938e16835292905220555b505b5050505050505050808061198b90612f35565b9150506116c1565b6107a2611b06565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119ce5761099a83612716565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a28575060408051601f3d908101601f19168201909252611a2591810190612e3c565b60015b611a8b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610705565b6000805160206130a18339815191528114611afa5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610705565b5061099a8383836127b2565b6033546001600160a01b03163314610b345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610705565b6000611b6a611dea565b6001600160a01b03166364817b8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb9190612e55565b905090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060c960009054906101000a90046001600160a01b03166001600160a01b0316639b6b02bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9c9190612e55565b9050600083905083826001600160a01b0316635ea032af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d069190612e3c565b1015611d7157816001600160a01b0316635ea032af6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6e9190612e3c565b90505b60405163317afabb60e21b8152600481018290526001600160a01b0383169063c5ebeaec90602401600060405180830381600087803b158015611db357600080fd5b505af1158015611dc7573d6000803e3d6000fd5b505050508060d06000828254611ddd9190612e72565b9091555090949350505050565b60008060c960009054906101000a90046001600160a01b03166001600160a01b031663ea6b53286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e40573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111869190612e55565b6001600160a01b038416600090815260cb6020526040812090611e85611dea565b60405163c661065760e01b8152600060048201526001600160a01b03919091169063c661065790602401602060405180830381865afa158015611ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef09190612e55565b90506000611efc611dea565b60405163c661065760e01b8152600160048201526001600160a01b03919091169063c661065790602401602060405180830381865afa158015611f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f679190612e55565b90508483600101541015611fa65760405162461bcd60e51b815260040161070590602080825260049082015263756e303160e01b604082015260600190565b6000611fbb84600001548786600101546125ed565b9050611fc6886115b9565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561200d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120319190612e3c565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209f9190612e3c565b60408051808201909152600080825260208201529091506120be611dea565b6001600160a01b031663095ea7b36120d4611dea565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018c90526044016020604051808303816000875af1158015612121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121459190612d82565b5061214e611dea565b6001600160a01b0316635b36389c8a836040518363ffffffff1660e01b815260040161217b929190612f4e565b60408051808303816000875af1158015612199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bd9190612f62565b506040516370a0823160e01b815230600482015260009084906001600160a01b038916906370a0823190602401602060405180830381865afa158015612207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222b9190612e3c565b6122359190612d6f565b6040516370a0823160e01b815230600482015290915060009084906001600160a01b038916906370a0823190602401602060405180830381865afa158015612281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a59190612e3c565b6122af9190612d6f565b90508a8960010160008282546122c59190612d6f565b9091555050885486908a906000906122de908490612d6f565b909155506000905086821115612308576122f7876127d7565b6123018783612d6f565b9150612342565b612311826127d7565b61231b8288612d6f565b90508060d15461232b9190612e72565b60d1556123388184612d6f565b9250819650600091505b81156123df57612350611dea565b604051630f7c084960e21b8152600160048201526000602482018190526044820185905260648201526001600160a01b039190911690633df02124906084016020604051808303816000875af11580156123ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d29190612e3c565b6123dc9084612e72565b92505b8a8310156124185760405162461bcd60e51b8152600401610705906020808252600490820152633ab7181960e11b604082015260600190565b60405163a9059cbb60e01b81526001600160a01b038e81166004830152602482018590528a169063a9059cbb906044016020604051808303816000875af1158015612467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248b9190612d82565b5060ca546001600160a01b0316156125315760ca60009054906101000a90046001600160a01b03166001600160a01b03166311748de38f858f6040518463ffffffff1660e01b81526004016124fe939291906001600160a01b039390931683526020830191909152604082015260600190565b600060405180830381600087803b15801561251857600080fd5b505af115801561252c573d6000803e3d6000fd5b505050505b604080516001600160a01b038f81168252602082018f905291810183905260608101899052908f16907fa4b627609e711628747558b171b04b9636337afdadac065ee7113fb91eab0b729060800160405180910390a25050505050505050505050505050565b600054610100900460ff166125be5760405162461bcd60e51b815260040161070590612fe2565b610b346129ac565b600054610100900460ff16610b345760405162461bcd60e51b815260040161070590612fe2565b60008080600019858709858702925082811083820303915050806000036126275783828161261d5761261d612ef7565b049250505061269b565b80841161263357600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b60006126ac611dea565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156126f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb9190612e3c565b6001600160a01b0381163b6127835760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610705565b6000805160206130a183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6127bb836129dc565b6000825111806127c85750805b1561099a576111998383612a1c565b60c954604080516326dac0af60e21b815290516000926001600160a01b031691639b6b02bc9160048083019260209291908290030181865afa158015612821573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128459190612e55565b90506000612851611dea565b60405163c661065760e01b8152600160048201526001600160a01b03919091169063c661065790602401602060405180830381865afa158015612898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bc9190612e55565b60405163095ea7b360e01b81526001600160a01b03848116600483015260248201869052919250829182169063095ea7b3906044016020604051808303816000875af1158015612910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129349190612d82565b50604051631b8fec7360e11b8152600481018590526001600160a01b0384169063371fd8e690602401600060405180830381600087803b15801561297757600080fd5b505af115801561298b573d6000803e3d6000fd5b505050508360d060008282546129a19190612d6f565b909155505050505050565b600054610100900460ff166129d35760405162461bcd60e51b815260040161070590612fe2565b610b3433611bd0565b6129e581612716565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061269b83836040518060600160405280602781526020016130c1602791396060600080856001600160a01b031685604051612a599190613051565b600060405180830381855af49150503d8060008114612a94576040519150601f19603f3d011682016040523d82523d6000602084013e612a99565b606091505b5091509150612aaa86838387612ab4565b9695505050505050565b60608315612b23578251600003612b1c576001600160a01b0385163b612b1c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610705565b5081612b2d565b612b2d8383612b35565b949350505050565b815115612b455781518083602001fd5b8060405162461bcd60e51b8152600401610705919061306d565b6001600160a01b03811681146107a257600080fd5b600060208284031215612b8657600080fd5b813561269b81612b5f565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612bd057612bd0612b91565b604052919050565b60008060408385031215612beb57600080fd5b8235612bf681612b5f565b915060208381013567ffffffffffffffff80821115612c1457600080fd5b818601915086601f830112612c2857600080fd5b813581811115612c3a57612c3a612b91565b612c4c601f8201601f19168501612ba7565b91508082528784828501011115612c6257600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408385031215612c9357600080fd5b8235612c9e81612b5f565b91506020830135612cae81612b5f565b809150509250929050565b60008060408385031215612ccc57600080fd5b50508035926020909101359150565b600060208284031215612ced57600080fd5b5035919050565b600080600060608486031215612d0957600080fd5b83359250602084013591506040840135612d2281612b5f565b809150509250925092565b60008060408385031215612d4057600080fd5b8235612d4b81612b5f565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561118657611186612d59565b600060208284031215612d9457600080fd5b8151801515811461269b57600080fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215612e4e57600080fd5b5051919050565b600060208284031215612e6757600080fd5b815161269b81612b5f565b8082018082111561118657611186612d59565b8060005b6002811015611199578151845260209384019390910190600101612e89565b60608101612eb68285612e85565b8260408301529392505050565b60608101612ed18285612e85565b82151560408301529392505050565b808202811582820484141761118657611186612d59565b634e487b7160e01b600052601260045260246000fd5b600082612f1c57612f1c612ef7565b500490565b600082612f3057612f30612ef7565b500690565b600060018201612f4757612f47612d59565b5060010190565b8281526060810161269b6020830184612e85565b600060408284031215612f7457600080fd5b82601f830112612f8357600080fd5b6040516040810181811067ffffffffffffffff82111715612fa657612fa6612b91565b8060405250806040840185811115612fbd57600080fd5b845b81811015612fd7578051835260209283019201612fbf565b509195945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015613048578181015183820152602001613030565b50506000910152565b6000825161306381846020870161302d565b9190910192915050565b602081526000825180602084015261308c81604085016020870161302d565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209ca34722aa5f08604dbc63bdc65e8bcfec9405c0b27f8e2c59c9d0c6425f4fd164736f6c63430008120033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 590,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 593,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1812,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 572,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 887,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14762,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "config",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IConfig)20550"
      },
      {
        "astId": 14765,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "hook",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(LiquidityStakeHook)15997"
      },
      {
        "astId": 14775,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "stakeInfoByStaker",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_struct(StakeInfo)14770_storage)"
      },
      {
        "astId": 14781,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "claimDataByStaker",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14787,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "rewardIntegralFor",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14791,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "rewardBalances",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14795,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "rewardIntegral",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14797,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "totalLoaned2CRVAmount",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 14799,
        "contract": "contracts/LiquidityStake.sol:LiquidityStake",
        "label": "totalBurnSCAmount",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IConfig)20550": {
        "encoding": "inplace",
        "label": "contract IConfig",
        "numberOfBytes": "20"
      },
      "t_contract(LiquidityStakeHook)15997": {
        "encoding": "inplace",
        "label": "contract LiquidityStakeHook",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(StakeInfo)14770_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LiquidityStake.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)14770_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(StakeInfo)14770_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityStake.StakeInfo",
        "members": [
          {
            "astId": 14767,
            "contract": "contracts/LiquidityStake.sol:LiquidityStake",
            "label": "loaned2CRVAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14769,
            "contract": "contracts/LiquidityStake.sol:LiquidityStake",
            "label": "totalSC2CRVLP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}