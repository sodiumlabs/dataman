{
  "address": "0xFaCA20a0078221d42824b78E818fF69a599F71C8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        }
      ],
      "name": "checkIsOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurveStableCoin2CRVPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeRouter",
      "outputs": [
        {
          "internalType": "contract IFeeRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGovToken",
      "outputs": [
        {
          "internalType": "contract IUtilityToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitializedVersion",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityStakeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxOnceExchangeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPRToken",
      "outputs": [
        {
          "internalType": "contract IUtilityToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStableCoinToken",
      "outputs": [
        {
          "internalType": "contract IUtilityToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStableCoins",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUtilityStakeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUtilityToken",
      "outputs": [
        {
          "internalType": "contract IUtilityToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVAMMAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        }
      ],
      "name": "getVAMMStableCoin",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "buyEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "sellEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isMetaGauge",
              "type": "bool"
            }
          ],
          "internalType": "struct IConfig.StableCoinEnabled",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityStake_",
          "type": "address"
        }
      ],
      "name": "initLiquidityStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "name": "initMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakeAddress_",
          "type": "address"
        }
      ],
      "name": "initUtilityStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vammAddress_",
          "type": "address"
        }
      ],
      "name": "initVAMM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFeeRouter",
          "name": "feerouter_",
          "type": "address"
        },
        {
          "internalType": "contract IUtilityToken",
          "name": "utilityToken_",
          "type": "address"
        },
        {
          "internalType": "contract IUtilityToken",
          "name": "govToken_",
          "type": "address"
        },
        {
          "internalType": "contract IUtilityToken",
          "name": "prToken_",
          "type": "address"
        },
        {
          "internalType": "contract IUtilityToken",
          "name": "stableCoinToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxOnceExchangeAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initMarketBuyfee_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initMarketSellfee_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketBuyfee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketSellfee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled_",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "buyFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellFee",
          "type": "uint256"
        }
      ],
      "name": "updateFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxOnceExchangeAmount_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxOnceExchangeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stableCoin_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "canBuy",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canSell",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "gauge_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isMetaGauge",
          "type": "bool"
        }
      ],
      "name": "updateStableCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalPrice",
          "type": "uint256"
        }
      ],
      "name": "vammBuyFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalPrice",
          "type": "uint256"
        }
      ],
      "name": "vammSellFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x43f2d3a4787f07b39e2931cad3facd230aa69661eb0dead71f333fe1d135ca85",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1579026",
    "logsBloom": "0x
    "blockHash": "0xc26ba7603c40298011e04716b1e9756e332910acb32e3c4d1259f03ec1b9d2e6",
    "transactionHash": "0x43f2d3a4787f07b39e2931cad3facd230aa69661eb0dead71f333fe1d135ca85",
    "logs": [],
    "blockNumber": 120227362,
    "cumulativeGasUsed": "1579026",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4f1f45ca5fe8f6515b42ba0264732978",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"checkIsOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveStableCoin2CRVPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRouter\",\"outputs\":[{\"internalType\":\"contract IFeeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovToken\",\"outputs\":[{\"internalType\":\"contract IUtilityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitializedVersion\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityStakeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxOnceExchangeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPRToken\",\"outputs\":[{\"internalType\":\"contract IUtilityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableCoinToken\",\"outputs\":[{\"internalType\":\"contract IUtilityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableCoins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUtilityStakeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUtilityToken\",\"outputs\":[{\"internalType\":\"contract IUtilityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVAMMAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"name\":\"getVAMMStableCoin\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"buyEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sellEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMetaGauge\",\"type\":\"bool\"}],\"internalType\":\"struct IConfig.StableCoinEnabled\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityStake_\",\"type\":\"address\"}],\"name\":\"initLiquidityStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"initMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeAddress_\",\"type\":\"address\"}],\"name\":\"initUtilityStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vammAddress_\",\"type\":\"address\"}],\"name\":\"initVAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeRouter\",\"name\":\"feerouter_\",\"type\":\"address\"},{\"internalType\":\"contract IUtilityToken\",\"name\":\"utilityToken_\",\"type\":\"address\"},{\"internalType\":\"contract IUtilityToken\",\"name\":\"govToken_\",\"type\":\"address\"},{\"internalType\":\"contract IUtilityToken\",\"name\":\"prToken_\",\"type\":\"address\"},{\"internalType\":\"contract IUtilityToken\",\"name\":\"stableCoinToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxOnceExchangeAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initMarketBuyfee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initMarketSellfee_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketBuyfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketSellfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled_\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxOnceExchangeAmount_\",\"type\":\"uint256\"}],\"name\":\"updateMaxOnceExchangeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stableCoin_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canBuy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canSell\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"gauge_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMetaGauge\",\"type\":\"bool\"}],\"name\":\"updateStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"vammBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"vammSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/config/Config.sol\":\"Config\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IUtilityToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IUtilityToken is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x30d63bfb77e99692f375570437cd5d3111ef40ce03542a3b0a4fa4019f9a1b43\",\"license\":\"GPL-3.0\"},\"contracts/config/Config.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IConfig.sol\\\";\\nimport \\\"../IUtilityToken.sol\\\";\\nimport \\\"../feerouter/IFeeRouter.sol\\\";\\nimport \\\"../curve/IPoolFactory.sol\\\";\\nimport \\\"../curve/IPool.sol\\\";\\n\\ncontract Config is IConfig, Initializable, OwnableUpgradeable, UUPSUpgradeable {\\n    // accept stable coins\\n    mapping(address => StableCoinEnabled) private _stableCoinEnabled;\\n    address[] private _stableCoins;\\n\\n    // sell token\\n    IUtilityToken private _utilityToken;\\n\\n    // pr token\\n    IUtilityToken private _prToken;\\n\\n    // stable coin\\n    IUtilityToken private _stableCoinToken;\\n\\n    IUtilityToken private _govToken;\\n\\n    IFeeRouter private _feerouter;\\n\\n    // mint LNCO fee\\n    uint256 public marketBuyfee;\\n\\n    // burn LNCO fee\\n    uint256 public marketSellfee;\\n\\n    // max once exchange amount\\n    // The maximum number of transactions that can be made in a single transaction\\n    // unthinkable bugs caused by large transaction amounts\\n    uint256 private _maxOnceExchangeAmount;\\n\\n    address private _utilityStakeAddress;\\n    address private _liquidityStakeAddress;\\n    address private _vammAddress;\\n    address private _curve2CRVXPoolAddress;\\n    address private _minter;\\n\\n    mapping(address => bool) private _operators;\\n\\n    function initialize(\\n        IFeeRouter feerouter_,\\n        IUtilityToken utilityToken_,\\n        IUtilityToken govToken_,\\n        IUtilityToken prToken_,\\n        IUtilityToken stableCoinToken_,\\n        uint256 maxOnceExchangeAmount_,\\n        uint256 initMarketBuyfee_,\\n        uint256 initMarketSellfee_\\n    ) public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        _transferOwnership(tx.origin);\\n\\n        _feerouter = feerouter_;\\n        _maxOnceExchangeAmount = maxOnceExchangeAmount_;\\n\\n        _utilityToken = utilityToken_;\\n        _prToken = prToken_;\\n        _stableCoinToken = stableCoinToken_;\\n        _govToken = govToken_;\\n\\n        marketBuyfee = initMarketBuyfee_;\\n        marketSellfee = initMarketSellfee_;\\n\\n        _deployCurve2CRVPool();\\n    }\\n\\n    function getInitializedVersion() external view returns (uint8) {\\n        return _getInitializedVersion();\\n    }\\n\\n    function _deployCurve2CRVPool() internal {\\n        _curve2CRVXPoolAddress = IPoolFactory(\\n            address(0xb17b674D9c5CB2e441F8e196a2f048A81355d031)\\n        ).deploy_metapool(\\n                address(0x7f90122BF0700F9E7e1F688fe926940E8839F353),\\n                \\\"LNUSD\\\",\\n                \\\"LNUSD\\\",\\n                address(_stableCoinToken),\\n                100000,\\n                4000000,\\n                1\\n            );\\n    }\\n\\n    function vammBuyFees(uint256 totalPrice) external view returns (uint256) {\\n        if (marketBuyfee == 0) {\\n            return 0;\\n        }\\n        return (totalPrice * marketBuyfee) / 10000000000;\\n    }\\n\\n    function vammSellFees(uint256 totalPrice) external view returns (uint256) {\\n        if (marketSellfee == 0) {\\n            return 0;\\n        }\\n        return (totalPrice * marketSellfee) / 10000000000;\\n    }\\n\\n    function updateFees(uint256 buyFee, uint256 sellFee) external onlyOwner {\\n        marketBuyfee = buyFee;\\n        marketSellfee = sellFee;\\n    }\\n\\n    function updateStableCoin(\\n        address stableCoin_,\\n        bool canBuy,\\n        bool canSell,\\n        address gauge_,\\n        bool isMetaGauge\\n    ) external onlyOwner {\\n        StableCoinEnabled storage stableCoinEnabled = _stableCoinEnabled[\\n            stableCoin_\\n        ];\\n\\n        if (!stableCoinEnabled.exists) {\\n            _stableCoins.push(stableCoin_);\\n            stableCoinEnabled.exists = true;\\n        }\\n\\n        stableCoinEnabled.buyEnabled = canBuy;\\n        stableCoinEnabled.sellEnabled = canSell;\\n        stableCoinEnabled.gauge = gauge_;\\n        stableCoinEnabled.isMetaGauge = isMetaGauge;\\n    }\\n\\n    function updateMaxOnceExchangeAmount(\\n        uint256 maxOnceExchangeAmount_\\n    ) external onlyOwner {\\n        _maxOnceExchangeAmount = maxOnceExchangeAmount_;\\n    }\\n\\n    function getVAMMStableCoin(\\n        address stablecoin\\n    ) external view returns (StableCoinEnabled memory) {\\n        return _stableCoinEnabled[stablecoin];\\n    }\\n\\n    function getMaxOnceExchangeAmount() external view returns (uint256) {\\n        return _maxOnceExchangeAmount;\\n    }\\n\\n    function getFeeRouter() external view returns (IFeeRouter) {\\n        return _feerouter;\\n    }\\n\\n    function getUtilityToken() external view returns (IUtilityToken) {\\n        return _utilityToken;\\n    }\\n\\n    function getPRToken() external view returns (IUtilityToken) {\\n        return _prToken;\\n    }\\n\\n    function getGovToken() external view returns (IUtilityToken) {\\n        return _govToken;\\n    }\\n\\n    function getStableCoinToken() external view returns (IUtilityToken) {\\n        return _stableCoinToken;\\n    }\\n\\n    function getUtilityStakeAddress() external view returns (address) {\\n        return _utilityStakeAddress;\\n    }\\n\\n    function getLiquidityStakeAddress() external view returns (address) {\\n        return _liquidityStakeAddress;\\n    }\\n\\n    function initUtilityStake(address stakeAddress_) external onlyOwner {\\n        require(_utilityStakeAddress == address(0), \\\"already init\\\");\\n        _utilityStakeAddress = stakeAddress_;\\n        _stableCoinToken.transferOwnership(_utilityStakeAddress);\\n    }\\n\\n    function initLiquidityStake(address liquidityStake_) external onlyOwner {\\n        require(_liquidityStakeAddress == address(0), \\\"already init\\\");\\n        _liquidityStakeAddress = liquidityStake_;\\n    }\\n\\n    function initMinter(address minter_) external onlyOwner {\\n        require(_minter == address(0), \\\"already init\\\");\\n        _minter = minter_;\\n        _prToken.transferOwnership(minter_);\\n        _govToken.transferOwnership(minter_);\\n    }\\n\\n    function initVAMM(address vammAddress_) external onlyOwner {\\n        require(_vammAddress == address(0), \\\"already init\\\");\\n        _vammAddress = vammAddress_;\\n        _utilityToken.transferOwnership(_vammAddress);\\n    }\\n\\n    function getMinterAddress() external view returns (address) {\\n        return _minter;\\n    }\\n\\n    function getVAMMAddress() external view returns (address) {\\n        return _vammAddress;\\n    }\\n\\n    function getStableCoins() external view returns (address[] memory) {\\n        return _stableCoins;\\n    }\\n\\n    function getCurveStableCoin2CRVPoolAddress()\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _curve2CRVXPoolAddress;\\n    }\\n\\n    function checkIsOperator(address operator_) external view returns (bool) {\\n        return _operators[operator_];\\n    }\\n\\n    function setOperator(address operator_, bool enabled_) external onlyOwner {\\n        _operators[operator_] = enabled_;\\n    }\\n\\n    /// upgrade --- ///\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0xa79febc3949f6c2e11df31f83d54b4bf81acbc2a70f1916b1cc7517d2a6ba0a9\",\"license\":\"UNLICENSED\"},\"contracts/config/IConfig.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../IUtilityToken.sol\\\";\\nimport \\\"../feerouter/IFeeRouter.sol\\\";\\n\\ninterface IConfig {\\n    struct StableCoinEnabled {\\n        bool buyEnabled;\\n        bool sellEnabled;\\n        bool exists;\\n        address gauge;\\n        bool isMetaGauge;\\n    }\\n\\n    function vammBuyFees(uint256 totalPrice) external view returns (uint256);\\n\\n    function vammSellFees(uint256 totalPrice) external view returns (uint256);\\n\\n    function getVAMMStableCoin(\\n        address stableCoin\\n    ) external view returns (StableCoinEnabled memory);\\n\\n    function getStableCoins() external view returns (address[] memory);\\n\\n    function getMaxOnceExchangeAmount() external view returns (uint256);\\n\\n    function getFeeRouter() external view returns (IFeeRouter);\\n\\n    function getUtilityToken() external view returns (IUtilityToken);\\n\\n    function getPRToken() external view returns (IUtilityToken);\\n\\n    function getGovToken() external view returns (IUtilityToken);\\n\\n    function getStableCoinToken() external view returns (IUtilityToken);\\n\\n    function getUtilityStakeAddress() external view returns (address);\\n\\n    function getLiquidityStakeAddress() external view returns (address);\\n\\n    function getVAMMAddress() external view returns (address);\\n\\n    function getMinterAddress() external view returns (address);\\n\\n    function getCurveStableCoin2CRVPoolAddress()\\n        external\\n        view\\n        returns (address);\\n\\n    function checkIsOperator(address _operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x850d941ca2c41850407a30ecc191f5d73efda270e18d4a73345ea7ce05185f37\",\"license\":\"UNLICENSED\"},\"contracts/curve/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n// https://github.com/curvefi/curve-contract/blob/master/contracts/pool-templates/base/SwapTemplateBase.vy\\ninterface ICurve2CRVPool is IERC20Metadata {\\n    function calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 min_amount_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n}\\n\\ninterface ICurveMetaPool is IERC20Metadata {\\n    function calc_withdraw_one_coin(\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function coins(uint256) external view returns (address);\\n\\n    function balances(uint256) external view returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 min_amount_received,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _burn_amount,\\n        uint256[2] memory _min_amounts\\n    ) external returns (uint256[2] memory);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function rewards_receiver() external view returns (address);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd81844dbda8e8bf5b403701708e49386fee7921c16a3a6931a7d9dbfa51e00c5\",\"license\":\"GPL-3.0\"},\"contracts/curve/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n// https://github.com/curvefi/curve-contract/blob/master/contracts/pool-templates/base/SwapTemplateBase.vy\\ninterface IPoolFactory {\\n    function deploy_metapool(\\n        address _base_pool,\\n        string memory _name,\\n        string memory _symbol,\\n        address _coin,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _implementation_idx\\n    ) external returns (address);\\n\\n    function metapool_implementations(\\n        address _base_pool\\n    ) external view returns (address[10] memory);\\n\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x4f6d78d1e2560870ca3ec176d0e325964874afd8a77cd7eae178385f417d517d\",\"license\":\"GPL-3.0\"},\"contracts/feerouter/IFeeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IFeeRouter {\\n    function colletFees() external;\\n\\n    function getDAOVault() external view returns (address);\\n\\n    function getGewardVault() external view returns (address);\\n\\n    function getPercentForGeward() external view returns (uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x6b52bdeb8b97c72a36e6abab4897168393c9a3feb6125bade339fc9741e4cc34\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051611b8e61004c60003960008181610840015281816108800152818161091f0152818161095f0152610a2a0152611b8e6000f3fe6080604052600436106101f85760003560e01c80638f8935d01161010d578063cbaa2e22116100a0578063e3fbec781161006f578063e3fbec7814610693578063e686ae8c146106b1578063ea6b5328146106c7578063ea9c5e0d146106e5578063f2fde38b1461070357600080fd5b8063cbaa2e2214610613578063cf0cccae14610633578063d11f3a5314610651578063e21959041461067157600080fd5b8063abc50505116100dc578063abc50505146105a6578063b3c65015146105bb578063c15092cc146105dd578063cb9ca959146105fd57600080fd5b80638f8935d01461052a57806393e5d42a1461054a5780639b6b02bc14610568578063a890eec11461058657600080fd5b80634f1ef286116101905780636db794371161015f5780636db7943714610497578063715018a6146104b75780637403c6cd146104cc57806381caaaf3146104ec5780638da5cb5b1461050c57600080fd5b80634f1ef28614610421578063522e37281461043457806352d1902d14610462578063558a72971461047757600080fd5b8063316cb88a116101cc578063316cb88a146103a7578063337ed93a146103c55780633659cfe6146103e357806343d9d6dc1461040357600080fd5b8062626679146101fd5780631f8e5f911461023457806328fd151f1461027d5780632f3d081414610385575b600080fd5b34801561020957600080fd5b5060cb546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561024057600080fd5b5061026d61024f3660046115df565b6001600160a01b0316600090815260d8602052604090205460ff1690565b604051901515815260200161022b565b34801561028957600080fd5b506103376102983660046115df565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b03908116600090815260c96020908152604091829020825160a081018452905460ff80821615158352610100820481161515938301939093526201000081048316151593820193909352630100000083049093166060840152600160b81b909104161515608082015290565b60405161022b91908151151581526020808301511515908201526040808301511515908201526060808301516001600160a01b03169082015260809182015115159181019190915260a00190565b34801561039157600080fd5b506103a56103a03660046115df565b610723565b005b3480156103b357600080fd5b5060cc546001600160a01b0316610217565b3480156103d157600080fd5b5060d4546001600160a01b0316610217565b3480156103ef57600080fd5b506103a56103fe3660046115df565b610836565b34801561040f57600080fd5b5060ce546001600160a01b0316610217565b6103a561042f366004611612565b610915565b34801561044057600080fd5b5061045461044f3660046116d6565b6109e5565b60405190815260200161022b565b34801561046e57600080fd5b50610454610a1d565b34801561048357600080fd5b506103a5610492366004611704565b610ad0565b3480156104a357600080fd5b506103a56104b2366004611739565b610b03565b3480156104c357600080fd5b506103a5610b16565b3480156104d857600080fd5b506103a56104e736600461175b565b610b2a565b3480156104f857600080fd5b506104546105073660046116d6565b610cc1565b34801561051857600080fd5b506033546001600160a01b0316610217565b34801561053657600080fd5b506103a56105453660046116d6565b610ce9565b34801561055657600080fd5b5060d7546001600160a01b0316610217565b34801561057457600080fd5b5060d5546001600160a01b0316610217565b34801561059257600080fd5b506103a56105a13660046115df565b610cf6565b3480156105b257600080fd5b5060d254610454565b3480156105c757600080fd5b5060005460405160ff909116815260200161022b565b3480156105e957600080fd5b506103a56105f83660046115df565b610d70565b34801561060957600080fd5b5061045460d15481565b34801561061f57600080fd5b506103a561062e3660046117e5565b610dc3565b34801561063f57600080fd5b5060d3546001600160a01b0316610217565b34801561065d57600080fd5b506103a561066c3660046115df565b610eac565b34801561067d57600080fd5b50610686610f26565b60405161022b919061184e565b34801561069f57600080fd5b5060cd546001600160a01b0316610217565b3480156106bd57600080fd5b5061045460d05481565b3480156106d357600080fd5b5060d6546001600160a01b0316610217565b3480156106f157600080fd5b5060cf546001600160a01b0316610217565b34801561070f57600080fd5b506103a561071e3660046115df565b610f88565b61072b610ffe565b60d7546001600160a01b03161561075d5760405162461bcd60e51b81526004016107549061189b565b60405180910390fd5b60d780546001600160a01b0319166001600160a01b0383811691821790925560cc5460405163f2fde38b60e01b815260048101929092529091169063f2fde38b90602401600060405180830381600087803b1580156107bb57600080fd5b505af11580156107cf573d6000803e3d6000fd5b505060ce5460405163f2fde38b60e01b81526001600160a01b038581166004830152909116925063f2fde38b91506024015b600060405180830381600087803b15801561081b57600080fd5b505af115801561082f573d6000803e3d6000fd5b5050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361087e5760405162461bcd60e51b8152600401610754906118c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108c7600080516020611b12833981519152546001600160a01b031690565b6001600160a01b0316146108ed5760405162461bcd60e51b81526004016107549061190d565b6108f681611058565b6040805160008082526020820190925261091291839190611060565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361095d5760405162461bcd60e51b8152600401610754906118c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109a6600080516020611b12833981519152546001600160a01b031690565b6001600160a01b0316146109cc5760405162461bcd60e51b81526004016107549061190d565b6109d582611058565b6109e182826001611060565b5050565b600060d1546000036109f957506000919050565b6402540be40060d15483610a0d9190611959565b610a17919061197e565b92915050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610abd5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610754565b50600080516020611b1283398151915290565b610ad8610ffe565b6001600160a01b0391909116600090815260d860205260409020805460ff1916911515919091179055565b610b0b610ffe565b60d09190915560d155565b610b1e610ffe565b610b2860006111d0565b565b600054610100900460ff1615808015610b4a5750600054600160ff909116105b80610b645750303b158015610b64575060005460ff166001145b610bc75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610754565b6000805460ff191660011790558015610bea576000805461ff0019166101001790555b610bf2611222565b610bfa611251565b610c03326111d0565b60cf80546001600160a01b03199081166001600160a01b038c81169190911790925560d286905560cb805482168b841617905560cc8054821689841617905560cd8054821688841617905560ce805490911691891691909117905560d083905560d1829055610c70611278565b8015610cb6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b600060d054600003610cd557506000919050565b6402540be40060d05483610a0d9190611959565b610cf1610ffe565b60d255565b610cfe610ffe565b60d5546001600160a01b031615610d275760405162461bcd60e51b81526004016107549061189b565b60d580546001600160a01b0319166001600160a01b0383811691821790925560cb5460405163f2fde38b60e01b815260048101929092529091169063f2fde38b90602401610801565b610d78610ffe565b60d4546001600160a01b031615610da15760405162461bcd60e51b81526004016107549061189b565b60d480546001600160a01b0319166001600160a01b0392909216919091179055565b610dcb610ffe565b6001600160a01b038516600090815260c960205260409020805462010000900460ff16610e4f5760ca80546001810182556000919091527f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee10180546001600160a01b0388166001600160a01b0319909116179055805462ff00001916620100001781555b805461ffff191694151561ff0019169490941761010093151593909302929092176301000000600160c01b03191663010000006001600160a01b03929092169190910260ff60b81b191617600160b81b9115159190910217905550565b610eb4610ffe565b60d3546001600160a01b031615610edd5760405162461bcd60e51b81526004016107549061189b565b60d380546001600160a01b0319166001600160a01b0383811691821790925560cd5460405163f2fde38b60e01b815260048101929092529091169063f2fde38b90602401610801565b606060ca805480602002602001604051908101604052809291908181526020018280548015610f7e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f60575b5050505050905090565b610f90610ffe565b6001600160a01b038116610ff55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610754565b610912816111d0565b6033546001600160a01b03163314610b285760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610754565b610912610ffe565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156110985761109383611344565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156110f2575060408051601f3d908101601f191682019092526110ef918101906119a0565b60015b6111555760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610754565b600080516020611b1283398151915281146111c45760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610754565b506110938383836113e0565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166112495760405162461bcd60e51b8152600401610754906119b9565b610b2861140b565b600054610100900460ff16610b285760405162461bcd60e51b8152600401610754906119b9565b60cd5460405163de7fe3bf60e01b815273b17b674d9c5cb2e441f8e196a2f048a81355d0319163de7fe3bf916112df91737f90122bf0700f9e7e1f688fe926940e8839f353916001600160a01b0390911690620186a090623d090090600190600401611a04565b6020604051808303816000875af11580156112fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113229190611a81565b60d680546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381163b6113b15760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610754565b600080516020611b1283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6113e98361143b565b6000825111806113f65750805b1561109357611405838361147b565b50505050565b600054610100900460ff166114325760405162461bcd60e51b8152600401610754906119b9565b610b28336111d0565b61144481611344565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606114a08383604051806060016040528060278152602001611b32602791396114a7565b9392505050565b6060600080856001600160a01b0316856040516114c49190611ac2565b600060405180830381855af49150503d80600081146114ff576040519150601f19603f3d011682016040523d82523d6000602084013e611504565b606091505b50915091506115158683838761151f565b9695505050505050565b6060831561158e578251600003611587576001600160a01b0385163b6115875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610754565b5081611598565b61159883836115a0565b949350505050565b8151156115b05781518083602001fd5b8060405162461bcd60e51b81526004016107549190611ade565b6001600160a01b038116811461091257600080fd5b6000602082840312156115f157600080fd5b81356114a0816115ca565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561162557600080fd5b8235611630816115ca565b9150602083013567ffffffffffffffff8082111561164d57600080fd5b818501915085601f83011261166157600080fd5b813581811115611673576116736115fc565b604051601f8201601f19908116603f0116810190838211818310171561169b5761169b6115fc565b816040528281528860208487010111156116b457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156116e857600080fd5b5035919050565b803580151581146116ff57600080fd5b919050565b6000806040838503121561171757600080fd5b8235611722816115ca565b9150611730602084016116ef565b90509250929050565b6000806040838503121561174c57600080fd5b50508035926020909101359150565b600080600080600080600080610100898b03121561177857600080fd5b8835611783816115ca565b97506020890135611793816115ca565b965060408901356117a3816115ca565b955060608901356117b3816115ca565b945060808901356117c3816115ca565b979a969950949793969560a0850135955060c08501359460e001359350915050565b600080600080600060a086880312156117fd57600080fd5b8535611808816115ca565b9450611816602087016116ef565b9350611824604087016116ef565b92506060860135611834816115ca565b9150611842608087016116ef565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b8181101561188f5783516001600160a01b03168352928401929184019160010161186a565b50909695505050505050565b6020808252600c908201526b185b1c9958591e481a5b9a5d60a21b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b8082028115828204841417610a1757634e487b7160e01b600052601160045260246000fd5b60008261199b57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156119b257600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03868116825260e0602083018190526005908301526413139554d160da1b61010083015260009061012083018381036040850152611a5b81600581526413139554d160da1b602082015260400190565b9790911660608401525050608081019390935260a083019190915260c090910152919050565b600060208284031215611a9357600080fd5b81516114a0816115ca565b60005b83811015611ab9578181015183820152602001611aa1565b50506000910152565b60008251611ad4818460208701611a9e565b9190910192915050565b6020815260008251806020840152611afd816040850160208701611a9e565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220117c66f913209a7c88374ec0718dca4a78fef04540face920f6c1e7b647e05a264736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101f85760003560e01c80638f8935d01161010d578063cbaa2e22116100a0578063e3fbec781161006f578063e3fbec7814610693578063e686ae8c146106b1578063ea6b5328146106c7578063ea9c5e0d146106e5578063f2fde38b1461070357600080fd5b8063cbaa2e2214610613578063cf0cccae14610633578063d11f3a5314610651578063e21959041461067157600080fd5b8063abc50505116100dc578063abc50505146105a6578063b3c65015146105bb578063c15092cc146105dd578063cb9ca959146105fd57600080fd5b80638f8935d01461052a57806393e5d42a1461054a5780639b6b02bc14610568578063a890eec11461058657600080fd5b80634f1ef286116101905780636db794371161015f5780636db7943714610497578063715018a6146104b75780637403c6cd146104cc57806381caaaf3146104ec5780638da5cb5b1461050c57600080fd5b80634f1ef28614610421578063522e37281461043457806352d1902d14610462578063558a72971461047757600080fd5b8063316cb88a116101cc578063316cb88a146103a7578063337ed93a146103c55780633659cfe6146103e357806343d9d6dc1461040357600080fd5b8062626679146101fd5780631f8e5f911461023457806328fd151f1461027d5780632f3d081414610385575b600080fd5b34801561020957600080fd5b5060cb546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561024057600080fd5b5061026d61024f3660046115df565b6001600160a01b0316600090815260d8602052604090205460ff1690565b604051901515815260200161022b565b34801561028957600080fd5b506103376102983660046115df565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b03908116600090815260c96020908152604091829020825160a081018452905460ff80821615158352610100820481161515938301939093526201000081048316151593820193909352630100000083049093166060840152600160b81b909104161515608082015290565b60405161022b91908151151581526020808301511515908201526040808301511515908201526060808301516001600160a01b03169082015260809182015115159181019190915260a00190565b34801561039157600080fd5b506103a56103a03660046115df565b610723565b005b3480156103b357600080fd5b5060cc546001600160a01b0316610217565b3480156103d157600080fd5b5060d4546001600160a01b0316610217565b3480156103ef57600080fd5b506103a56103fe3660046115df565b610836565b34801561040f57600080fd5b5060ce546001600160a01b0316610217565b6103a561042f366004611612565b610915565b34801561044057600080fd5b5061045461044f3660046116d6565b6109e5565b60405190815260200161022b565b34801561046e57600080fd5b50610454610a1d565b34801561048357600080fd5b506103a5610492366004611704565b610ad0565b3480156104a357600080fd5b506103a56104b2366004611739565b610b03565b3480156104c357600080fd5b506103a5610b16565b3480156104d857600080fd5b506103a56104e736600461175b565b610b2a565b3480156104f857600080fd5b506104546105073660046116d6565b610cc1565b34801561051857600080fd5b506033546001600160a01b0316610217565b34801561053657600080fd5b506103a56105453660046116d6565b610ce9565b34801561055657600080fd5b5060d7546001600160a01b0316610217565b34801561057457600080fd5b5060d5546001600160a01b0316610217565b34801561059257600080fd5b506103a56105a13660046115df565b610cf6565b3480156105b257600080fd5b5060d254610454565b3480156105c757600080fd5b5060005460405160ff909116815260200161022b565b3480156105e957600080fd5b506103a56105f83660046115df565b610d70565b34801561060957600080fd5b5061045460d15481565b34801561061f57600080fd5b506103a561062e3660046117e5565b610dc3565b34801561063f57600080fd5b5060d3546001600160a01b0316610217565b34801561065d57600080fd5b506103a561066c3660046115df565b610eac565b34801561067d57600080fd5b50610686610f26565b60405161022b919061184e565b34801561069f57600080fd5b5060cd546001600160a01b0316610217565b3480156106bd57600080fd5b5061045460d05481565b3480156106d357600080fd5b5060d6546001600160a01b0316610217565b3480156106f157600080fd5b5060cf546001600160a01b0316610217565b34801561070f57600080fd5b506103a561071e3660046115df565b610f88565b61072b610ffe565b60d7546001600160a01b03161561075d5760405162461bcd60e51b81526004016107549061189b565b60405180910390fd5b60d780546001600160a01b0319166001600160a01b0383811691821790925560cc5460405163f2fde38b60e01b815260048101929092529091169063f2fde38b90602401600060405180830381600087803b1580156107bb57600080fd5b505af11580156107cf573d6000803e3d6000fd5b505060ce5460405163f2fde38b60e01b81526001600160a01b038581166004830152909116925063f2fde38b91506024015b600060405180830381600087803b15801561081b57600080fd5b505af115801561082f573d6000803e3d6000fd5b5050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361087e5760405162461bcd60e51b8152600401610754906118c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108c7600080516020611b12833981519152546001600160a01b031690565b6001600160a01b0316146108ed5760405162461bcd60e51b81526004016107549061190d565b6108f681611058565b6040805160008082526020820190925261091291839190611060565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361095d5760405162461bcd60e51b8152600401610754906118c1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109a6600080516020611b12833981519152546001600160a01b031690565b6001600160a01b0316146109cc5760405162461bcd60e51b81526004016107549061190d565b6109d582611058565b6109e182826001611060565b5050565b600060d1546000036109f957506000919050565b6402540be40060d15483610a0d9190611959565b610a17919061197e565b92915050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610abd5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610754565b50600080516020611b1283398151915290565b610ad8610ffe565b6001600160a01b0391909116600090815260d860205260409020805460ff1916911515919091179055565b610b0b610ffe565b60d09190915560d155565b610b1e610ffe565b610b2860006111d0565b565b600054610100900460ff1615808015610b4a5750600054600160ff909116105b80610b645750303b158015610b64575060005460ff166001145b610bc75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610754565b6000805460ff191660011790558015610bea576000805461ff0019166101001790555b610bf2611222565b610bfa611251565b610c03326111d0565b60cf80546001600160a01b03199081166001600160a01b038c81169190911790925560d286905560cb805482168b841617905560cc8054821689841617905560cd8054821688841617905560ce805490911691891691909117905560d083905560d1829055610c70611278565b8015610cb6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b600060d054600003610cd557506000919050565b6402540be40060d05483610a0d9190611959565b610cf1610ffe565b60d255565b610cfe610ffe565b60d5546001600160a01b031615610d275760405162461bcd60e51b81526004016107549061189b565b60d580546001600160a01b0319166001600160a01b0383811691821790925560cb5460405163f2fde38b60e01b815260048101929092529091169063f2fde38b90602401610801565b610d78610ffe565b60d4546001600160a01b031615610da15760405162461bcd60e51b81526004016107549061189b565b60d480546001600160a01b0319166001600160a01b0392909216919091179055565b610dcb610ffe565b6001600160a01b038516600090815260c960205260409020805462010000900460ff16610e4f5760ca80546001810182556000919091527f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee10180546001600160a01b0388166001600160a01b0319909116179055805462ff00001916620100001781555b805461ffff191694151561ff0019169490941761010093151593909302929092176301000000600160c01b03191663010000006001600160a01b03929092169190910260ff60b81b191617600160b81b9115159190910217905550565b610eb4610ffe565b60d3546001600160a01b031615610edd5760405162461bcd60e51b81526004016107549061189b565b60d380546001600160a01b0319166001600160a01b0383811691821790925560cd5460405163f2fde38b60e01b815260048101929092529091169063f2fde38b90602401610801565b606060ca805480602002602001604051908101604052809291908181526020018280548015610f7e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f60575b5050505050905090565b610f90610ffe565b6001600160a01b038116610ff55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610754565b610912816111d0565b6033546001600160a01b03163314610b285760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610754565b610912610ffe565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156110985761109383611344565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156110f2575060408051601f3d908101601f191682019092526110ef918101906119a0565b60015b6111555760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610754565b600080516020611b1283398151915281146111c45760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610754565b506110938383836113e0565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166112495760405162461bcd60e51b8152600401610754906119b9565b610b2861140b565b600054610100900460ff16610b285760405162461bcd60e51b8152600401610754906119b9565b60cd5460405163de7fe3bf60e01b815273b17b674d9c5cb2e441f8e196a2f048a81355d0319163de7fe3bf916112df91737f90122bf0700f9e7e1f688fe926940e8839f353916001600160a01b0390911690620186a090623d090090600190600401611a04565b6020604051808303816000875af11580156112fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113229190611a81565b60d680546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381163b6113b15760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610754565b600080516020611b1283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6113e98361143b565b6000825111806113f65750805b1561109357611405838361147b565b50505050565b600054610100900460ff166114325760405162461bcd60e51b8152600401610754906119b9565b610b28336111d0565b61144481611344565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606114a08383604051806060016040528060278152602001611b32602791396114a7565b9392505050565b6060600080856001600160a01b0316856040516114c49190611ac2565b600060405180830381855af49150503d80600081146114ff576040519150601f19603f3d011682016040523d82523d6000602084013e611504565b606091505b50915091506115158683838761151f565b9695505050505050565b6060831561158e578251600003611587576001600160a01b0385163b6115875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610754565b5081611598565b61159883836115a0565b949350505050565b8151156115b05781518083602001fd5b8060405162461bcd60e51b81526004016107549190611ade565b6001600160a01b038116811461091257600080fd5b6000602082840312156115f157600080fd5b81356114a0816115ca565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561162557600080fd5b8235611630816115ca565b9150602083013567ffffffffffffffff8082111561164d57600080fd5b818501915085601f83011261166157600080fd5b813581811115611673576116736115fc565b604051601f8201601f19908116603f0116810190838211818310171561169b5761169b6115fc565b816040528281528860208487010111156116b457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156116e857600080fd5b5035919050565b803580151581146116ff57600080fd5b919050565b6000806040838503121561171757600080fd5b8235611722816115ca565b9150611730602084016116ef565b90509250929050565b6000806040838503121561174c57600080fd5b50508035926020909101359150565b600080600080600080600080610100898b03121561177857600080fd5b8835611783816115ca565b97506020890135611793816115ca565b965060408901356117a3816115ca565b955060608901356117b3816115ca565b945060808901356117c3816115ca565b979a969950949793969560a0850135955060c08501359460e001359350915050565b600080600080600060a086880312156117fd57600080fd5b8535611808816115ca565b9450611816602087016116ef565b9350611824604087016116ef565b92506060860135611834816115ca565b9150611842608087016116ef565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b8181101561188f5783516001600160a01b03168352928401929184019160010161186a565b50909695505050505050565b6020808252600c908201526b185b1c9958591e481a5b9a5d60a21b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b8082028115828204841417610a1757634e487b7160e01b600052601160045260246000fd5b60008261199b57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156119b257600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03868116825260e0602083018190526005908301526413139554d160da1b61010083015260009061012083018381036040850152611a5b81600581526413139554d160da1b602082015260400190565b9790911660608401525050608081019390935260a083019190915260c090910152919050565b600060208284031215611a9357600080fd5b81516114a0816115ca565b60005b83811015611ab9578181015183820152602001611aa1565b50506000910152565b60008251611ad4818460208701611a9e565b9190910192915050565b6020815260008251806020840152611afd816040850160208701611a9e565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220117c66f913209a7c88374ec0718dca4a78fef04540face920f6c1e7b647e05a264736f6c63430008120033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 590,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 593,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1812,
        "contract": "contracts/config/Config.sol:Config",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/config/Config.sol:Config",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 572,
        "contract": "contracts/config/Config.sol:Config",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 887,
        "contract": "contracts/config/Config.sol:Config",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19887,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_stableCoinEnabled",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_struct(StableCoinEnabled)20454_storage)"
      },
      {
        "astId": 19890,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_stableCoins",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 19893,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_utilityToken",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IUtilityToken)14596"
      },
      {
        "astId": 19896,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_prToken",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IUtilityToken)14596"
      },
      {
        "astId": 19899,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_stableCoinToken",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(IUtilityToken)14596"
      },
      {
        "astId": 19902,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_govToken",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IUtilityToken)14596"
      },
      {
        "astId": 19905,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_feerouter",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IFeeRouter)23517"
      },
      {
        "astId": 19907,
        "contract": "contracts/config/Config.sol:Config",
        "label": "marketBuyfee",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 19909,
        "contract": "contracts/config/Config.sol:Config",
        "label": "marketSellfee",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 19911,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_maxOnceExchangeAmount",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 19913,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_utilityStakeAddress",
        "offset": 0,
        "slot": "211",
        "type": "t_address"
      },
      {
        "astId": 19915,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_liquidityStakeAddress",
        "offset": 0,
        "slot": "212",
        "type": "t_address"
      },
      {
        "astId": 19917,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_vammAddress",
        "offset": 0,
        "slot": "213",
        "type": "t_address"
      },
      {
        "astId": 19919,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_curve2CRVXPoolAddress",
        "offset": 0,
        "slot": "214",
        "type": "t_address"
      },
      {
        "astId": 19921,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_minter",
        "offset": 0,
        "slot": "215",
        "type": "t_address"
      },
      {
        "astId": 19925,
        "contract": "contracts/config/Config.sol:Config",
        "label": "_operators",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFeeRouter)23517": {
        "encoding": "inplace",
        "label": "contract IFeeRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUtilityToken)14596": {
        "encoding": "inplace",
        "label": "contract IUtilityToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(StableCoinEnabled)20454_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IConfig.StableCoinEnabled)",
        "numberOfBytes": "32",
        "value": "t_struct(StableCoinEnabled)20454_storage"
      },
      "t_struct(StableCoinEnabled)20454_storage": {
        "encoding": "inplace",
        "label": "struct IConfig.StableCoinEnabled",
        "members": [
          {
            "astId": 20445,
            "contract": "contracts/config/Config.sol:Config",
            "label": "buyEnabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20447,
            "contract": "contracts/config/Config.sol:Config",
            "label": "sellEnabled",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20449,
            "contract": "contracts/config/Config.sol:Config",
            "label": "exists",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20451,
            "contract": "contracts/config/Config.sol:Config",
            "label": "gauge",
            "offset": 3,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20453,
            "contract": "contracts/config/Config.sol:Config",
            "label": "isMetaGauge",
            "offset": 23,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}