{
  "address": "0xb81e71B57cDcbBFb4695f52af4b7e7c9379F620C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ownerCutPerMillion",
          "type": "uint256"
        }
      ],
      "name": "ChangedOwnerCutPerMillion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "OrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "productId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "priceInWeiForUnit",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IMarketplace.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "OrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSellout",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payment",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentTotal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "OrderSellout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPriceInWeiForUnit",
          "type": "uint256"
        }
      ],
      "name": "OrderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECENT_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "productId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayableAmount",
          "type": "uint256"
        }
      ],
      "name": "autoBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "productId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "neededAmount",
          "type": "uint256"
        }
      ],
      "name": "autoBuyPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "execOrderIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "execOrderAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "poolBuyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolBuyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "needTotalPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMarketplace.AutoBuyFixStack2deepReturns",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInWeiForUnit",
          "type": "uint256"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "productId",
          "type": "bytes32"
        }
      ],
      "name": "getProductLowestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfig",
          "name": "_config",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orderById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "priceInWeiForUnit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerCutPerMillion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ownerCutPerMillion",
          "type": "uint256"
        }
      ],
      "name": "setOwnerCutPerMillion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceInWeiForUnit",
          "type": "uint256"
        }
      ],
      "name": "updateOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x877421341378ff9490ea6cadc4421288785e43542a8af3e0e08c578a7b92eda5",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "3578702",
    "logsBloom": "0x
    "blockHash": "0x1cb85c485139880dd0f92a41e46f27cf1414ed6c90f71284c85992fdfe065d44",
    "transactionHash": "0x877421341378ff9490ea6cadc4421288785e43542a8af3e0e08c578a7b92eda5",
    "logs": [],
    "blockNumber": 120227543,
    "cumulativeGasUsed": "3578702",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4f1f45ca5fe8f6515b42ba0264732978",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangedOwnerCutPerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceInWeiForUnit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IMarketplace.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSellout\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"OrderSellout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceInWeiForUnit\",\"type\":\"uint256\"}],\"name\":\"OrderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECENT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayableAmount\",\"type\":\"uint256\"}],\"name\":\"autoBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"neededAmount\",\"type\":\"uint256\"}],\"name\":\"autoBuyPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"execOrderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"execOrderAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"poolBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBuyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needTotalPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IMarketplace.AutoBuyFixStack2deepReturns\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInWeiForUnit\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"getProductLowestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceInWeiForUnit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setOwnerCutPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInWeiForUnit\",\"type\":\"uint256\"}],\"name\":\"updateOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Will pass to onERC115Batch5Received\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/game/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x10d677119c17bf67ce9ba5edcfbf45ae9f086296fd37f1ccbf533344b71e6951\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1561a6950b1aaa504c8f81b7d46bccfa77ccd10de3eb865cf34b1acd5ad505e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IUtilityToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IUtilityToken is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x30d63bfb77e99692f375570437cd5d3111ef40ce03542a3b0a4fa4019f9a1b43\",\"license\":\"GPL-3.0\"},\"contracts/config/IConfig.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../IUtilityToken.sol\\\";\\nimport \\\"../feerouter/IFeeRouter.sol\\\";\\n\\ninterface IConfig {\\n    struct StableCoinEnabled {\\n        bool buyEnabled;\\n        bool sellEnabled;\\n        bool exists;\\n        address gauge;\\n        bool isMetaGauge;\\n    }\\n\\n    function vammBuyFees(uint256 totalPrice) external view returns (uint256);\\n\\n    function vammSellFees(uint256 totalPrice) external view returns (uint256);\\n\\n    function getVAMMStableCoin(\\n        address stableCoin\\n    ) external view returns (StableCoinEnabled memory);\\n\\n    function getStableCoins() external view returns (address[] memory);\\n\\n    function getMaxOnceExchangeAmount() external view returns (uint256);\\n\\n    function getFeeRouter() external view returns (IFeeRouter);\\n\\n    function getUtilityToken() external view returns (IUtilityToken);\\n\\n    function getPRToken() external view returns (IUtilityToken);\\n\\n    function getGovToken() external view returns (IUtilityToken);\\n\\n    function getStableCoinToken() external view returns (IUtilityToken);\\n\\n    function getUtilityStakeAddress() external view returns (address);\\n\\n    function getLiquidityStakeAddress() external view returns (address);\\n\\n    function getVAMMAddress() external view returns (address);\\n\\n    function getMinterAddress() external view returns (address);\\n\\n    function getCurveStableCoin2CRVPoolAddress()\\n        external\\n        view\\n        returns (address);\\n\\n    function checkIsOperator(address _operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x850d941ca2c41850407a30ecc191f5d73efda270e18d4a73345ea7ce05185f37\",\"license\":\"UNLICENSED\"},\"contracts/feerouter/IFeeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IFeeRouter {\\n    function colletFees() external;\\n\\n    function getDAOVault() external view returns (address);\\n\\n    function getGewardVault() external view returns (address);\\n\\n    function getPercentForGeward() external view returns (uint256);\\n\\n    function getTokens() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x6b52bdeb8b97c72a36e6abab4897168393c9a3feb6125bade339fc9741e4cc34\",\"license\":\"GPL-3.0\"},\"contracts/feerouter/IWithdrawFees.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface IWithdrawFees {\\n    function withdrawFees() external;\\n}\\n\",\"keccak256\":\"0x9220ee61576c0c070c7228387d7a8e41e8c29107d13792e8babe94d5488149be\",\"license\":\"GPL-3.0\"},\"contracts/game/IGameNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\ninterface IGameNFT {\\n    event Bridge2GameChain(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] tokenIds,\\n        uint256[] values\\n    );\\n\\n    event Bridge2PublicChain(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] tokenIds,\\n        uint256[] values\\n    );\\n\\n    function getItemId(uint256 tokenId) external view returns (uint8, uint256);\\n\\n    function safeBatchBridge2PublicChainFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function batchMintByERC20(\\n        address to,\\n        address[] memory tokenAddresss,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function safeBatchBridge2GameFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa60e20c780b9f8327164534069b4764601a67bcbe844dc05b82348d33aeb196a\",\"license\":\"GPL-3.0\"},\"contracts/game/IMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IMarketplace is IERC1155ReceiverUpgradeable {\\n    struct Order {\\n        uint256 id;\\n        address seller;\\n        uint256 tokenId;\\n        uint256 amount;\\n        address nft;\\n        uint256 priceInWeiForUnit;\\n    }\\n\\n    struct AutoBuyFixStack2deep {\\n        uint256 poolBuyAmount;\\n        uint256 poolBuyPrice;\\n        uint256 totalPrice;\\n        uint256 index;\\n    }\\n\\n    struct AutoBuyFixStack2deepReturns {\\n        uint256[] execOrderIds;\\n        uint256[] execOrderAmounts;\\n        uint256 poolBuyAmount;\\n        uint256 poolBuyPrice;\\n        uint256 needTotalPrice;\\n    }\\n\\n    event OrderCreated(uint256 id, bytes32 productId, Order order);\\n\\n    event OrderCanceled(uint256 id);\\n\\n    event OrderUpdated(uint256 id, uint256 newPriceInWeiForUnit);\\n\\n    event OrderSellout(\\n        uint256 id,\\n        uint256 amount,\\n        bool isSellout,\\n        address payment,\\n        address recipient,\\n        uint256 paymentTotal,\\n        uint256 fees\\n    );\\n\\n    event ChangedOwnerCutPerMillion(uint256 ownerCutPerMillion);\\n}\\n\",\"keccak256\":\"0xda4b8d8ba28ca57ea5bdae4f6c2a8581c82191314f725023f67a6afe2cf5ab51\",\"license\":\"GPL-3.0\"},\"contracts/game/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"./IMarketplace.sol\\\";\\nimport \\\"./IGameNFT.sol\\\";\\nimport \\\"../config/IConfig.sol\\\";\\nimport \\\"../feerouter/IWithdrawFees.sol\\\";\\n\\ncontract Marketplace is\\n    Initializable,\\n    IMarketplace,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    ERC1155ReceiverUpgradeable,\\n    IWithdrawFees\\n{\\n    bytes4 internal constant ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\n    bytes4 internal constant ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\n\\n    uint128 public constant PRICE_PRECISION = 1e18;\\n    uint128 public constant PRECENT_DENOMINATOR = 10000000000;\\n\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    CountersUpgradeable.Counter private _orderIdCounter;\\n\\n    IERC20 public acceptedToken;\\n\\n    uint256 public ownerCutPerMillion;\\n\\n    IConfig public config;\\n\\n    mapping(uint256 => Order) public orderById;\\n\\n    mapping(bytes32 => uint256[]) private _orderIdsByProductId;\\n\\n    function initialize(IConfig _config) public initializer {\\n        __UUPSUpgradeable_init();\\n        __Ownable_init();\\n        config = _config;\\n        acceptedToken = IERC20(address(config.getStableCoinToken()));\\n        _setOwnerCutPerMillion(300000000);\\n    }\\n\\n    // 300000000 = 3%\\n    // 3000000000 = 30%\\n    // 10000000000\\n    function setOwnerCutPerMillion(\\n        uint256 _ownerCutPerMillion\\n    ) public onlyOwner {\\n        _setOwnerCutPerMillion(_ownerCutPerMillion);\\n    }\\n\\n    function getDefaultProductId(\\n        address nft,\\n        uint256 tokenId\\n    ) internal view returns (bytes32) {\\n        IERC165Upgradeable nftDetect = IERC165Upgradeable(nft);\\n        if (nftDetect.supportsInterface(type(IGameNFT).interfaceId)) {\\n            (, uint256 itemId) = IGameNFT(nft).getItemId(tokenId);\\n            bytes32 productId = keccak256(abi.encodePacked(itemId));\\n            return productId;\\n        }\\n        revert(\\\"Marketplace#getDefaultProductId: Invalid NFT\\\");\\n    }\\n\\n    function withdrawFees() external override {\\n        address feerouter = address(config.getFeeRouter());\\n        uint256 amount = acceptedToken.balanceOf(address(this));\\n        acceptedToken.transfer(feerouter, amount);\\n    }\\n\\n    function _addOrderIdsByProductIdAndERC20Address(\\n        bytes32 productId,\\n        uint256 orderId\\n    ) private {\\n        if (_orderIdsByProductId[productId].length == 0) {\\n            _orderIdsByProductId[productId] = [orderId];\\n        } else {\\n            _orderIdsByProductId[productId].push(orderId);\\n        }\\n    }\\n\\n    function _removeOrderIdsByProductIdAndERC20Address(\\n        bytes32 productId,\\n        uint256 orderId\\n    ) private {\\n        uint256 index;\\n        uint256 length = _orderIdsByProductId[productId].length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_orderIdsByProductId[productId][i] == orderId) {\\n                index = i;\\n                break;\\n            }\\n        }\\n        require(\\n            _orderIdsByProductId[productId][index] == orderId,\\n            \\\"Marketplace#_removeOrderIdsByProductId:  orderId not found\\\"\\n        );\\n        uint256 lastOrderId = _orderIdsByProductId[productId][length - 1];\\n\\n        _orderIdsByProductId[productId][index] = lastOrderId;\\n\\n        _orderIdsByProductId[productId].pop();\\n    }\\n\\n    function _setOwnerCutPerMillion(uint256 _ownerCutPerMillion) internal {\\n        require(\\n            _ownerCutPerMillion < PRECENT_DENOMINATOR,\\n            \\\"Marketplace#_setOwnerCutPerMillion: The owner cut should be between 0 and 10000000000\\\"\\n        );\\n\\n        ownerCutPerMillion = _ownerCutPerMillion;\\n        emit ChangedOwnerCutPerMillion(ownerCutPerMillion);\\n    }\\n\\n    function _erc721validate(\\n        IERC721Upgradeable nft,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address sender\\n    ) internal view {\\n        require(\\n            nft.ownerOf(tokenId) == sender,\\n            \\\"Marketplace#erc721validate: The sender is not the owner of the token\\\"\\n        );\\n\\n        require(\\n            nft.getApproved(tokenId) == address(this) ||\\n                nft.isApprovedForAll(sender, address(this)),\\n            \\\"Marketplace#erc721validate: The contract is not authorized to manage the asset\\\"\\n        );\\n\\n        require(\\n            amount == 1,\\n            \\\"Marketplace#erc721validate: The amount should be 1\\\"\\n        );\\n    }\\n\\n    function _erc1155validate(\\n        IERC1155Upgradeable nft,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 erc1155recivedAmount,\\n        address sender\\n    ) internal view {\\n        if (amount != erc1155recivedAmount) {\\n            require(\\n                nft.balanceOf(sender, tokenId) > 0,\\n                \\\"Marketplace#_erc1155validate: Only the owner can create orders\\\"\\n            );\\n            require(\\n                nft.isApprovedForAll(sender, address(this)),\\n                \\\"Marketplace#_erc1155validate: The contract is not authorized to manage the asset\\\"\\n            );\\n        }\\n    }\\n\\n    function executeOrder(\\n        uint256 orderId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 priceInWeiForUnit\\n    ) external {\\n        address payment = _msgSender();\\n        _executeOrder(orderId, payment, recipient, amount, priceInWeiForUnit);\\n    }\\n\\n    function updateOrder(uint256 orderId, uint256 priceInWeiForUnit) external {\\n        address operator = _msgSender();\\n        _updateOrder(orderId, priceInWeiForUnit, operator);\\n    }\\n\\n    function _updateOrder(\\n        uint256 orderId,\\n        uint256 priceInWeiForUnit,\\n        address operator\\n    ) internal {\\n        Order memory order = orderById[orderId];\\n        require(\\n            order.seller == operator,\\n            \\\"Marketplace#_updateOrder: The operator is not the seller\\\"\\n        );\\n\\n        order.priceInWeiForUnit = priceInWeiForUnit;\\n        orderById[orderId] = order;\\n\\n        emit OrderUpdated(orderId, priceInWeiForUnit);\\n    }\\n\\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\\n        if (a < b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function _removeArrayIndex(\\n        uint256[] memory elements,\\n        uint256 index\\n    ) private pure returns (uint256[] memory) {\\n        uint256[] memory newElements = new uint256[](elements.length - 1);\\n        for (uint256 i = 0; i < newElements.length; i++) {\\n            if (i != index && i < index) {\\n                newElements[i] = elements[i];\\n            } else {\\n                newElements[i] = elements[i + 1];\\n            }\\n        }\\n        return newElements;\\n    }\\n\\n    function autoBuy(\\n        bytes32 productId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 maxPayableAmount\\n    ) external {\\n        AutoBuyFixStack2deepReturns memory ret = autoBuyPrice(\\n            productId,\\n            amount\\n        );\\n        address payment = _msgSender();\\n        require(\\n            ret.needTotalPrice <= maxPayableAmount,\\n            \\\"Marketplace#autoBuy: The total price is not correct\\\"\\n        );\\n\\n        uint256 allowance = acceptedToken.allowance(payment, address(this));\\n        require(\\n            allowance >= maxPayableAmount,\\n            \\\"Marketplace#autoBuy: The allowance is not enough\\\"\\n        );\\n\\n        for (uint256 i = 0; i < ret.execOrderIds.length; i++) {\\n            uint256 orderId = ret.execOrderIds[i];\\n            if (orderId > 0) {\\n                uint256 orderAmount = ret.execOrderAmounts[i];\\n                uint256 priceInWeiForUnit = orderById[orderId]\\n                    .priceInWeiForUnit;\\n                _executeOrder(\\n                    orderId,\\n                    payment,\\n                    recipient,\\n                    orderAmount,\\n                    priceInWeiForUnit\\n                );\\n            }\\n        }\\n    }\\n\\n    function getProductLowestPrice(\\n        bytes32 productId\\n    ) external view returns (uint256) {\\n        uint256[] memory orderIds = _orderIdsByProductId[productId];\\n\\n        if (orderIds.length == 0) {\\n            return 0;\\n        }\\n\\n        if (orderIds.length == 1) {\\n            return orderById[orderIds[0]].priceInWeiForUnit;\\n        }\\n\\n        uint256 lowestPrice = orderById[orderIds[0]].priceInWeiForUnit;\\n        for (uint256 i = 1; i < orderIds.length; i++) {\\n            uint256 orderId = orderIds[i];\\n            if (orderId > 0) {\\n                uint256 priceInWeiForUnit = orderById[orderId]\\n                    .priceInWeiForUnit;\\n                lowestPrice = _min(lowestPrice, priceInWeiForUnit);\\n            }\\n        }\\n\\n        return lowestPrice;\\n    }\\n\\n    function _comparePrice(\\n        Order memory order,\\n        uint256 poolPrice,\\n        uint256 poolAmount\\n    ) internal view returns (bool) {\\n        if (poolAmount == 0) {\\n            return true;\\n        }\\n        uint256 priceInWeiForUnit = order.priceInWeiForUnit;\\n        uint256 fees = (priceInWeiForUnit * ownerCutPerMillion) / 1000000;\\n        priceInWeiForUnit += fees;\\n        uint256 poolUnitPrice = poolPrice / poolAmount;\\n\\n        if (priceInWeiForUnit < poolUnitPrice) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    // Help users find the cheapest orders\\n    function autoBuyPrice(\\n        bytes32 productId,\\n        uint256 neededAmount\\n    ) public view returns (AutoBuyFixStack2deepReturns memory) {\\n        uint256[] memory orderIds = _orderIdsByProductId[productId];\\n        // uint256 poolStock = factory.getStock(\\n        //     productId,\\n        //     IERC20Metadata(erc20token)\\n        // );\\n        AutoBuyFixStack2deep memory params = AutoBuyFixStack2deep(0, 0, 0, 0);\\n\\n        AutoBuyFixStack2deepReturns memory ret = AutoBuyFixStack2deepReturns(\\n            new uint256[](orderIds.length),\\n            new uint256[](orderIds.length),\\n            params.poolBuyAmount,\\n            params.poolBuyPrice,\\n            params.poolBuyPrice\\n        );\\n\\n        if (orderIds.length == 0) {\\n            if (params.poolBuyAmount < neededAmount) {\\n                ret.poolBuyAmount = 0;\\n                ret.poolBuyPrice = 0;\\n                ret.needTotalPrice = 0;\\n                return ret;\\n            }\\n            ret.poolBuyAmount = params.poolBuyAmount;\\n            ret.poolBuyPrice = params.poolBuyPrice;\\n            ret.needTotalPrice = params.poolBuyPrice + params.totalPrice;\\n            return ret;\\n        }\\n\\n        while (neededAmount > 0 && orderIds.length > 0) {\\n            Order memory order = orderById[orderIds[0]];\\n            uint256 matchOrderIndex = 0;\\n\\n            for (uint256 i = 0; i < orderIds.length; i++) {\\n                Order memory newOrder = orderById[orderIds[i]];\\n                if (newOrder.amount == 0) {\\n                    continue;\\n                }\\n                if (newOrder.priceInWeiForUnit > 0) {\\n                    if (newOrder.priceInWeiForUnit < order.priceInWeiForUnit) {\\n                        order = newOrder;\\n                        matchOrderIndex = i;\\n                    }\\n                }\\n            }\\n\\n            // \\u9664\\u975e\\u6c60\\u5b50\\u6570\\u91cf\\u4e0d\\u8db3, \\u5426\\u5219\\u5982\\u679c\\u6700\\u4f4e\\u7684\\u8ba2\\u5355\\u4ef7\\u683c\\u6bd4\\u6c60\\u5b50\\u4ef7\\u683c\\u9ad8\\n            if (\\n                !_comparePrice(\\n                    order,\\n                    params.poolBuyPrice,\\n                    params.poolBuyAmount\\n                ) && params.poolBuyAmount >= neededAmount\\n            ) {\\n                ret.poolBuyAmount = params.poolBuyAmount;\\n                ret.poolBuyPrice = params.poolBuyPrice;\\n                ret.needTotalPrice = params.poolBuyPrice + params.totalPrice;\\n                return ret;\\n            }\\n\\n            uint256 amount = _min(neededAmount, order.amount);\\n\\n            if (neededAmount == params.poolBuyAmount) {\\n                if (params.poolBuyAmount >= amount) {\\n                    params.poolBuyAmount -= amount;\\n                } else {\\n                    params.poolBuyAmount = 0;\\n                }\\n            }\\n\\n            neededAmount -= amount;\\n\\n            params.totalPrice =\\n                params.totalPrice +\\n                order.priceInWeiForUnit *\\n                amount;\\n            params.poolBuyPrice = 0;\\n            ret.execOrderIds[params.index] = order.id;\\n            ret.execOrderAmounts[params.index] = amount;\\n            // Remove the order from the list\\n            orderIds = _removeArrayIndex(orderIds, matchOrderIndex);\\n            params.index++;\\n        }\\n\\n        ret.poolBuyAmount = params.poolBuyAmount;\\n        ret.poolBuyPrice = params.poolBuyPrice;\\n        ret.needTotalPrice = params.poolBuyPrice + params.totalPrice;\\n        return ret;\\n    }\\n\\n    // cancel order\\n    function cancelOrder(uint256 orderId) external {\\n        address operator = _msgSender();\\n        Order memory order = orderById[orderId];\\n        require(\\n            order.seller == operator,\\n            \\\"Marketplace#cancelOrder: The operator is not the seller\\\"\\n        );\\n        require(\\n            order.amount > 0,\\n            \\\"Marketplace#cancelOrder: The order is already executed\\\"\\n        );\\n        address nft = order.nft;\\n        uint256 tokenId = order.tokenId;\\n        bytes32 productId = getDefaultProductId(nft, tokenId);\\n        _nftTransfer(nft, tokenId, address(this), operator, order.amount);\\n        order.amount = 0;\\n        orderById[orderId] = order;\\n        _removeOrderIdsByProductIdAndERC20Address(productId, orderId);\\n        emit OrderCanceled(orderId);\\n    }\\n\\n    function _nftTransfer(\\n        address nft,\\n        uint256 tokenId,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        ERC165Upgradeable nftDetect = ERC165Upgradeable(nft);\\n\\n        if (nftDetect.supportsInterface(type(IGameNFT).interfaceId)) {\\n            uint256[] memory tokenIds = new uint256[](1);\\n            tokenIds[0] = tokenId;\\n            uint256[] memory amounts = new uint256[](1);\\n            amounts[0] = amount;\\n            IGameNFT(nft).safeBatchBridge2GameFrom(from, to, tokenIds, amounts);\\n            return;\\n        }\\n\\n        if (nftDetect.supportsInterface(type(IERC721Upgradeable).interfaceId)) {\\n            IERC721Upgradeable(nft).safeTransferFrom(from, to, tokenId);\\n        } else if (\\n            nftDetect.supportsInterface(type(IERC1155Upgradeable).interfaceId)\\n        ) {\\n            IERC1155Upgradeable(nft).safeTransferFrom(\\n                from,\\n                to,\\n                tokenId,\\n                amount,\\n                \\\"\\\"\\n            );\\n        } else {\\n            revert(\\\"Marketplace#_executeOrder: nft must be erc721 or erc1155\\\");\\n        }\\n    }\\n\\n    function _executeOrder(\\n        uint256 orderId,\\n        address payment,\\n        address recipient,\\n        uint256 amount,\\n        uint256 priceInWeiForUnit\\n    ) internal {\\n        Order memory order = orderById[orderId];\\n        require(\\n            order.amount > 0,\\n            \\\"Marketplace#_executeOrder: The order amount should be greater than 0\\\"\\n        );\\n        require(\\n            order.priceInWeiForUnit <= priceInWeiForUnit,\\n            \\\"Marketplace#_executeOrder: The order price should be less than the current price\\\"\\n        );\\n        require(\\n            order.amount >= amount,\\n            \\\"Marketplace#_executeOrder: Insufficient remaining quantity \\\"\\n        );\\n\\n        uint256 allowance = acceptedToken.allowance(payment, address(this));\\n        uint256 totalPrice = amount * priceInWeiForUnit;\\n        require(\\n            allowance >= totalPrice,\\n            \\\"Marketplace#_executeOrder: Insufficient allowance\\\"\\n        );\\n\\n        order.amount -= amount;\\n        orderById[orderId] = order;\\n\\n        uint256 saleShareAmount = 0;\\n        if (ownerCutPerMillion > 0) {\\n            // Calculate sale share\\n            saleShareAmount = totalPrice.mul(ownerCutPerMillion).div(\\n                PRECENT_DENOMINATOR\\n            );\\n            acceptedToken.transferFrom(payment, address(this), saleShareAmount);\\n        }\\n\\n        require(\\n            acceptedToken.transferFrom(\\n                payment,\\n                order.seller,\\n                totalPrice.sub(saleShareAmount)\\n            ),\\n            \\\"Marketplace#_executeOrder: Transfering the sale amount to the seller failed\\\"\\n        );\\n\\n        address nft = order.nft;\\n        uint256 tokenId = order.tokenId;\\n\\n        _nftTransfer(nft, tokenId, address(this), recipient, amount);\\n\\n        bytes32 productId = getDefaultProductId(nft, tokenId);\\n\\n        if (order.amount == 0) {\\n            _removeOrderIdsByProductIdAndERC20Address(productId, order.id);\\n        }\\n\\n        emit OrderSellout(\\n            orderId,\\n            amount,\\n            order.amount == 0,\\n            payment,\\n            recipient,\\n            totalPrice,\\n            saleShareAmount\\n        );\\n    }\\n\\n    function _createOrder(\\n        address nft,\\n        address sender,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 erc1155recivedAmount,\\n        uint256 priceInWeiForUnit\\n    ) internal {\\n        _orderIdCounter.increment();\\n        require(nft.isContract(), \\\"The nft is not a contract\\\");\\n        require(priceInWeiForUnit > 0, \\\"Price should be bigger than 0\\\");\\n        ERC165Upgradeable nftDetect = ERC165Upgradeable(nft);\\n\\n        if (nftDetect.supportsInterface(type(IERC721Upgradeable).interfaceId)) {\\n            _erc721validate(IERC721Upgradeable(nft), tokenId, amount, sender);\\n        } else if (\\n            nftDetect.supportsInterface(type(IERC1155Upgradeable).interfaceId)\\n        ) {\\n            _erc1155validate(\\n                IERC1155Upgradeable(nft),\\n                tokenId,\\n                amount,\\n                erc1155recivedAmount,\\n                sender\\n            );\\n        } else {\\n            revert(\\\"Marketplace#_createOrder: nft must be erc721 or erc1155\\\");\\n        }\\n\\n        bytes32 productId = getDefaultProductId(nft, tokenId);\\n        uint256 orderId = _orderIdCounter.current();\\n\\n        Order memory order = Order(\\n            orderId,\\n            sender,\\n            tokenId,\\n            amount,\\n            nft,\\n            priceInWeiForUnit\\n        );\\n\\n        orderById[orderId] = order;\\n\\n        _addOrderIdsByProductIdAndERC20Address(productId, orderId);\\n\\n        emit OrderCreated(orderId, productId, order);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(ERC1155ReceiverUpgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ERC1155ReceiverUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    bytes4 internal constant CREATE_ORDER_SIG =\\n        bytes4(keccak256(\\\"_createOrder(uint256)\\\"));\\n\\n    function onERC1155BatchReceived(\\n        address, // _operator,\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        bytes calldata _data\\n    ) public override returns (bytes4) {\\n        // This function assumes that the ERC-1155 token contract can\\n        // only call `onERC1155BatchReceived()` via a valid token transfer.\\n        // Users must be responsible and only use this Niftyswap exchange\\n        // contract with ERC-1155 compliant token contracts.\\n        // Obtain method to call via object signature\\n        bytes4 functionSignature = bytes4(_data[:4]);\\n        require(\\n            functionSignature == CREATE_ORDER_SIG,\\n            \\\"Marketplace#onERC1155BatchReceived5: Invalid function signature\\\"\\n        );\\n        uint256 priceInWeiForUnit;\\n        (priceInWeiForUnit) = abi.decode(_data[4:], (uint256));\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            _createOrder(\\n                _msgSender(),\\n                _from,\\n                _ids[i],\\n                _amounts[i],\\n                _amounts[i],\\n                priceInWeiForUnit\\n            );\\n        }\\n        return ERC1155_BATCH_RECEIVED_VALUE;\\n    }\\n\\n    /**\\n     * @dev Will pass to onERC115Batch5Received\\n     */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) public override returns (bytes4) {\\n        uint256[] memory ids = new uint256[](1);\\n        uint256[] memory amounts = new uint256[](1);\\n\\n        ids[0] = _id;\\n        amounts[0] = _amount;\\n\\n        require(\\n            ERC1155_BATCH_RECEIVED_VALUE ==\\n                onERC1155BatchReceived(_operator, _from, ids, amounts, _data),\\n            \\\"Marketplace#onERC1155Received: INVALID_ONRECEIVED_MESSAGE\\\"\\n        );\\n\\n        return ERC1155_RECEIVED_VALUE;\\n    }\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0xb72da3a6371d6572d215ce163ba4fc7ef625a4544b00d61b792a099c7c61f4c9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c806379502c55116100b6578063b1b61cf91161006f578063b1b61cf914610424578063bc197c8114610444578063c4d66de814610471578063e757a75214610491578063f23a6e61146104be578063f2fde38b146104de57600080fd5b806379502c55146102e05780638d77eba5146103015780638da5cb5b1461039957806395082d25146103b75780639cc182a4146103f4578063a01f79d41461040d57600080fd5b8063514fcac711610108578063514fcac714610228578063527808491461024857806352d1902d14610276578063587b71a61461028b57806365844402146102ab578063715018a6146102cb57600080fd5b806301ffc9a71461015057806319dad16d146101855780633659cfe6146101a7578063451c3d80146101c7578063476343ee146102005780634f1ef28614610215575b600080fd5b34801561015c57600080fd5b5061017061016b366004613797565b6104fe565b60405190151581526020015b60405180910390f35b34801561019157600080fd5b506101a56101a03660046137c1565b610529565b005b3480156101b357600080fd5b506101a56101c23660046137ef565b61053d565b3480156101d357600080fd5b5061012e546101e8906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b34801561020c57600080fd5b506101a5610622565b6101a5610223366004613853565b610783565b34801561023457600080fd5b506101a56102433660046137c1565b610853565b34801561025457600080fd5b506102686102633660046137c1565b610a81565b60405190815260200161017c565b34801561028257600080fd5b50610268610bda565b34801561029757600080fd5b506101a56102a63660046138fb565b610c8d565b3480156102b757600080fd5b506101a56102c636600461391d565b610c99565b3480156102d757600080fd5b506101a5610ea0565b3480156102ec57600080fd5b50610130546101e8906001600160a01b031681565b34801561030d57600080fd5b5061035f61031c3660046137c1565b6101316020526000908152604090208054600182015460028301546003840154600485015460059095015493946001600160a01b03938416949293919291169086565b604080519687526001600160a01b0395861660208801528601939093526060850191909152909116608083015260a082015260c00161017c565b3480156103a557600080fd5b5060c9546001600160a01b03166101e8565b3480156103c357600080fd5b506103d3670de0b6b3a764000081565b6040516fffffffffffffffffffffffffffffffff909116815260200161017c565b34801561040057600080fd5b506103d36402540be40081565b34801561041957600080fd5b5061026861012f5481565b34801561043057600080fd5b506101a561043f36600461391d565b610eb4565b34801561045057600080fd5b5061046461045f366004613a23565b610ec9565b60405161017c9190613ad7565b34801561047d57600080fd5b506101a561048c3660046137ef565b611015565b34801561049d57600080fd5b506104b16104ac3660046138fb565b6111da565b60405161017c9190613b27565b3480156104ca57600080fd5b506104646104d9366004613b8b565b6116af565b3480156104ea57600080fd5b506101a56104f93660046137ef565b6117df565b60006001600160e01b031982166301ffc9a760e01b1480610523575061052382611855565b92915050565b61053161188a565b61053a816118e4565b50565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361058e5760405162461bcd60e51b815260040161058590613bf5565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105d7600080516020613f2a833981519152546001600160a01b031690565b6001600160a01b0316146105fd5760405162461bcd60e51b815260040161058590613c41565b610606816119b8565b6040805160008082526020820190925261053a918391906119c0565b610130546040805163ea9c5e0d60e01b815290516000926001600160a01b03169163ea9c5e0d9160048083019260209291908290030181865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190613c8d565b61012e546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107049190613caa565b61012e5460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af115801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190613cc3565b505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107cb5760405162461bcd60e51b815260040161058590613bf5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610814600080516020613f2a833981519152546001600160a01b031690565b6001600160a01b03161461083a5760405162461bcd60e51b815260040161058590613c41565b610843826119b8565b61084f828260016119c0565b5050565b60008181526101316020908152604091829020825160c0810184528154815260018201546001600160a01b0390811693820184905260028301549482019490945260038201546060820152600482015490931660808401526005015460a0830152339190821461092b5760405162461bcd60e51b815260206004820152603760248201527f4d61726b6574706c6163652363616e63656c4f726465723a20546865206f706560448201527f7261746f72206973206e6f74207468652073656c6c65720000000000000000006064820152608401610585565b600081606001511161099e5760405162461bcd60e51b815260206004820152603660248201527f4d61726b6574706c6163652363616e63656c4f726465723a20546865206f7264604482015275195c881a5cc8185b1c9958591e48195e1958dd5d195960521b6064820152608401610585565b6080810151604082015160006109b48383611b2b565b90506109c7838330888860600151611cac565b600060608501818152878252610131602090815260409283902087518155908701516001820180546001600160a01b039283166001600160a01b03199182161790915593880151600283015591516003820155608087015160048201805491909316931692909217905560a0850151600590910155610a468187612041565b6040518681527fc41f4ceb2938876c35e61b705e9d2f18a02c4a26ce5e049a6308a943d46851b39060200160405180910390a1505050505050565b60008181526101326020908152604080832080548251818502810185019093528083528493830182828015610ad557602002820191906000526020600020905b815481526020019060010190808311610ac1575b505050505090508051600003610aee5750600092915050565b8051600103610b3157610131600082600081518110610b0f57610b0f613ce5565b6020026020010151815260200190815260200160002060050154915050919050565b6000610131600083600081518110610b4b57610b4b613ce5565b602002602001015181526020019081526020016000206005015490506000600190505b8251811015610bd2576000838281518110610b8b57610b8b613ce5565b602002602001015190506000811115610bbf5760008181526101316020526040902060050154610bbb84826121f7565b9350505b5080610bca81613d11565b915050610b6e565b509392505050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c7a5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610585565b50600080516020613f2a83398151915290565b3361077e83838361220f565b6000610ca585846111da565b905060003390508282608001511115610d1c5760405162461bcd60e51b815260206004820152603360248201527f4d61726b6574706c616365236175746f4275793a2054686520746f74616c20706044820152721c9a58d9481a5cc81b9bdd0818dbdc9c9958dd606a1b6064820152608401610585565b61012e54604051636eb1769f60e11b81526001600160a01b038381166004830152306024830152600092169063dd62ed3e90604401602060405180830381865afa158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d929190613caa565b905083811015610dfd5760405162461bcd60e51b815260206004820152603060248201527f4d61726b6574706c616365236175746f4275793a2054686520616c6c6f77616e60448201526f0c6ca40d2e640dcdee840cadcdeeaced60831b6064820152608401610585565b60005b835151811015610e9657600084600001518281518110610e2257610e22613ce5565b602002602001015190506000811115610e8357600085602001518381518110610e4d57610e4d613ce5565b6020026020010151905060006101316000848152602001908152602001600020600501549050610e8083878c8585612398565b50505b5080610e8e81613d11565b915050610e00565b5050505050505050565b610ea861188a565b610eb26000612986565b565b33610ec28582868686612398565b5050505050565b600080610ed96004828587613d2a565b610ee291613d54565b90506001600160e01b0319811663868b573d60e01b14610f6a5760405162461bcd60e51b815260206004820152603f60248201527f4d61726b6574706c616365236f6e45524331313535426174636852656365697660448201527f6564353a20496e76616c69642066756e6374696f6e207369676e6174757265006064820152608401610585565b6000610f798460048188613d2a565b810190610f8691906137c1565b905060005b8751811015610fff57610fed338a8a8481518110610fab57610fab613ce5565b60200260200101518a8581518110610fc557610fc5613ce5565b60200260200101518b8681518110610fdf57610fdf613ce5565b6020026020010151876129d8565b80610ff781613d11565b915050610f8b565b5063bc197c8160e01b9998505050505050505050565b600054610100900460ff16158080156110355750600054600160ff909116105b8061104f5750303b15801561104f575060005460ff166001145b6110b25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610585565b6000805460ff1916600117905580156110d5576000805461ff0019166101001790555b6110dd612da4565b6110e5612dcb565b61013080546001600160a01b0319166001600160a01b03841690811790915560408051631c7f7d8f60e31b8152905163e3fbec78916004808201926020929091908290030181865afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190613c8d565b61012e80546001600160a01b0319166001600160a01b03929092169190911790556111916311e1a3006118e4565b801561084f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b61120c6040518060a0016040528060608152602001606081526020016000815260200160008152602001600081525090565b6000838152610132602090815260408083208054825181850281018501909352808352919290919083018282801561126357602002820191906000526020600020905b81548152602001906001019080831161124f575b50505050509050600060405180608001604052806000815260200160008152602001600081526020016000815250905060006040518060a00160405280845167ffffffffffffffff8111156112ba576112ba61380c565b6040519080825280602002602001820160405280156112e3578160200160208202803683370190505b508152602001845167ffffffffffffffff8111156113035761130361380c565b60405190808252806020026020018201604052801561132c578160200160208202803683370190505b50815260200183600001518152602001836020015181526020018360200151815250905082516000036113b6578151851115611381576000604082018190526060820181905260808201529250610523915050565b815160408083019190915260208301805160608401529083015190516113a79190613d84565b60808201529250610523915050565b6000851180156113c7575060008351115b1561167b5760006101316000856000815181106113e6576113e6613ce5565b60209081029190910181015182528181019290925260409081016000908120825160c0810184528154815260018201546001600160a01b0390811695820195909552600282015493810193909352600381015460608401526004810154909316608083015260059092015460a08201529150805b855181101561152f576000610131600088848151811061147c5761147c613ce5565b60209081029190910181015182528181019290925260409081016000908120825160c0810184528154815260018201546001600160a01b0390811695820195909552600282015493810193909352600381015460608401819052600482015490941660808401526005015460a0830152909250036114fa575061151d565b60a08101511561151b578360a001518160a00151101561151b578093508192505b505b8061152781613d11565b91505061145a565b506115438285602001518660000151612dfa565b158015611551575083518711155b1561158e578351604080850191909152602085018051606086015290850151905161157c9190613d84565b60808401525090935061052392505050565b600061159e8884606001516121f7565b855190915088036115d057845181116115cb5780856000018181516115c39190613d97565b9052506115d0565b600085525b6115da8189613d97565b9750808360a001516115ec9190613daa565b85604001516115fb9190613d84565b6040860152600060208601528251845160608701518151811061162057611620613ce5565b60200260200101818152505080846020015186606001518151811061164757611647613ce5565b60200260200101818152505061165d8683612e70565b60608601805191975061166f82613d11565b815250505050506113b6565b815160408083019190915260208301805160608401529083015190516116a19190613d84565b608082015295945050505050565b604080516001808252818301909252600091829190602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337019050509050868260008151811061170b5761170b613ce5565b602002602001018181525050858160008151811061172b5761172b613ce5565b602002602001018181525050611745898984848989610ec9565b6001600160e01b03191663bc197c8160e01b146117ca5760405162461bcd60e51b815260206004820152603960248201527f4d61726b6574706c616365236f6e4552433131353552656365697665643a204960448201527f4e56414c49445f4f4e52454345495645445f4d455353414745000000000000006064820152608401610585565b5063f23a6e6160e01b98975050505050505050565b6117e761188a565b6001600160a01b03811661184c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610585565b61053a81612986565b60006001600160e01b03198216630271189760e51b148061052357506301ffc9a760e01b6001600160e01b0319831614610523565b60c9546001600160a01b03163314610eb25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610585565b6402540be400811061197c5760405162461bcd60e51b815260206004820152605560248201527f4d61726b6574706c616365235f7365744f776e65724375745065724d696c6c6960448201527f6f6e3a20546865206f776e6572206375742073686f756c642062652062657477606482015274065656e203020616e6420313030303030303030303605c1b608482015260a401610585565b61012f8190556040518181527ffa406a120a9e7f2b332bfb7a43d3bf1c3f079262202907a6b69c94b2821a02c69060200160405180910390a150565b61053a61188a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119f35761077e83612f78565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a4d575060408051601f3d908101601f19168201909252611a4a91810190613caa565b60015b611ab05760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610585565b600080516020613f2a8339815191528114611b1f5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610585565b5061077e838383613014565b6040516301ffc9a760e01b815260009083906001600160a01b038216906301ffc9a790611b63906325964f3960e01b90600401613ad7565b602060405180830381865afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba49190613cc3565b15611c4f576040516354d3b76760e11b8152600481018490526000906001600160a01b0386169063a9a76ece906024016040805180830381865afa158015611bf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c149190613dc1565b915050600081604051602001611c2c91815260200190565b604051602081830303815290604052805190602001209050809350505050610523565b60405162461bcd60e51b815260206004820152602c60248201527f4d61726b6574706c6163652367657444656661756c7450726f6475637449643a60448201526b08125b9d985b1a590813919560a21b6064820152608401610585565b6040516301ffc9a760e01b815285906001600160a01b038216906301ffc9a790611ce1906325964f3960e01b90600401613ad7565b602060405180830381865afa158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d229190613cc3565b15611e1757604080516001808252818301909252600091602080830190803683370190505090508581600081518110611d5d57611d5d613ce5565b60209081029190910101526040805160018082528183019092526000918160200160208202803683370190505090508381600081518110611da057611da0613ce5565b602090810291909101015260405163c5ad899b60e01b81526001600160a01b0389169063c5ad899b90611ddd908990899087908790600401613df5565b600060405180830381600087803b158015611df757600080fd5b505af1158015611e0b573d6000803e3d6000fd5b50505050505050610ec2565b6040516301ffc9a760e01b81526001600160a01b038216906301ffc9a790611e4a906380ac58cd60e01b90600401613ad7565b602060405180830381865afa158015611e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8b9190613cc3565b15611f0057604051632142170760e11b81526001600160a01b0385811660048301528481166024830152604482018790528716906342842e0e906064015b600060405180830381600087803b158015611ee357600080fd5b505af1158015611ef7573d6000803e3d6000fd5b50505050612039565b6040516301ffc9a760e01b81526001600160a01b038216906301ffc9a790611f3390636cdb3d1360e11b90600401613ad7565b602060405180830381865afa158015611f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f749190613cc3565b15611fcb57604051637921219560e11b81526001600160a01b0385811660048301528481166024830152604482018790526064820184905260a06084830152600060a483015287169063f242432a9060c401611ec9565b60405162461bcd60e51b815260206004820152603860248201527f4d61726b6574706c616365235f657865637574654f726465723a206e6674206d60448201527f75737420626520657263373231206f72206572633131353500000000000000006064820152608401610585565b505050505050565b60008281526101326020526040812054815b818110156120a95760008581526101326020526040902080548591908390811061207f5761207f613ce5565b906000526020600020015403612097578092506120a9565b806120a181613d11565b915050612053565b506000848152610132602052604090208054849190849081106120ce576120ce613ce5565b90600052602060002001541461214c5760405162461bcd60e51b815260206004820152603a60248201527f4d61726b6574706c616365235f72656d6f76654f72646572496473427950726f60448201527f6475637449643a20206f726465724964206e6f7420666f756e640000000000006064820152608401610585565b600084815261013260205260408120612166600184613d97565b8154811061217657612176613ce5565b9060005260206000200154905080610132600087815260200190815260200160002084815481106121a9576121a9613ce5565b906000526020600020018190555061013260008681526020019081526020016000208054806121da576121da613e33565b600190038181906000526020600020016000905590555050505050565b600081831015612208575081610523565b5080610523565b60008381526101316020908152604091829020825160c0810184528154815260018201546001600160a01b039081169382018490526002830154948201949094526003820154606082015260048201548416608082015260059091015460a0820152918316146122e75760405162461bcd60e51b815260206004820152603860248201527f4d61726b6574706c616365235f7570646174654f726465723a20546865206f7060448201527f657261746f72206973206e6f74207468652073656c6c657200000000000000006064820152608401610585565b60a081018381526000858152610131602090815260409182902084518155818501516001820180546001600160a01b039283166001600160a01b031991821617909155848701516002840155606087015160038401556080870151600484018054919093169116179055925160059093019290925580518681529182018590527f8e73a807b83fde44e6e12224a9b4fade736ffe96ab8d511abd64e9a1b4e8c0ca910160405180910390a150505050565b60008581526101316020908152604091829020825160c0810184528154815260018201546001600160a01b0390811693820193909352600282015493810193909352600381015460608401819052600482015490921660808401526005015460a083015261247c5760405162461bcd60e51b8152602060048201526044602482018190527f4d61726b6574706c616365235f657865637574654f726465723a20546865206f908201527f7264657220616d6f756e742073686f756c6420626520677265617465722074686064820152630616e20360e41b608482015260a401610585565b818160a00151111561250f5760405162461bcd60e51b815260206004820152605060248201527f4d61726b6574706c616365235f657865637574654f726465723a20546865206f60448201527f726465722070726963652073686f756c64206265206c657373207468616e207460648201526f68652063757272656e7420707269636560801b608482015260a401610585565b82816060015110156125895760405162461bcd60e51b815260206004820152603b60248201527f4d61726b6574706c616365235f657865637574654f726465723a20496e73756660448201527f66696369656e742072656d61696e696e67207175616e746974792000000000006064820152608401610585565b61012e54604051636eb1769f60e11b81526001600160a01b038781166004830152306024830152600092169063dd62ed3e90604401602060405180830381865afa1580156125db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ff9190613caa565b9050600061260d8486613daa565b9050808210156126795760405162461bcd60e51b815260206004820152603160248201527f4d61726b6574706c616365235f657865637574654f726465723a20496e73756660448201527066696369656e7420616c6c6f77616e636560781b6064820152608401610585565b848360600181815161268b9190613d97565b90525060008881526101316020908152604080832086518155918601516001830180546001600160a01b03199081166001600160a01b0393841617909155918701516002840155606087015160038401556080870151600484018054909316911617905560a085015160059091015561012f54156127a55761012f54612723906402540be4009061271d90859061303f565b9061304b565b61012e546040516323b872dd60e01b81526001600160a01b038b81166004830152306024830152604482018490529293509116906323b872dd906064016020604051808303816000875af115801561277f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a39190613cc3565b505b61012e5460208501516001600160a01b03909116906323b872dd908a906127cc8686613057565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015612820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128449190613cc3565b6128ca5760405162461bcd60e51b815260206004820152604b60248201527f4d61726b6574706c616365235f657865637574654f726465723a205472616e7360448201527f666572696e67207468652073616c6520616d6f756e7420746f2074686520736560648201526a1b1b195c8819985a5b195960aa1b608482015260a401610585565b608084015160408501516128e18282308c8c611cac565b60006128ed8383611b2b565b9050866060015160000361290957612909818860000151612041565b606080880151604080518f8152602081018d90529115908201526001600160a01b03808e1692820192909252908b16608082015260a0810186905260c081018590527fc0d4f2a39dc640b5d58b661d102ed4e30c7898a8710fb98d1173cd03a9d39f899060e00160405180910390a1505050505050505050505050565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6129e761012d80546001019055565b6001600160a01b0386163b612a3e5760405162461bcd60e51b815260206004820152601960248201527f546865206e6674206973206e6f74206120636f6e7472616374000000000000006044820152606401610585565b60008111612a8e5760405162461bcd60e51b815260206004820152601d60248201527f50726963652073686f756c6420626520626967676572207468616e20300000006044820152606401610585565b6040516301ffc9a760e01b815286906001600160a01b038216906301ffc9a790612ac3906380ac58cd60e01b90600401613ad7565b602060405180830381865afa158015612ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b049190613cc3565b15612b1a57612b1587868689613063565b612c0e565b6040516301ffc9a760e01b81526001600160a01b038216906301ffc9a790612b4d90636cdb3d1360e11b90600401613ad7565b602060405180830381865afa158015612b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8e9190613cc3565b15612ba057612b15878686868a61333a565b60405162461bcd60e51b815260206004820152603760248201527f4d61726b6574706c616365235f6372656174654f726465723a206e6674206d7560448201527f737420626520657263373231206f7220657263313135350000000000000000006064820152608401610585565b6000612c1a8887611b2b565b90506000612c2861012d5490565b905060006040518060c001604052808381526020018a6001600160a01b031681526020018981526020018881526020018b6001600160a01b031681526020018681525090508061013160008481526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050155905050612d118383613522565b6040805183815260208082018690528351828401528301516001600160a01b03908116606080840191909152928401516080808401919091529284015160a080840191909152928401511660c08201529082015160e08201527fe3619e9171e93f9dee00bfcdc752e8a94dda1ba2aa6bd74a6edb3f33f6e0511b906101000160405180910390a150505050505050505050565b600054610100900460ff16610eb25760405162461bcd60e51b815260040161058590613e49565b600054610100900460ff16612df25760405162461bcd60e51b815260040161058590613e49565b610eb2613584565b600081600003612e0c57506001612e69565b60a084015161012f54600090620f424090612e279084613daa565b612e319190613e94565b9050612e3d8183613d84565b91506000612e4b8587613e94565b905080831015612e615760019350505050612e69565b600093505050505b9392505050565b6060600060018451612e829190613d97565b67ffffffffffffffff811115612e9a57612e9a61380c565b604051908082528060200260200182016040528015612ec3578160200160208202803683370190505b50905060005b8151811015610bd257838114158015612ee157508381105b15612f2357848181518110612ef857612ef8613ce5565b6020026020010151828281518110612f1257612f12613ce5565b602002602001018181525050612f66565b84612f2f826001613d84565b81518110612f3f57612f3f613ce5565b6020026020010151828281518110612f5957612f59613ce5565b6020026020010181815250505b80612f7081613d11565b915050612ec9565b6001600160a01b0381163b612fe55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610585565b600080516020613f2a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61301d836135b4565b60008251118061302a5750805b1561077e5761303983836135f4565b50505050565b6000612e698284613daa565b6000612e698284613e94565b6000612e698284613d97565b6040516331a9108f60e11b8152600481018490526001600160a01b038083169190861690636352211e90602401602060405180830381865afa1580156130ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d19190613c8d565b6001600160a01b03161461315b5760405162461bcd60e51b8152602060048201526044602482018190527f4d61726b6574706c6163652365726337323176616c69646174653a2054686520908201527f73656e646572206973206e6f7420746865206f776e6572206f6620746865207460648201526337b5b2b760e11b608482015260a401610585565b60405163020604bf60e21b81526004810184905230906001600160a01b0386169063081812fc90602401602060405180830381865afa1580156131a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c69190613c8d565b6001600160a01b03161480613246575060405163e985e9c560e01b81526001600160a01b03828116600483015230602483015285169063e985e9c590604401602060405180830381865afa158015613222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132469190613cc3565b6132cf5760405162461bcd60e51b815260206004820152604e60248201527f4d61726b6574706c6163652365726337323176616c69646174653a205468652060448201527f636f6e7472616374206973206e6f7420617574686f72697a656420746f206d6160648201526d1b9859d9481d1a1948185cdcd95d60921b608482015260a401610585565b816001146130395760405162461bcd60e51b815260206004820152603260248201527f4d61726b6574706c6163652365726337323176616c69646174653a2054686520604482015271616d6f756e742073686f756c64206265203160701b6064820152608401610585565b818314610ec257604051627eeac760e11b81526001600160a01b038281166004830152602482018690526000919087169062fdd58e90604401602060405180830381865afa158015613390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133b49190613caa565b116134275760405162461bcd60e51b815260206004820152603e60248201527f4d61726b6574706c616365235f6572633131353576616c69646174653a204f6e60448201527f6c7920746865206f776e65722063616e20637265617465206f726465727300006064820152608401610585565b60405163e985e9c560e01b81526001600160a01b03828116600483015230602483015286169063e985e9c590604401602060405180830381865afa158015613473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134979190613cc3565b610ec25760405162461bcd60e51b815260206004820152605060248201527f4d61726b6574706c616365235f6572633131353576616c69646174653a20546860448201527f6520636f6e7472616374206973206e6f7420617574686f72697a656420746f2060648201526f1b585b9859d9481d1a1948185cdcd95d60821b608482015260a401610585565b60008281526101326020526040812054900361356057604080516020808201835283825260008581526101329091529190912061077e916001613737565b60009182526101326020908152604083208054600181018255908452922090910155565b600054610100900460ff166135ab5760405162461bcd60e51b815260040161058590613e49565b610eb233612986565b6135bd81612f78565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060612e698383604051806060016040528060278152602001613f4a602791396060600080856001600160a01b0316856040516136319190613eda565b600060405180830381855af49150503d806000811461366c576040519150601f19603f3d011682016040523d82523d6000602084013e613671565b606091505b50915091506136828683838761368c565b9695505050505050565b606083156136fb5782516000036136f4576001600160a01b0385163b6136f45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610585565b5081613705565b613705838361370d565b949350505050565b81511561371d5781518083602001fd5b8060405162461bcd60e51b81526004016105859190613ef6565b828054828255906000526020600020908101928215613772579160200282015b82811115613772578251825591602001919060010190613757565b5061377e929150613782565b5090565b5b8082111561377e5760008155600101613783565b6000602082840312156137a957600080fd5b81356001600160e01b031981168114612e6957600080fd5b6000602082840312156137d357600080fd5b5035919050565b6001600160a01b038116811461053a57600080fd5b60006020828403121561380157600080fd5b8135612e69816137da565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561384b5761384b61380c565b604052919050565b6000806040838503121561386657600080fd5b8235613871816137da565b915060208381013567ffffffffffffffff8082111561388f57600080fd5b818601915086601f8301126138a357600080fd5b8135818111156138b5576138b561380c565b6138c7601f8201601f19168501613822565b915080825287848285010111156138dd57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806040838503121561390e57600080fd5b50508035926020909101359150565b6000806000806080858703121561393357600080fd5b843593506020850135613945816137da565b93969395505050506040820135916060013590565b600082601f83011261396b57600080fd5b8135602067ffffffffffffffff8211156139875761398761380c565b8160051b613996828201613822565b92835284810182019282810190878511156139b057600080fd5b83870192505b848310156139cf578235825291830191908301906139b6565b979650505050505050565b60008083601f8401126139ec57600080fd5b50813567ffffffffffffffff811115613a0457600080fd5b602083019150836020828501011115613a1c57600080fd5b9250929050565b60008060008060008060a08789031215613a3c57600080fd5b8635613a47816137da565b95506020870135613a57816137da565b9450604087013567ffffffffffffffff80821115613a7457600080fd5b613a808a838b0161395a565b95506060890135915080821115613a9657600080fd5b613aa28a838b0161395a565b94506080890135915080821115613ab857600080fd5b50613ac589828a016139da565b979a9699509497509295939492505050565b6001600160e01b031991909116815260200190565b600081518084526020808501945080840160005b83811015613b1c57815187529582019590820190600101613b00565b509495945050505050565b602081526000825160a06020840152613b4360c0840182613aec565b90506020840151601f19848303016040850152613b608282613aec565b9150506040840151606084015260608401516080840152608084015160a08401528091505092915050565b60008060008060008060a08789031215613ba457600080fd5b8635613baf816137da565b95506020870135613bbf816137da565b94506040870135935060608701359250608087013567ffffffffffffffff811115613be957600080fd5b613ac589828a016139da565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215613c9f57600080fd5b8151612e69816137da565b600060208284031215613cbc57600080fd5b5051919050565b600060208284031215613cd557600080fd5b81518015158114612e6957600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613d2357613d23613cfb565b5060010190565b60008085851115613d3a57600080fd5b83861115613d4757600080fd5b5050820193919092039150565b6001600160e01b03198135818116916004851015613d7c5780818660040360031b1b83161692505b505092915050565b8082018082111561052357610523613cfb565b8181038181111561052357610523613cfb565b808202811582820484141761052357610523613cfb565b60008060408385031215613dd457600080fd5b825160ff81168114613de557600080fd5b6020939093015192949293505050565b6001600160a01b03858116825284166020820152608060408201819052600090613e2190830185613aec565b82810360608401526139cf8185613aec565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082613eb157634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015613ed1578181015183820152602001613eb9565b50506000910152565b60008251613eec818460208701613eb6565b9190910192915050565b6020815260008251806020840152613f15816040850160208701613eb6565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220377940a5c9ac64729809fc3e49986d00192f72a1c2b4ab767e9e771d58b0768e64736f6c63430008120033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Will pass to onERC115Batch5Received"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 590,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 593,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2040,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 572,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 887,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1812,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1246,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 26027,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "_orderIdCounter",
        "offset": 0,
        "slot": "301",
        "type": "t_struct(Counter)1819_storage"
      },
      {
        "astId": 26030,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "acceptedToken",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)7811"
      },
      {
        "astId": 26032,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "ownerCutPerMillion",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 26035,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "config",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IConfig)20550"
      },
      {
        "astId": 26040,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "orderById",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_uint256,t_struct(Order)25743_storage)"
      },
      {
        "astId": 26045,
        "contract": "contracts/game/Marketplace.sol:Marketplace",
        "label": "_orderIdsByProductId",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConfig)20550": {
        "encoding": "inplace",
        "label": "contract IConfig",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)7811": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Order)25743_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMarketplace.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)25743_storage"
      },
      "t_struct(Counter)1819_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1818,
            "contract": "contracts/game/Marketplace.sol:Marketplace",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Order)25743_storage": {
        "encoding": "inplace",
        "label": "struct IMarketplace.Order",
        "members": [
          {
            "astId": 25732,
            "contract": "contracts/game/Marketplace.sol:Marketplace",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 25734,
            "contract": "contracts/game/Marketplace.sol:Marketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 25736,
            "contract": "contracts/game/Marketplace.sol:Marketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 25738,
            "contract": "contracts/game/Marketplace.sol:Marketplace",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 25740,
            "contract": "contracts/game/Marketplace.sol:Marketplace",
            "label": "nft",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 25742,
            "contract": "contracts/game/Marketplace.sol:Marketplace",
            "label": "priceInWeiForUnit",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}